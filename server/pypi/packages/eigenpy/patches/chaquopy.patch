diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2d6360c..5a95c58 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -93,6 +93,32 @@ include("${JRL_CMAKE_MODULES}/base.cmake")
 compute_project_args(PROJECT_ARGS LANGUAGES CXX)
 project(${PROJECT_NAME} ${PROJECT_ARGS})
 
+# todo xiao
+set(PYTHON_EXECUTABLE "/home/ubuntu/workspace/chaquopy/server/pypi/packages/eigenpy/build/3.10.3/cp39-cp39-android_28_arm64_v8a/env/bin/python3.9")
+# eigen3
+set(Eigen3_DIR "/usr/share/eigen3/cmake")
+# boost
+# set(BOOST_ROOT "/home/ubuntu/workspace/pkg/boost_1_85_0/arm64-v8a")
+# set(Boost_NO_SYSTEM_PATHS ON)
+set(BOOST_ROOT "/home/ubuntu/workspace/pkg/boost_1_85_0/arm64-v8a")
+set(BOOST_LIBRARYDIR "/home/ubuntu/workspace/pkg/boost_1_85_0/arm64-v8a/lib")
+set(Boost_USE_STATIC_LIBS ON)
+set(Boost_DIR "/home/ubuntu/workspace/pkg/boost_1_85_0/arm64-v8a/lib/cmake/Boost-1.85.0")
+set(boost_headers_DIR "/home/ubuntu/workspace/pkg/boost_1_85_0/arm64-v8a/lib/cmake/boost_headers-1.85.0")
+set(boost_filesystem_DIR "/home/ubuntu/workspace/pkg/boost_1_85_0/arm64-v8a/lib/cmake/boost_filesystem-1.85.0")
+set(boost_atomic_DIR "/home/ubuntu/workspace/pkg/boost_1_85_0/arm64-v8a/lib/cmake/boost_atomic-1.85.0")
+set(boost_system_DIR "/home/ubuntu/workspace/pkg/boost_1_85_0/arm64-v8a/lib/cmake/boost_system-1.85.0")
+set(boost_serialization_DIR "/home/ubuntu/workspace/pkg/boost_1_85_0/arm64-v8a/lib/cmake/boost_serialization-1.85.0")
+set(boost_python_DIR "/home/ubuntu/workspace/pkg/boost_1_85_0/arm64-v8a/lib/cmake/boost_python-1.85.0")
+set(boost_container_DIR "/home/ubuntu/workspace/pkg/boost_1_85_0/arm64-v8a/lib/cmake/boost_container-1.85.0")
+set(boost_graph_DIR "/home/ubuntu/workspace/pkg/boost_1_85_0/arm64-v8a/lib/cmake/boost_graph-1.85.0")
+set(Boost_COMPILER "-clang")
+message(--------------------------------------Boost_INCLUDE_DIRS = ${Boost_INCLUDE_DIRS})
+include_directories(${Boost_INCLUDE_DIRS})
+message(--------------------------------------Threads---1)
+find_package(Threads REQUIRED)
+message(--------------------------------------Threads---2)
+
 include("${JRL_CMAKE_MODULES}/boost.cmake")
 include("${JRL_CMAKE_MODULES}/python.cmake")
 include("${JRL_CMAKE_MODULES}/ide.cmake")
@@ -122,13 +148,19 @@ else(WIN32)
   set(LINK create_symlink)
 endif(WIN32)
 
-if(CMAKE_CROSSCOMPILING)
-  set(PYTHON_COMPONENTS Interpreter NumPy)
-else()
-  set(PYTHON_COMPONENTS Interpreter Development.Module NumPy)
-endif()
+# todo xiao
+# if(CMAKE_CROSSCOMPILING)
+#   set(PYTHON_COMPONENTS Interpreter NumPy)
+# else()
+#   set(PYTHON_COMPONENTS Interpreter Development.Module NumPy)
+# endif()
+set(PYTHON_COMPONENTS Development.Module)
+
 set(PYTHON_EXPORT_DEPENDENCY ON)
+message(-----------------------------CMakeLists---1)
 findpython(REQUIRED)
+# set(Boost_PYTHON_VERSION "3.9")
+message(-----------------------------CMakeLists---2)
 
 if(${NUMPY_VERSION} VERSION_LESS "1.16.0")
   set(NUMPY_WITH_BROKEN_UFUNC_SUPPORT TRUE)
@@ -150,7 +182,11 @@ add_project_dependency(Eigen3 REQUIRED PKG_CONFIG_REQUIRES "eigen3 >= 3.0.5")
 
 set_boost_default_options()
 export_boost_default_options()
-find_package(Boost REQUIRED)
+
+message(-------------------------------Boost_USE_STATIC_LIBS = ${Boost_USE_STATIC_LIBS})
+# todo xiao
+find_package(Boost REQUIRED COMPONENTS python)
+# find_package(Boost REQUIRED COMPONENTS python container)
 search_for_boost_python(REQUIRED)
 
 if(BUILD_WITH_CHOLMOD_SUPPORT)
Submodule cmake contains modified content
diff --git a/cmake/boost.cmake b/cmake/boost.cmake
index 49304e1..1eead19 100644
--- a/cmake/boost.cmake
+++ b/cmake/boost.cmake
@@ -21,6 +21,7 @@
 # FALSE otherwise. This function is for internal use only.
 #
 function(SEARCH_FOR_BOOST_COMPONENT boost_python_name found)
+  message(--------------------------boost_python_name = ${boost_python_name})
   set(${found} FALSE PARENT_SCOPE)
   find_package(
     Boost
@@ -48,8 +49,12 @@ endif(CMAKE_VERSION VERSION_LESS "3.12")
 # components.
 #
 macro(SET_BOOST_DEFAULT_OPTIONS)
-  set(Boost_USE_STATIC_LIBS OFF)
+  # todo xiao
+  # set(Boost_USE_STATIC_LIBS OFF)
+  set(Boost_USE_STATIC_LIBS ON)
+
   set(Boost_USE_MULTITHREADED ON)
+
   set(Boost_NO_BOOST_CMAKE ON)
 endmacro(SET_BOOST_DEFAULT_OPTIONS)
 
@@ -63,13 +68,17 @@ macro(EXPORT_BOOST_DEFAULT_OPTIONS)
     INSERT
     _PACKAGE_CONFIG_DEPENDENCIES_FIND_PACKAGE
     0
-    "SET(Boost_USE_STATIC_LIBS OFF);SET(Boost_USE_MULTITHREADED ON);SET(Boost_NO_BOOST_CMAKE ON)"
+    # todo xiao
+    # "SET(Boost_USE_STATIC_LIBS OFF);SET(Boost_USE_MULTITHREADED ON);SET(Boost_NO_BOOST_CMAKE ON)"
+    "SET(Boost_USE_STATIC_LIBS ON);SET(Boost_USE_MULTITHREADED ON);SET(Boost_NO_BOOST_CMAKE ON)"
   )
   list(
     INSERT
     _PACKAGE_CONFIG_DEPENDENCIES_FIND_DEPENDENCY
     0
-    "SET(Boost_USE_STATIC_LIBS OFF);SET(Boost_USE_MULTITHREADED ON);SET(Boost_NO_BOOST_CMAKE ON)"
+    # todo xiao
+    # "SET(Boost_USE_STATIC_LIBS OFF);SET(Boost_USE_MULTITHREADED ON);SET(Boost_NO_BOOST_CMAKE ON)"
+    "SET(Boost_USE_STATIC_LIBS ON);SET(Boost_USE_MULTITHREADED ON);SET(Boost_NO_BOOST_CMAKE ON)"
   )
 endmacro(EXPORT_BOOST_DEFAULT_OPTIONS)
 
@@ -118,6 +127,7 @@ macro(SEARCH_FOR_BOOST_PYTHON)
       "python${PYTHON_VERSION_MAJOR}"
       "python-py${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}"
     )
+    message(------------------------------------BOOST_PYTHON_COMPONENT_LIST = ${BOOST_PYTHON_COMPONENT_LIST})
     set(BOOST_PYTHON_FOUND FALSE)
     foreach(BOOST_PYTHON_COMPONENT ${BOOST_PYTHON_COMPONENT_LIST})
       SEARCH_FOR_BOOST_COMPONENT(${BOOST_PYTHON_COMPONENT} BOOST_PYTHON_FOUND)
@@ -145,6 +155,8 @@ macro(SEARCH_FOR_BOOST_PYTHON)
       "${PYTHON_EXPORT_DEPENDENCY_MACROS}\nSEARCH_FOR_BOOST_PYTHON(${BOOST_PYTHON_REQUIRED} NAME ${BOOST_PYTHON_NAME})"
     )
   endif()
+  message(------------------------------------BOOST_PYTHON_REQUIRED = ${BOOST_PYTHON_REQUIRED})
+  message(------------------------------------BOOST_PYTHON_NAME = ${BOOST_PYTHON_NAME})
   find_package(Boost ${BOOST_PYTHON_REQUIRED} COMPONENTS ${BOOST_PYTHON_NAME})
   string(TOUPPER ${BOOST_PYTHON_NAME} UPPERCOMPONENT)
 
diff --git a/cmake/python.cmake b/cmake/python.cmake
index 0053bcb..e19002e 100644
--- a/cmake/python.cmake
+++ b/cmake/python.cmake
@@ -56,380 +56,398 @@
 # `FIND_NUMPY` and/or `SEARCH_FOR_BOOST_PYTHON` if necessary.
 
 macro(FINDPYTHON)
-  if(DEFINED FINDPYTHON_ALREADY_CALLED)
-    message(
-      AUTHOR_WARNING
-      "Macro FINDPYTHON has already been called. Several call to FINDPYTHON may not find the same Python version (for a yet unknown reason)."
-    )
-  endif()
-  set(FINDPYTHON_ALREADY_CALLED TRUE)
-
-  if(NOT PYTHON_COMPONENTS)
-    set(PYTHON_COMPONENTS Interpreter Development)
-  endif()
-
-  list(FIND PYTHON_COMPONENTS "NumPy" _npindex)
-  if(NOT ${_npindex} EQUAL -1)
-    set(SEARCH_FOR_NUMPY TRUE)
-  endif()
-
-  if(CMAKE_VERSION VERSION_LESS "3.18")
-    # IF("Development.Module" IN_LIST PYTHON_COMPONENTS) -- require CMake 3.3
-    list(FIND PYTHON_COMPONENTS "Development.Module" _index)
-    if(NOT ${_index} EQUAL -1)
-      message(
-        STATUS
-        "For CMake < 3.18, Development.Module is not available. Falling back to Development"
-      )
-      list(REMOVE_ITEM PYTHON_COMPONENTS Development.Module)
-      set(PYTHON_COMPONENTS ${PYTHON_COMPONENTS} Development)
-    endif()
-    if(CMAKE_VERSION VERSION_LESS "3.14")
-      if(SEARCH_FOR_NUMPY)
-        message(
-          STATUS
-          "For CMake < 3.14, NumPy is not available. Falling back to custom FIND_NUMPY()"
-        )
-        list(REMOVE_ITEM PYTHON_COMPONENTS NumPy)
-      endif()
-    endif()
-  endif()
-
-  if(NOT CMAKE_VERSION VERSION_LESS "3.12")
-    if(
-      DEFINED PYTHON_EXECUTABLE
-      OR DEFINED Python_EXECUTABLE
-      OR DEFINED Python2_EXECUTABLE
-      OR DEFINED Python3_EXECUTABLE
-    )
-      if(NOT DEFINED PYTHON_EXECUTABLE)
-        if(DEFINED Python_EXECUTABLE)
-          set(PYTHON_EXECUTABLE ${Python_EXECUTABLE})
-        elseif(DEFINED Python2_EXECUTABLE)
-          set(PYTHON_EXECUTABLE ${Python2_EXECUTABLE})
-        elseif(DEFINED Python3_EXECUTABLE)
-          set(PYTHON_EXECUTABLE ${Python3_EXECUTABLE})
-        endif()
-      endif()
-
-      if(NOT DEFINED Python_EXECUTABLE)
-        set(Python_EXECUTABLE ${PYTHON_EXECUTABLE})
-      endif()
-    else()
-      # Search for the default python of the system, if exists
-      find_program(PYTHON_EXECUTABLE python)
-    endif()
-
-    if(PYTHON_EXECUTABLE)
-      if(NOT EXISTS ${PYTHON_EXECUTABLE})
-        message(
-          FATAL_ERROR
-          "${PYTHON_EXECUTABLE} is not a valid path to the Python executable"
-        )
-      endif()
-      execute_process(
-        COMMAND ${PYTHON_EXECUTABLE} --version
-        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
-        RESULT_VARIABLE _PYTHON_VERSION_RESULT_VARIABLE
-        OUTPUT_VARIABLE _PYTHON_VERSION_OUTPUT
-        ERROR_VARIABLE _PYTHON_VERSION_OUTPUT
-        OUTPUT_STRIP_TRAILING_WHITESPACE
-        ERROR_STRIP_TRAILING_WHITESPACE
-      )
-
-      if(NOT "${_PYTHON_VERSION_RESULT_VARIABLE}" STREQUAL "0")
-        message(FATAL_ERROR "${PYTHON_EXECUTABLE} --version did not succeed.")
-      endif()
-      string(
-        REGEX REPLACE
-        "Python "
-        ""
-        _PYTHON_VERSION
-        ${_PYTHON_VERSION_OUTPUT}
-      )
-      string(REGEX REPLACE "\\." ";" _PYTHON_VERSION ${_PYTHON_VERSION})
-      list(GET _PYTHON_VERSION 0 _PYTHON_VERSION_MAJOR)
-
-      # Provide some hints according to the current PYTHON_EXECUTABLE
-      if(NOT DEFINED PYTHON_INCLUDE_DIR)
-        if(_PYTHON_VERSION_MAJOR EQUAL "2")
-          set(
-            _PYTHON_INCLUDE_DIR_CMD
-            "import distutils.sysconfig as sysconfig; print(sysconfig.get_python_inc())"
-          )
-        else()
-          set(
-            _PYTHON_INCLUDE_DIR_CMD
-            "import sysconfig; print(sysconfig.get_path('include'))"
-          )
-        endif()
-        execute_process(
-          COMMAND "${PYTHON_EXECUTABLE}" "-c" "${_PYTHON_INCLUDE_DIR_CMD}"
-          OUTPUT_VARIABLE PYTHON_INCLUDE_DIR
-          ERROR_QUIET
-        )
-        string(STRIP "${PYTHON_INCLUDE_DIR}" PYTHON_INCLUDE_DIR)
-        file(TO_CMAKE_PATH "${PYTHON_INCLUDE_DIR}" PYTHON_INCLUDE_DIR)
-      endif()
-
-      # Hint for finding the right Python version
-      set(Python_EXECUTABLE ${PYTHON_EXECUTABLE})
-      set(Python${_PYTHON_VERSION_MAJOR}_EXECUTABLE ${PYTHON_EXECUTABLE})
-      set(Python${_PYTHON_VERSION_MAJOR}_INCLUDE_DIR ${PYTHON_INCLUDE_DIR})
-
-      if(SEARCH_FOR_NUMPY)
-        FIND_NUMPY()
-        set(Python_NumPy_INCLUDE_DIR ${NUMPY_INCLUDE_DIRS})
-      endif()
-
-      find_package(
-        "Python${_PYTHON_VERSION_MAJOR}"
-        REQUIRED
-        COMPONENTS ${PYTHON_COMPONENTS}
-      )
-    else()
-      # No hint was provided. We can then check for first Python 2, then Python
-      # 3
-      find_package(Python2 QUIET COMPONENTS ${PYTHON_COMPONENTS})
-      if(NOT Python2_FOUND)
-        find_package(Python3 QUIET COMPONENTS ${PYTHON_COMPONENTS})
-        if(NOT Python3_FOUND)
-          message(FATAL_ERROR "Python executable has not been found.")
-        else()
-          set(_PYTHON_VERSION_MAJOR 3)
-        endif()
-      else()
-        set(_PYTHON_VERSION_MAJOR 2)
-      endif()
-    endif()
-
-    set(_PYTHON_PREFIX "Python${_PYTHON_VERSION_MAJOR}")
-
-    if(${_PYTHON_PREFIX}_FOUND)
-      set(PYTHON_EXECUTABLE ${${_PYTHON_PREFIX}_EXECUTABLE})
-      set(PYTHON_LIBRARY ${${_PYTHON_PREFIX}_LIBRARIES})
-      set(PYTHON_LIBRARIES ${${_PYTHON_PREFIX}_LIBRARIES})
-      set(PYTHON_INCLUDE_DIR ${${_PYTHON_PREFIX}_INCLUDE_DIRS})
-      set(PYTHON_INCLUDE_DIRS ${${_PYTHON_PREFIX}_INCLUDE_DIRS})
-      set(PYTHON_VERSION_STRING ${${_PYTHON_PREFIX}_VERSION})
-      set(PYTHONLIBS_VERSION_STRING ${${_PYTHON_PREFIX}_VERSION})
-      set(PYTHON_FOUND ${${_PYTHON_PREFIX}_FOUND})
-      set(PYTHONLIBS_FOUND ${${_PYTHON_PREFIX}_FOUND})
-      set(PYTHON_VERSION_MAJOR ${${_PYTHON_PREFIX}_VERSION_MAJOR})
-      set(PYTHON_VERSION_MINOR ${${_PYTHON_PREFIX}_VERSION_MINOR})
-      set(PYTHON_VERSION_PATCH ${${_PYTHON_PREFIX}_VERSION_PATCH})
-    else()
-      message(FATAL_ERROR "Python executable has not been found.")
-    endif()
-
-    if(SEARCH_FOR_NUMPY)
-      set(
-        NUMPY_INCLUDE_DIRS
-        "${Python${_PYTHON_VERSION_MAJOR}_NumPy_INCLUDE_DIRS}"
-      )
-      string(REPLACE "\\" "/" NUMPY_INCLUDE_DIRS "${NUMPY_INCLUDE_DIRS}")
-      file(TO_CMAKE_PATH "${NUMPY_INCLUDE_DIRS}" NUMPY_INCLUDE_DIRS)
-    endif()
-  else()
-    find_package(PythonInterp ${ARGN})
-    if(NOT ${PYTHONINTERP_FOUND} STREQUAL TRUE)
-      message(FATAL_ERROR "Python executable has not been found.")
-    endif()
-    message(STATUS "PythonInterp: ${PYTHON_EXECUTABLE}")
-
-    # Set PYTHON_INCLUDE_DIR variables if it is not defined by the user
-    if(DEFINED PYTHON_EXECUTABLE)
-      # Retrieve the corresponding value of PYTHON_INCLUDE_DIR if it is not
-      # defined
-      if(NOT DEFINED PYTHON_INCLUDE_DIR)
-        if(PYTHON_VERSION_MAJOR EQUAL "2")
-          set(
-            _PYTHON_INCLUDE_DIR_CMD
-            "import distutils.sysconfig as sysconfig; print(sysconfig.get_python_inc())"
-          )
-        else()
-          set(
-            _PYTHON_INCLUDE_DIR_CMD
-            "import sysconfig; print(sysconfig.get_path('include'))"
-          )
-        endif()
-        execute_process(
-          COMMAND "${PYTHON_EXECUTABLE}" "-c" "${_PYTHON_INCLUDE_DIR_CMD}"
-          OUTPUT_VARIABLE PYTHON_INCLUDE_DIR
-          ERROR_QUIET
-        )
-        string(STRIP "${PYTHON_INCLUDE_DIR}" PYTHON_INCLUDE_DIR)
-      endif()
-      set(PYTHON_INCLUDE_DIRS ${PYTHON_INCLUDE_DIR})
-    endif()
-
-    # Inform PythonLibs of the required version of PythonInterp
-    set(PYTHONLIBS_VERSION_STRING ${PYTHON_VERSION_STRING})
-
-    find_package(PythonLibs ${ARGN})
-    message(STATUS "PythonLibraries: ${PYTHON_LIBRARIES}")
-    if(NOT ${PYTHONLIBS_FOUND} STREQUAL TRUE)
-      message(FATAL_ERROR "Python has not been found.")
-    endif()
-
-    string(REPLACE "." ";" _PYTHONLIBS_VERSION ${PYTHONLIBS_VERSION_STRING})
-    list(GET _PYTHONLIBS_VERSION 0 PYTHONLIBS_VERSION_MAJOR)
-    list(GET _PYTHONLIBS_VERSION 1 PYTHONLIBS_VERSION_MINOR)
-
-    if(
-      NOT ${PYTHON_VERSION_MAJOR} EQUAL ${PYTHONLIBS_VERSION_MAJOR}
-      OR NOT ${PYTHON_VERSION_MINOR} EQUAL ${PYTHONLIBS_VERSION_MINOR}
-    )
-      message(
-        FATAL_ERROR
-        "Python interpreter and libraries are in different version: ${PYTHON_VERSION_STRING} vs ${PYTHONLIBS_VERSION_STRING}"
-      )
-    endif()
-  endif()
-
-  # Find PYTHON_LIBRARY_DIRS
-  get_filename_component(PYTHON_LIBRARY_DIRS "${PYTHON_LIBRARIES}" PATH)
-  message(STATUS "PythonLibraryDirs: ${PYTHON_LIBRARY_DIRS}")
-  message(STATUS "PythonLibVersionString: ${PYTHONLIBS_VERSION_STRING}")
-
-  if(NOT PYTHON_SITELIB)
-    # Use either site-packages (default) or dist-packages (Debian packages)
-    # directory
-    option(PYTHON_DEB_LAYOUT "Enable Debian-style Python package layout" OFF)
-    # ref. https://docs.python.org/3/library/site.html
-    option(PYTHON_STANDARD_LAYOUT "Enable standard Python package layout" ON)
-
-    if(PYTHON_STANDARD_LAYOUT)
-      set(
-        _PYTHON_SITELIB_CMD
-        "import sys, os; print(os.sep.join(['lib', 'python' + '.'.join(sys.version.split('.')[:2]), 'site-packages']))"
-      )
-    else()
-      if(PYTHON_VERSION_MAJOR EQUAL "2")
-        set(
-          _PYTHON_SITELIB_CMD
-          "from distutils import sysconfig; print(sysconfig.get_python_lib(prefix='', plat_specific=False))"
-        )
-      else()
-        set(
-          _PYTHON_SITELIB_CMD
-          "import sysconfig; from pathlib import Path; print(Path(sysconfig.get_path('purelib')).relative_to(sysconfig.get_path('data')))"
-        )
-      endif()
-    endif()
-
-    execute_process(
-      COMMAND "${PYTHON_EXECUTABLE}" "-c" "${_PYTHON_SITELIB_CMD}"
-      OUTPUT_VARIABLE PYTHON_SITELIB
-      OUTPUT_STRIP_TRAILING_WHITESPACE
-      ERROR_QUIET
-    )
-
-    # Keep compatility with former jrl-cmake-modules versions
-    if(PYTHON_DEB_LAYOUT)
-      string(
-        REPLACE
-        "site-packages"
-        "dist-packages"
-        PYTHON_SITELIB
-        "${PYTHON_SITELIB}"
-      )
-    endif()
-
-    # If PYTHON_PACKAGES_DIR is defined, then force the Python packages
-    # directory name
-    if(PYTHON_PACKAGES_DIR)
-      string(
-        REGEX REPLACE
-        "(site-packages|dist-packages)"
-        "${PYTHON_PACKAGES_DIR}"
-        PYTHON_SITELIB
-        "${PYTHON_SITELIB}"
-      )
-    endif()
-  endif()
-
-  # Avoid paths in Windows format
-  if(PYTHON_SITELIB)
-    file(TO_CMAKE_PATH "${PYTHON_SITELIB}" PYTHON_SITELIB)
-  endif()
-
-  message(STATUS "Python site lib: ${PYTHON_SITELIB}")
-  message(STATUS "Python include dirs: ${PYTHON_INCLUDE_DIRS}")
-
-  # Get PYTHON_SOABI We should be in favor of using PYTHON_EXT_SUFFIX in future
-  # for better portability. However we keep it here for backward compatibility.
-  set(PYTHON_SOABI "")
-  if(PYTHON_VERSION_MAJOR EQUAL 3 AND NOT WIN32)
-    execute_process(
-      COMMAND
-        "${PYTHON_EXECUTABLE}" "-c"
-        "from sysconfig import get_config_var; print('.' + get_config_var('SOABI'))"
-      OUTPUT_VARIABLE PYTHON_SOABI
-    )
-    string(STRIP ${PYTHON_SOABI} PYTHON_SOABI)
-  endif()
-
-  # Get PYTHON_EXT_SUFFIX
-  set(PYTHON_EXT_SUFFIX "")
-  if(PYTHON_VERSION_MAJOR EQUAL 3)
-    execute_process(
-      COMMAND
-        "${PYTHON_EXECUTABLE}" "-c"
-        "from sysconfig import get_config_var; print(get_config_var('EXT_SUFFIX'))"
-      OUTPUT_VARIABLE PYTHON_EXT_SUFFIX
-    )
-    string(STRIP ${PYTHON_EXT_SUFFIX} PYTHON_EXT_SUFFIX)
-  endif()
-  if("${PYTHON_EXT_SUFFIX}" STREQUAL "")
-    if(WIN32)
-      set(PYTHON_EXT_SUFFIX ".pyd")
-    else()
-      set(PYTHON_EXT_SUFFIX ".so")
-    endif()
-  endif()
-
-  if(PYTHON_EXPORT_DEPENDENCY)
-    INSTALL_JRL_CMAKEMODULES_FILE("python.cmake")
-    INSTALL_JRL_CMAKEMODULES_FILE("python-helpers.cmake")
-    string(
-      CONCAT
-      PYTHON_EXPORT_DEPENDENCY_MACROS
-      "list(APPEND PYTHON_COMPONENTS ${PYTHON_COMPONENTS})\n"
-      "list(REMOVE_DUPLICATES PYTHON_COMPONENTS)\n"
-      "if(NOT FINDPYTHON_ALREADY_CALLED)\n"
-      "FINDPYTHON()\n"
-      "endif()\n"
-    )
-  endif()
-
-  if(SEARCH_FOR_NUMPY)
-    FIND_NUMPY()
-    if(PYTHON_EXPORT_DEPENDENCY)
-      set(
-        PYTHON_EXPORT_DEPENDENCY_MACROS
-        "set(SEARCH_FOR_NUMPY TRUE)\n${PYTHON_EXPORT_DEPENDENCY_MACROS}"
-      )
-    endif()
-  endif()
-
-  if(SEARCH_FOR_NUMPY)
-    message(STATUS "NumPy include dir: ${NUMPY_INCLUDE_DIRS}")
-    list(APPEND NUMPY_INCLUDE_DIRS)
-  endif()
-
-  # Log Python variables
-  list(
-    APPEND
-    LOGGING_WATCHED_VARIABLES
-    PYTHONINTERP_FOUND
-    PYTHONLIBS_FOUND
-    PYTHON_LIBRARY_DIRS
-    PYTHONLIBS_VERSION_STRING
-    PYTHON_EXECUTABLE
-    PYTHON_SOABI
-    PYTHON_EXT_SUFFIX
-  )
+  # todo xiao
+  message(-----------------------------FINDPYTHON---1---PYTHON_EXECUTABLE = ${PYTHON_EXECUTABLE})
+  set(Python_EXECUTABLE ${PYTHON_EXECUTABLE})
+  find_package(Python COMPONENTS Interpreter OPTIONAL_COMPONENTS Development ${PYTHON_COMPONENTS})
+  include_directories(${PYTHON_INCLUDE_DIRS})
+  message(-----------------------------FINDPYTHON---2)
+  # numpy
+  set(Python_NumPy_INCLUDE_DIRS "/home/ubuntu/workspace/chaquopy/server/pypi/packages/eigenpy/build/3.10.3/cp39-cp39-android_28_arm64_v8a/requirements/numpy/core/include")
+  add_library(Python::NumPy INTERFACE IMPORTED)
+  target_include_directories(Python::NumPy SYSTEM INTERFACE ${Python_NumPy_INCLUDE_DIRS})
+  set(Python_NumPy_FOUND TRUE CACHE BOOL "" FORCE)
+  set(NUMPY_VERSION "1.23.3")
+
+  set(PYTHON_EXT_SUFFIX ".so")
+  message(-----------------------------FINDPYTHON---3)
+  message(-----------------------------FINDPYTHON---Python_Development.Module_FOUND = ${Python_Development.Module_FOUND})
+  message(-----------------------------FINDPYTHON---Python_NumPy_FOUND = ${Python_NumPy_FOUND})
+
+  # if(DEFINED FINDPYTHON_ALREADY_CALLED)
+  #   message(
+  #     AUTHOR_WARNING
+  #     "Macro FINDPYTHON has already been called. Several call to FINDPYTHON may not find the same Python version (for a yet unknown reason)."
+  #   )
+  # endif()
+  # set(FINDPYTHON_ALREADY_CALLED TRUE)
+
+  # if(NOT PYTHON_COMPONENTS)
+  #   set(PYTHON_COMPONENTS Interpreter Development)
+  # endif()
+
+  # list(FIND PYTHON_COMPONENTS "NumPy" _npindex)
+  # if(NOT ${_npindex} EQUAL -1)
+  #   set(SEARCH_FOR_NUMPY TRUE)
+  # endif()
+
+  # if(CMAKE_VERSION VERSION_LESS "3.18")
+  #   # IF("Development.Module" IN_LIST PYTHON_COMPONENTS) -- require CMake 3.3
+  #   list(FIND PYTHON_COMPONENTS "Development.Module" _index)
+  #   if(NOT ${_index} EQUAL -1)
+  #     message(
+  #       STATUS
+  #       "For CMake < 3.18, Development.Module is not available. Falling back to Development"
+  #     )
+  #     list(REMOVE_ITEM PYTHON_COMPONENTS Development.Module)
+  #     set(PYTHON_COMPONENTS ${PYTHON_COMPONENTS} Development)
+  #   endif()
+  #   if(CMAKE_VERSION VERSION_LESS "3.14")
+  #     if(SEARCH_FOR_NUMPY)
+  #       message(
+  #         STATUS
+  #         "For CMake < 3.14, NumPy is not available. Falling back to custom FIND_NUMPY()"
+  #       )
+  #       list(REMOVE_ITEM PYTHON_COMPONENTS NumPy)
+  #     endif()
+  #   endif()
+  # endif()
+
+  # if(NOT CMAKE_VERSION VERSION_LESS "3.12")
+  #   if(
+  #     DEFINED PYTHON_EXECUTABLE
+  #     OR DEFINED Python_EXECUTABLE
+  #     OR DEFINED Python2_EXECUTABLE
+  #     OR DEFINED Python3_EXECUTABLE
+  #   )
+  #     if(NOT DEFINED PYTHON_EXECUTABLE)
+  #       if(DEFINED Python_EXECUTABLE)
+  #         set(PYTHON_EXECUTABLE ${Python_EXECUTABLE})
+  #       elseif(DEFINED Python2_EXECUTABLE)
+  #         set(PYTHON_EXECUTABLE ${Python2_EXECUTABLE})
+  #       elseif(DEFINED Python3_EXECUTABLE)
+  #         set(PYTHON_EXECUTABLE ${Python3_EXECUTABLE})
+  #       endif()
+  #     endif()
+
+  #     if(NOT DEFINED Python_EXECUTABLE)
+  #       set(Python_EXECUTABLE ${PYTHON_EXECUTABLE})
+  #     endif()
+  #   else()
+  #     # Search for the default python of the system, if exists
+  #     find_program(PYTHON_EXECUTABLE python)
+  #   endif()
+
+  #   if(PYTHON_EXECUTABLE)
+  #     if(NOT EXISTS ${PYTHON_EXECUTABLE})
+  #       message(
+  #         FATAL_ERROR
+  #         "${PYTHON_EXECUTABLE} is not a valid path to the Python executable"
+  #       )
+  #     endif()
+  #     execute_process(
+  #       COMMAND ${PYTHON_EXECUTABLE} --version
+  #       WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
+  #       RESULT_VARIABLE _PYTHON_VERSION_RESULT_VARIABLE
+  #       OUTPUT_VARIABLE _PYTHON_VERSION_OUTPUT
+  #       ERROR_VARIABLE _PYTHON_VERSION_OUTPUT
+  #       OUTPUT_STRIP_TRAILING_WHITESPACE
+  #       ERROR_STRIP_TRAILING_WHITESPACE
+  #     )
+
+  #     if(NOT "${_PYTHON_VERSION_RESULT_VARIABLE}" STREQUAL "0")
+  #       message(FATAL_ERROR "${PYTHON_EXECUTABLE} --version did not succeed.")
+  #     endif()
+  #     string(
+  #       REGEX REPLACE
+  #       "Python "
+  #       ""
+  #       _PYTHON_VERSION
+  #       ${_PYTHON_VERSION_OUTPUT}
+  #     )
+  #     string(REGEX REPLACE "\\." ";" _PYTHON_VERSION ${_PYTHON_VERSION})
+  #     list(GET _PYTHON_VERSION 0 _PYTHON_VERSION_MAJOR)
+
+  #     # Provide some hints according to the current PYTHON_EXECUTABLE
+  #     if(NOT DEFINED PYTHON_INCLUDE_DIR)
+  #       if(_PYTHON_VERSION_MAJOR EQUAL "2")
+  #         set(
+  #           _PYTHON_INCLUDE_DIR_CMD
+  #           "import distutils.sysconfig as sysconfig; print(sysconfig.get_python_inc())"
+  #         )
+  #       else()
+  #         set(
+  #           _PYTHON_INCLUDE_DIR_CMD
+  #           "import sysconfig; print(sysconfig.get_path('include'))"
+  #         )
+  #       endif()
+  #       execute_process(
+  #         COMMAND "${PYTHON_EXECUTABLE}" "-c" "${_PYTHON_INCLUDE_DIR_CMD}"
+  #         OUTPUT_VARIABLE PYTHON_INCLUDE_DIR
+  #         ERROR_QUIET
+  #       )
+  #       string(STRIP "${PYTHON_INCLUDE_DIR}" PYTHON_INCLUDE_DIR)
+  #       file(TO_CMAKE_PATH "${PYTHON_INCLUDE_DIR}" PYTHON_INCLUDE_DIR)
+  #     endif()
+
+  #     # Hint for finding the right Python version
+  #     set(Python_EXECUTABLE ${PYTHON_EXECUTABLE})
+  #     set(Python${_PYTHON_VERSION_MAJOR}_EXECUTABLE ${PYTHON_EXECUTABLE})
+  #     set(Python${_PYTHON_VERSION_MAJOR}_INCLUDE_DIR ${PYTHON_INCLUDE_DIR})
+
+  #     if(SEARCH_FOR_NUMPY)
+  #       FIND_NUMPY()
+  #       set(Python_NumPy_INCLUDE_DIR ${NUMPY_INCLUDE_DIRS})
+  #     endif()
+
+  #     find_package(
+  #       "Python${_PYTHON_VERSION_MAJOR}"
+  #       REQUIRED
+  #       COMPONENTS ${PYTHON_COMPONENTS}
+  #     )
+  #   else()
+  #     # No hint was provided. We can then check for first Python 2, then Python
+  #     # 3
+  #     find_package(Python2 QUIET COMPONENTS ${PYTHON_COMPONENTS})
+  #     if(NOT Python2_FOUND)
+  #       find_package(Python3 QUIET COMPONENTS ${PYTHON_COMPONENTS})
+  #       if(NOT Python3_FOUND)
+  #         message(FATAL_ERROR "Python executable has not been found.")
+  #       else()
+  #         set(_PYTHON_VERSION_MAJOR 3)
+  #       endif()
+  #     else()
+  #       set(_PYTHON_VERSION_MAJOR 2)
+  #     endif()
+  #   endif()
+
+  #   set(_PYTHON_PREFIX "Python${_PYTHON_VERSION_MAJOR}")
+
+  #   if(${_PYTHON_PREFIX}_FOUND)
+  #     set(PYTHON_EXECUTABLE ${${_PYTHON_PREFIX}_EXECUTABLE})
+  #     set(PYTHON_LIBRARY ${${_PYTHON_PREFIX}_LIBRARIES})
+  #     set(PYTHON_LIBRARIES ${${_PYTHON_PREFIX}_LIBRARIES})
+  #     set(PYTHON_INCLUDE_DIR ${${_PYTHON_PREFIX}_INCLUDE_DIRS})
+  #     set(PYTHON_INCLUDE_DIRS ${${_PYTHON_PREFIX}_INCLUDE_DIRS})
+  #     set(PYTHON_VERSION_STRING ${${_PYTHON_PREFIX}_VERSION})
+  #     set(PYTHONLIBS_VERSION_STRING ${${_PYTHON_PREFIX}_VERSION})
+  #     set(PYTHON_FOUND ${${_PYTHON_PREFIX}_FOUND})
+  #     set(PYTHONLIBS_FOUND ${${_PYTHON_PREFIX}_FOUND})
+  #     set(PYTHON_VERSION_MAJOR ${${_PYTHON_PREFIX}_VERSION_MAJOR})
+  #     set(PYTHON_VERSION_MINOR ${${_PYTHON_PREFIX}_VERSION_MINOR})
+  #     set(PYTHON_VERSION_PATCH ${${_PYTHON_PREFIX}_VERSION_PATCH})
+  #   else()
+  #     message(FATAL_ERROR "Python executable has not been found.")
+  #   endif()
+
+  #   if(SEARCH_FOR_NUMPY)
+  #     set(
+  #       NUMPY_INCLUDE_DIRS
+  #       "${Python${_PYTHON_VERSION_MAJOR}_NumPy_INCLUDE_DIRS}"
+  #     )
+  #     string(REPLACE "\\" "/" NUMPY_INCLUDE_DIRS "${NUMPY_INCLUDE_DIRS}")
+  #     file(TO_CMAKE_PATH "${NUMPY_INCLUDE_DIRS}" NUMPY_INCLUDE_DIRS)
+  #   endif()
+  # else()
+  #   find_package(PythonInterp ${ARGN})
+  #   if(NOT ${PYTHONINTERP_FOUND} STREQUAL TRUE)
+  #     message(FATAL_ERROR "Python executable has not been found.")
+  #   endif()
+  #   message(STATUS "PythonInterp: ${PYTHON_EXECUTABLE}")
+
+  #   # Set PYTHON_INCLUDE_DIR variables if it is not defined by the user
+  #   if(DEFINED PYTHON_EXECUTABLE)
+  #     # Retrieve the corresponding value of PYTHON_INCLUDE_DIR if it is not
+  #     # defined
+  #     if(NOT DEFINED PYTHON_INCLUDE_DIR)
+  #       if(PYTHON_VERSION_MAJOR EQUAL "2")
+  #         set(
+  #           _PYTHON_INCLUDE_DIR_CMD
+  #           "import distutils.sysconfig as sysconfig; print(sysconfig.get_python_inc())"
+  #         )
+  #       else()
+  #         set(
+  #           _PYTHON_INCLUDE_DIR_CMD
+  #           "import sysconfig; print(sysconfig.get_path('include'))"
+  #         )
+  #       endif()
+  #       execute_process(
+  #         COMMAND "${PYTHON_EXECUTABLE}" "-c" "${_PYTHON_INCLUDE_DIR_CMD}"
+  #         OUTPUT_VARIABLE PYTHON_INCLUDE_DIR
+  #         ERROR_QUIET
+  #       )
+  #       string(STRIP "${PYTHON_INCLUDE_DIR}" PYTHON_INCLUDE_DIR)
+  #     endif()
+  #     set(PYTHON_INCLUDE_DIRS ${PYTHON_INCLUDE_DIR})
+  #   endif()
+
+  #   # Inform PythonLibs of the required version of PythonInterp
+  #   set(PYTHONLIBS_VERSION_STRING ${PYTHON_VERSION_STRING})
+
+  #   find_package(PythonLibs ${ARGN})
+  #   message(STATUS "PythonLibraries: ${PYTHON_LIBRARIES}")
+  #   if(NOT ${PYTHONLIBS_FOUND} STREQUAL TRUE)
+  #     message(FATAL_ERROR "Python has not been found.")
+  #   endif()
+
+  #   string(REPLACE "." ";" _PYTHONLIBS_VERSION ${PYTHONLIBS_VERSION_STRING})
+  #   list(GET _PYTHONLIBS_VERSION 0 PYTHONLIBS_VERSION_MAJOR)
+  #   list(GET _PYTHONLIBS_VERSION 1 PYTHONLIBS_VERSION_MINOR)
+
+  #   if(
+  #     NOT ${PYTHON_VERSION_MAJOR} EQUAL ${PYTHONLIBS_VERSION_MAJOR}
+  #     OR NOT ${PYTHON_VERSION_MINOR} EQUAL ${PYTHONLIBS_VERSION_MINOR}
+  #   )
+  #     message(
+  #       FATAL_ERROR
+  #       "Python interpreter and libraries are in different version: ${PYTHON_VERSION_STRING} vs ${PYTHONLIBS_VERSION_STRING}"
+  #     )
+  #   endif()
+  # endif()
+
+  # # Find PYTHON_LIBRARY_DIRS
+  # get_filename_component(PYTHON_LIBRARY_DIRS "${PYTHON_LIBRARIES}" PATH)
+  # message(STATUS "PythonLibraryDirs: ${PYTHON_LIBRARY_DIRS}")
+  # message(STATUS "PythonLibVersionString: ${PYTHONLIBS_VERSION_STRING}")
+
+  # if(NOT PYTHON_SITELIB)
+  #   # Use either site-packages (default) or dist-packages (Debian packages)
+  #   # directory
+  #   option(PYTHON_DEB_LAYOUT "Enable Debian-style Python package layout" OFF)
+  #   # ref. https://docs.python.org/3/library/site.html
+  #   option(PYTHON_STANDARD_LAYOUT "Enable standard Python package layout" ON)
+
+  #   if(PYTHON_STANDARD_LAYOUT)
+  #     set(
+  #       _PYTHON_SITELIB_CMD
+  #       "import sys, os; print(os.sep.join(['lib', 'python' + '.'.join(sys.version.split('.')[:2]), 'site-packages']))"
+  #     )
+  #   else()
+  #     if(PYTHON_VERSION_MAJOR EQUAL "2")
+  #       set(
+  #         _PYTHON_SITELIB_CMD
+  #         "from distutils import sysconfig; print(sysconfig.get_python_lib(prefix='', plat_specific=False))"
+  #       )
+  #     else()
+  #       set(
+  #         _PYTHON_SITELIB_CMD
+  #         "import sysconfig; from pathlib import Path; print(Path(sysconfig.get_path('purelib')).relative_to(sysconfig.get_path('data')))"
+  #       )
+  #     endif()
+  #   endif()
+
+  #   execute_process(
+  #     COMMAND "${PYTHON_EXECUTABLE}" "-c" "${_PYTHON_SITELIB_CMD}"
+  #     OUTPUT_VARIABLE PYTHON_SITELIB
+  #     OUTPUT_STRIP_TRAILING_WHITESPACE
+  #     ERROR_QUIET
+  #   )
+
+  #   # Keep compatility with former jrl-cmake-modules versions
+  #   if(PYTHON_DEB_LAYOUT)
+  #     string(
+  #       REPLACE
+  #       "site-packages"
+  #       "dist-packages"
+  #       PYTHON_SITELIB
+  #       "${PYTHON_SITELIB}"
+  #     )
+  #   endif()
+
+  #   # If PYTHON_PACKAGES_DIR is defined, then force the Python packages
+  #   # directory name
+  #   if(PYTHON_PACKAGES_DIR)
+  #     string(
+  #       REGEX REPLACE
+  #       "(site-packages|dist-packages)"
+  #       "${PYTHON_PACKAGES_DIR}"
+  #       PYTHON_SITELIB
+  #       "${PYTHON_SITELIB}"
+  #     )
+  #   endif()
+  # endif()
+
+  # # Avoid paths in Windows format
+  # if(PYTHON_SITELIB)
+  #   file(TO_CMAKE_PATH "${PYTHON_SITELIB}" PYTHON_SITELIB)
+  # endif()
+
+  # message(STATUS "Python site lib: ${PYTHON_SITELIB}")
+  # message(STATUS "Python include dirs: ${PYTHON_INCLUDE_DIRS}")
+
+  # # Get PYTHON_SOABI We should be in favor of using PYTHON_EXT_SUFFIX in future
+  # # for better portability. However we keep it here for backward compatibility.
+  # set(PYTHON_SOABI "")
+  # if(PYTHON_VERSION_MAJOR EQUAL 3 AND NOT WIN32)
+  #   execute_process(
+  #     COMMAND
+  #       "${PYTHON_EXECUTABLE}" "-c"
+  #       "from sysconfig import get_config_var; print('.' + get_config_var('SOABI'))"
+  #     OUTPUT_VARIABLE PYTHON_SOABI
+  #   )
+  #   string(STRIP ${PYTHON_SOABI} PYTHON_SOABI)
+  # endif()
+
+  # # Get PYTHON_EXT_SUFFIX
+  # set(PYTHON_EXT_SUFFIX "")
+  # if(PYTHON_VERSION_MAJOR EQUAL 3)
+  #   execute_process(
+  #     COMMAND
+  #       "${PYTHON_EXECUTABLE}" "-c"
+  #       "from sysconfig import get_config_var; print(get_config_var('EXT_SUFFIX'))"
+  #     OUTPUT_VARIABLE PYTHON_EXT_SUFFIX
+  #   )
+  #   string(STRIP ${PYTHON_EXT_SUFFIX} PYTHON_EXT_SUFFIX)
+  # endif()
+  # if("${PYTHON_EXT_SUFFIX}" STREQUAL "")
+  #   if(WIN32)
+  #     set(PYTHON_EXT_SUFFIX ".pyd")
+  #   else()
+  #     set(PYTHON_EXT_SUFFIX ".so")
+  #   endif()
+  # endif()
+
+  # if(PYTHON_EXPORT_DEPENDENCY)
+  #   INSTALL_JRL_CMAKEMODULES_FILE("python.cmake")
+  #   INSTALL_JRL_CMAKEMODULES_FILE("python-helpers.cmake")
+  #   string(
+  #     CONCAT
+  #     PYTHON_EXPORT_DEPENDENCY_MACROS
+  #     "list(APPEND PYTHON_COMPONENTS ${PYTHON_COMPONENTS})\n"
+  #     "list(REMOVE_DUPLICATES PYTHON_COMPONENTS)\n"
+  #     "if(NOT FINDPYTHON_ALREADY_CALLED)\n"
+  #     "FINDPYTHON()\n"
+  #     "endif()\n"
+  #   )
+  # endif()
+
+  # if(SEARCH_FOR_NUMPY)
+  #   FIND_NUMPY()
+  #   if(PYTHON_EXPORT_DEPENDENCY)
+  #     set(
+  #       PYTHON_EXPORT_DEPENDENCY_MACROS
+  #       "set(SEARCH_FOR_NUMPY TRUE)\n${PYTHON_EXPORT_DEPENDENCY_MACROS}"
+  #     )
+  #   endif()
+  # endif()
+
+  # if(SEARCH_FOR_NUMPY)
+  #   message(STATUS "NumPy include dir: ${NUMPY_INCLUDE_DIRS}")
+  #   list(APPEND NUMPY_INCLUDE_DIRS)
+  # endif()
+
+  # # Log Python variables
+  # list(
+  #   APPEND
+  #   LOGGING_WATCHED_VARIABLES
+  #   PYTHONINTERP_FOUND
+  #   PYTHONLIBS_FOUND
+  #   PYTHON_LIBRARY_DIRS
+  #   PYTHONLIBS_VERSION_STRING
+  #   PYTHON_EXECUTABLE
+  #   PYTHON_SOABI
+  #   PYTHON_EXT_SUFFIX
+  # )
 endmacro(FINDPYTHON)
 
 # .rst: .. command:: DYNAMIC_GRAPH_PYTHON_MODULE ( SUBMODULENAME LIBRARYNAME
@@ -602,26 +620,27 @@ endmacro()
 # Detect scipy module.
 #
 macro(FIND_SCIPY)
-  message(STATUS "Checking for SciPy")
-  execute_process(
-    COMMAND "${PYTHON_EXECUTABLE}" "-c" "import scipy; print (True)"
-    OUTPUT_VARIABLE IS_SCIPY
-    ERROR_QUIET
-  )
-
-  if(NOT IS_SCIPY)
-    message(FATAL_ERROR "Failed to detect scipy")
-  else()
-    # Retrive SCIPY_VERSION
-    execute_process(
-      COMMAND
-        "${PYTHON_EXECUTABLE}" "-c" "import scipy; print (scipy.__version__)"
-      OUTPUT_VARIABLE SCIPY_VERSION
-      ERROR_QUIET
-    )
-    string(REGEX REPLACE "\n$" "" SCIPY_VERSION "${SCIPY_VERSION}")
-    message(STATUS "  SCIPY_VERSION=${SCIPY_VERSION}")
-  endif()
+  # todo xiao
+  # message(STATUS "Checking for SciPy")
+  # execute_process(
+  #   COMMAND "${PYTHON_EXECUTABLE}" "-c" "import scipy; print (True)"
+  #   OUTPUT_VARIABLE IS_SCIPY
+  #   ERROR_QUIET
+  # )
+
+  # if(NOT IS_SCIPY)
+  #   message(FATAL_ERROR "Failed to detect scipy")
+  # else()
+  #   # Retrive SCIPY_VERSION
+  #   execute_process(
+  #     COMMAND
+  #       "${PYTHON_EXECUTABLE}" "-c" "import scipy; print (scipy.__version__)"
+  #     OUTPUT_VARIABLE SCIPY_VERSION
+  #     ERROR_QUIET
+  #   )
+  #   string(REGEX REPLACE "\n$" "" SCIPY_VERSION "${SCIPY_VERSION}")
+  #   message(STATUS "  SCIPY_VERSION=${SCIPY_VERSION}")
+  # endif()
 endmacro()
 
 include(${CMAKE_CURRENT_LIST_DIR}/python-helpers.cmake)
diff --git a/python/CMakeLists.txt b/python/CMakeLists.txt
index 221a5c2..a58eea2 100644
--- a/python/CMakeLists.txt
+++ b/python/CMakeLists.txt
@@ -34,8 +34,14 @@ if(IS_ABSOLUTE ${PYTHON_SITELIB})
 else()
   set(ABSOLUTE_PYTHON_SITELIB ${CMAKE_INSTALL_PREFIX}/${PYTHON_SITELIB})
 endif()
+
 set(${PYWRAP}_INSTALL_DIR ${ABSOLUTE_PYTHON_SITELIB}/${PROJECT_NAME})
 
+message(------------------------------1---CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX})
+message(------------------------------1---PYTHON_SITELIB = ${PYTHON_SITELIB})
+message(------------------------------1---PYWRAP = ${PYWRAP})
+message(------------------------------2---PYWRAP = ${ABSOLUTE_PYTHON_SITELIB}/${PROJECT_NAME})
+message(------------------------------1---PYTHON_EXT_SUFFIX = ${PYTHON_EXT_SUFFIX})
 set_target_properties(
   ${PYWRAP}
   PROPERTIES PREFIX ""
diff --git a/setup.py b/setup.py
index ffea7f0..ba719ce 100644
--- a/setup.py
+++ b/setup.py
@@ -6,7 +6,7 @@ from setuptools import setup, Extension
 from setuptools.command.build_ext import build_ext
 
 PROJECT_DIR = Path(__file__).parent
-VERSION = "3.4.0"
+VERSION = "3.10.3"
 
 class CMakeBuildExt(build_ext):
     """集成 CMake 编译流程"""
@@ -15,15 +15,21 @@ class CMakeBuildExt(build_ext):
     ]
 
     def initialize_options(self):
+        print("-------------------------------------initialize_options---1")
         super().initialize_options()
+        print("-------------------------------------initialize_options---2")
         self.build_type = "Release"
+        print("-------------------------------------initialize_options---3")
 
     def finalize_options(self):
         super().finalize_options()
 
     def run(self):
+        print("-------------------------------------run---1")
         self._check_dependencies()
+        print("-------------------------------------run---2")
         self._configure_and_build()
+        print("-------------------------------------run---3")
 
     def _check_dependencies(self):
         """检查编译依赖"""
@@ -49,25 +55,26 @@ class CMakeBuildExt(build_ext):
         # 创建构建目录
         os.makedirs(build_dir, exist_ok=True)
         os.makedirs(install_dir, exist_ok=True)
-    
+        print("-------------------------------------_configure_and_build---1")
         # CMake 配置参数
         cmake_args = [
             f"-DCMAKE_INSTALL_PREFIX={install_dir}",
             f"-DCMAKE_BUILD_TYPE={self.build_type}",
         ]
+        print("-------------------------------------_configure_and_build---2")
         # 生成构建系统
         subprocess.check_call(
             ["cmake", str(PROJECT_DIR)] + cmake_args,
             cwd=str(build_dir), env=os.environ.copy()
         )
-
+        print("-------------------------------------_configure_and_build---3")
         # 编译并安装
         build_args = ["--config", "Release", "-j2"]
         subprocess.check_call(
             ["cmake", "--build", ".", "--target", "install"] + build_args,
             cwd=build_dir,
         )
-        print("-------------------------------------setup---3")
+        print("-------------------------------------_configure_and_build---4")
 
 project_python_home_dir = os.path.join("python", "eigenpy")
 setup(
@@ -76,9 +83,12 @@ setup(
     description="Efficient Rigid Body Dynamics Library",
     author="Xiao",
     license="BSD-2-Clause",
-    packages=[],
+    packages=[
+        "eigenpy"
+        ],
     python_requires=">=3.9",
-    # install_requires=["numpy"],
+    install_requires=["numpy"],
+    ext_modules=[Extension("eigenpy_dummy", [])],  # 触发扩展构建
     cmdclass={"build_ext": CMakeBuildExt},
     zip_safe=False,
     package_dir={"eigenpy": project_python_home_dir},
