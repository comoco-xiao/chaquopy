diff --git a/engine/include/engine/vr_viewer.h b/engine/include/engine/vr_viewer.h
index 1343b057..c112deac 100644
--- a/engine/include/engine/vr_viewer.h
+++ b/engine/include/engine/vr_viewer.h
@@ -23,12 +23,13 @@ public:
   void render();
 
   void setOnTracking(const std::function<void(const std::vector<Pose>& left, const std::vector<Pose>& right)>& onTracking);
+#ifdef USE_OPENXR
   void setOnControllerStateUpdate(const std::function<void(const ControllerState &)> onControllerStateUpdate);
 
   void addFixedCameraPos(const std::string &name, const Vec3 &p);
   void removeFixedCameraPos(const std::string &name);
   void switchCameraPos(const std::string &name = "");
-
+#endif
   ~VRViewer();
 
 private:
diff --git a/engine/src/vr_viewer.cpp b/engine/src/vr_viewer.cpp
index ba38e7a3..4d6c8dd2 100644
--- a/engine/src/vr_viewer.cpp
+++ b/engine/src/vr_viewer.cpp
@@ -32,6 +32,7 @@ namespace sapien::engine {
     mRenderWindow->setOnTracking(onTracking);
   }
 
+#ifdef USE_OPENXR
   void VRViewer::setOnControllerStateUpdate(const std::function<void(const ControllerState &)> onControllerStateUpdate) {
     mRenderWindow->setOnControllerStateUpdate(onControllerStateUpdate);
   }
@@ -47,6 +48,7 @@ namespace sapien::engine {
   void VRViewer::switchCameraPos(const std::string &name) {
     mRenderWindow->switchCameraPos(name);
   }
+#endif
 
   VRViewer::~VRViewer() {
 
diff --git a/python/CMakeLists.txt b/python/CMakeLists.txt
index db48f0a0..8c32417a 100644
--- a/python/CMakeLists.txt
+++ b/python/CMakeLists.txt
@@ -10,6 +10,8 @@ else()
     set(CMAKE_CXX_FLAGS_RELEASE "-O3 -g0 -Wall  -std=c++20")
 endif()
 
+set(CMAKE_INSTALL_RPATH "@loader_path/libs")
+set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
 
 if (CMAKE_BUILD_TYPE STREQUAL "Debug")
     add_definitions(-D_DEBUG)
@@ -33,7 +35,7 @@ find_package(sapien REQUIRED)
 
 file(GLOB_RECURSE PYBIND_SRC "pybind/*.cpp")
 pybind11_add_module(pysapien ${PYBIND_SRC})
-target_link_libraries(pysapien PRIVATE sapien::sapien eigen)
+target_link_libraries(pysapien PRIVATE sapien::sapien eigen ${PYTHON_LIBRARIES})
 target_compile_definitions(pysapien PRIVATE PYBIND11_USE_SMART_HOLDER_AS_DEFAULT)
 
 if (MSVC)
diff --git a/python/py_package/__init__.py b/python/py_package/__init__.py
index ae4e06cd..4f535ffb 100644
--- a/python/py_package/__init__.py
+++ b/python/py_package/__init__.py
@@ -6,8 +6,8 @@ import platform
 from .version import __version__
 
 os.environ["SAPIEN_PACKAGE_PATH"] = os.path.dirname(__file__)
-from . import _dylibs_tricks
-from . import _oidn_tricks
+# from . import _dylibs_tricks
+# from . import _oidn_tricks
 
 from . import pysapien
 
@@ -25,7 +25,7 @@ else:
 from . import physx
 from . import render
 
-from . import _vulkan_tricks
+# from . import _vulkan_tricks
 
 from .wrapper.scene import Scene, SceneConfig, Widget
 from .wrapper.engine import Engine
diff --git a/python/py_package/_dylibs_tricks.py b/python/py_package/_dylibs_tricks.py
index b3825544..7efd6013 100644
--- a/python/py_package/_dylibs_tricks.py
+++ b/python/py_package/_dylibs_tricks.py
@@ -1,13 +1,13 @@
-import platform
-import os
-import sys
-import shutil
+# import platform
+# import os
+# import sys
+# import shutil
 
-if platform.system() == "Darwin":
-    target_dir = os.path.join(sys.prefix, "lib")
-    source_path = os.path.join(os.path.dirname(__file__), "libs")
-    assert os.path.exists(source_path)
+# if platform.system() == "Darwin":
+#     target_dir = os.path.join(sys.prefix, "lib")
+#     source_path = os.path.join(os.path.dirname(__file__), "libs")
+#     assert os.path.exists(source_path)
     
-    for item in os.listdir(source_path):
-        src_path = os.path.join(source_path, item)
-        shutil.copy2(src_path, target_dir)
\ No newline at end of file
+#     for item in os.listdir(source_path):
+#         src_path = os.path.join(source_path, item)
+#         shutil.copy2(src_path, target_dir)
\ No newline at end of file
diff --git a/python/requirements.txt b/python/requirements.txt
index 495d36ea..9a1f7450 100644
--- a/python/requirements.txt
+++ b/python/requirements.txt
@@ -1,7 +1,6 @@
-numpy>=1.17
-requests>=2.22
-transforms3d>=0.3
+numpy
+requests
+transforms3d
 lxml
 networkx
-pyperclip
-opencv-python>=4.0
+pyperclip
\ No newline at end of file
diff --git a/setup.py b/setup.py
index bd21283f..39b99d44 100644
--- a/setup.py
+++ b/setup.py
@@ -105,7 +105,8 @@ def generate_version():
     return version
 
 
-version = generate_version()
+# version = generate_version()
+version = "3.0.0"
 
 if args.get_version:
     print(version)
@@ -141,8 +142,9 @@ def build_sapien(sapien_source_dir, sapien_build_dir):
         "-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded",
     ]
     
-    if args.macOS:
-        cmake_args += ["-DCMAKE_TOOLCHAIN_FILE=toolchains/macos.toolchain.cmake"]
+    # if args.macOS:
+    #     cmake_args += ["-DCMAKE_TOOLCHAIN_FILE=toolchains/macos.toolchain.cmake"]
+    cmake_args += ["-DCMAKE_TOOLCHAIN_FILE=toolchains/android.toolchain.cmake"]
 
     if sys.platform == "win32":
         cmake_args += [f"-DBUILD_TESTING=Off"]
@@ -285,18 +287,19 @@ class CMakeBuild(build_ext):
 
         # provide oidn for linux
         if platform.system() == "Linux":
-            for folder in ["lib", "lib64"]:
-                library_dir = os.path.join(sapien_install_dir, folder)
-                if not os.path.exists(library_dir):
-                    continue
-                print("copy library from", library_dir)
-                for lib in os.listdir(library_dir):
-                    if lib in [
-                        "libOpenImageDenoise.so.2.0.1",
-                        "libOpenImageDenoise_core.so.2.0.1",
-                        "libOpenImageDenoise_device_cuda.so.2.0.1",
-                    ]:
-                        shutil.copy(os.path.join(library_dir, lib), oidn_library_path)
+            print("---provide oidn for linux")
+            # for folder in ["lib", "lib64"]:
+            #     library_dir = os.path.join(sapien_install_dir, folder)
+            #     if not os.path.exists(library_dir):
+            #         continue
+            #     print("copy library from", library_dir)
+            #     for lib in os.listdir(library_dir):
+            #         if lib in [
+            #             "libOpenImageDenoise.so.2.0.1",
+            #             "libOpenImageDenoise_core.so.2.0.1",
+            #             "libOpenImageDenoise_device_cuda.so.2.0.1",
+            #         ]:
+            #             shutil.copy(os.path.join(library_dir, lib), oidn_library_path)
 
     def copy_assets(self, ext):
         vulkan_shader_path = os.path.join(self.build_lib, "sapien", "vulkan_shader")
@@ -313,10 +316,18 @@ class CMakeBuild(build_ext):
             dy_source_paths = [
                 os.path.join(sapien_install_dir, "lib/libsapien.dylib"),
                 os.path.join(sapien_install_dir, "lib/libsvulkan2.dylib"),
-                os.path.join(ext.sourcedir, "apple/macOS/physx5/bin/mac.x86_64/release/libPhysX_64.dylib"),
-                os.path.join(ext.sourcedir, "apple/macOS/physx5/bin/mac.x86_64/release/libPhysXCommon_64.dylib"),
-                os.path.join(ext.sourcedir, "apple/macOS/physx5/bin/mac.x86_64/release/libPhysXCooking_64.dylib"),
-                os.path.join(ext.sourcedir, "apple/macOS/physx5/bin/mac.x86_64/release/libPhysXFoundation_64.dylib"),
+            ]
+            if os.path.exists(dy_libs_path):
+                shutil.rmtree(dy_libs_path)
+            os.makedirs(dy_libs_path)
+            for lib in dy_source_paths:
+                shutil.copy(lib, dy_libs_path)
+        if platform.system() == "Linux":
+            sapien_install_dir = os.path.join(self.sapien_build_dir, "_sapien_install")
+            dy_libs_path = os.path.join(self.build_lib, "sapien", "libs")
+            dy_source_paths = [
+                os.path.join(sapien_install_dir, "lib/libsapien.so"),
+                os.path.join(sapien_install_dir, "lib/libsvulkan2.so"),
             ]
             if os.path.exists(dy_libs_path):
                 shutil.rmtree(dy_libs_path)
@@ -325,15 +336,16 @@ class CMakeBuild(build_ext):
                 shutil.copy(lib, dy_libs_path)
 
         # provide Vulkan libraries for linux
-        if platform.system() == "Linux" or platform.system() == "Darwin":
-            vulkan_library_path = os.path.join(
-                self.build_lib, "sapien", "vulkan_library"
-            )
-            source_path = os.path.join(ext.sourcedir, "vulkan_library")
-            if os.path.exists(vulkan_library_path):
-                shutil.rmtree(vulkan_library_path)
-            assert os.path.exists(source_path)
-            shutil.copytree(source_path, vulkan_library_path)
+        # if platform.system() == "Linux" or platform.system() == "Darwin":
+        #     print("---provide Vulkan libraries for linux")
+        #     vulkan_library_path = os.path.join(
+        #         self.build_lib, "sapien", "vulkan_library"
+        #     )
+        #     source_path = os.path.join(ext.sourcedir, "vulkan_library")
+        #     if os.path.exists(vulkan_library_path):
+        #         shutil.rmtree(vulkan_library_path)
+        #     assert os.path.exists(source_path)
+        #     shutil.copytree(source_path, vulkan_library_path)
 
         sensor_assets_path = os.path.join(self.build_lib, "sapien", "sensor", "assets")
         source_patterns_path = os.path.join(
@@ -350,7 +362,8 @@ class CMakeBuild(build_ext):
 
     def build_extension(self, ext):
         if platform.system() == "Linux":
-            self.build_pinocchio(ext)
+            print("---build linux build extension")
+            # self.build_pinocchio(ext)
         self.build_pybind(ext)
         self.copy_assets(ext)
 
diff --git a/toolchains/android.toolchain.cmake b/toolchains/android.toolchain.cmake
index 0e1d57bc..bf42ef32 100644
--- a/toolchains/android.toolchain.cmake
+++ b/toolchains/android.toolchain.cmake
@@ -24,5 +24,4 @@ set(CMAKE_Fortran_COMPILER "" CACHE INTERNAL "Set Fortran compiler")
 
 set(USE_IMGUI OFF CACHE INTERNAL "Use imgui")
 set(USE_GLFW OFF CACHE INTERNAL "Use glfw")
-set(VK_USE_PLATFORM_ANDROID_KHR ON CACHE INTERNAL "Vulkan setting - Use platform Android")
-set(USE_CPP_WRAPPER ON CACHE INTERNAL "Use cpp wrapper")
\ No newline at end of file
+set(VK_USE_PLATFORM_ANDROID_KHR ON CACHE INTERNAL "Vulkan setting - Use platform Android")
\ No newline at end of file
