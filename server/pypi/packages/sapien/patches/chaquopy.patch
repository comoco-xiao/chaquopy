diff --git a/CMakeLists.txt b/CMakeLists.txt
index dcd94d91..a267e655 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -137,7 +137,7 @@ if (${USE_OPENXR})
     target_link_libraries(sapien PRIVATE OpenXR::headers OpenXR::openxr_loader magic_enum pinocchio yaml-cpp nlopt pytorch nlohmann_json)
 endif()
 
-target_link_libraries(sapien PUBLIC eigen svulkan2)
+target_link_libraries(sapien PUBLIC eigen svulkan2 android log)
 if (${USE_CPP_WRAPPER})
     target_link_libraries(sapien PUBLIC tinyxml2)
 endif()
diff --git a/engine/include/engine/vr_viewer.h b/engine/include/engine/vr_viewer.h
index 1343b057..c112deac 100644
--- a/engine/include/engine/vr_viewer.h
+++ b/engine/include/engine/vr_viewer.h
@@ -23,12 +23,13 @@ public:
   void render();
 
   void setOnTracking(const std::function<void(const std::vector<Pose>& left, const std::vector<Pose>& right)>& onTracking);
+#ifdef USE_OPENXR
   void setOnControllerStateUpdate(const std::function<void(const ControllerState &)> onControllerStateUpdate);
 
   void addFixedCameraPos(const std::string &name, const Vec3 &p);
   void removeFixedCameraPos(const std::string &name);
   void switchCameraPos(const std::string &name = "");
-
+#endif
   ~VRViewer();
 
 private:
diff --git a/engine/src/vr_viewer.cpp b/engine/src/vr_viewer.cpp
index ba38e7a3..4d6c8dd2 100644
--- a/engine/src/vr_viewer.cpp
+++ b/engine/src/vr_viewer.cpp
@@ -32,6 +32,7 @@ namespace sapien::engine {
     mRenderWindow->setOnTracking(onTracking);
   }
 
+#ifdef USE_OPENXR
   void VRViewer::setOnControllerStateUpdate(const std::function<void(const ControllerState &)> onControllerStateUpdate) {
     mRenderWindow->setOnControllerStateUpdate(onControllerStateUpdate);
   }
@@ -47,6 +48,7 @@ namespace sapien::engine {
   void VRViewer::switchCameraPos(const std::string &name) {
     mRenderWindow->switchCameraPos(name);
   }
+#endif
 
   VRViewer::~VRViewer() {
 
diff --git a/include/sapien/sapien_renderer/sapien_renderer_system.h b/include/sapien/sapien_renderer/sapien_renderer_system.h
index e1e14d43..a11e9b4a 100644
--- a/include/sapien/sapien_renderer/sapien_renderer_system.h
+++ b/include/sapien/sapien_renderer/sapien_renderer_system.h
@@ -26,6 +26,14 @@ class PointCloudComponent;
 class CudaDeformableMeshComponent;
 class SapienRenderCubemap;
 
+
+struct NativeData {
+  void *layer;
+#ifdef USE_OPENXR
+  std::shared_ptr<PlatformData> platformData;
+#endif
+};
+
 class SapienRenderEngine {
 public:
   static std::shared_ptr<SapienRenderEngine> Get(std::shared_ptr<Device> device = nullptr, const void *layer = nullptr
@@ -115,6 +123,10 @@ public:
 
   uint64_t nextRenderId() { return mNextRenderId++; };
 
+  static void setNativeData(void *layer = nullptr, 
+                            void *application_vm = nullptr,
+                            void *application_activity = nullptr
+  );
 private:
   uint64_t mNextRenderId{1};
 
@@ -128,6 +140,8 @@ private:
   std::set<std::shared_ptr<CudaDeformableMeshComponent>, comp_cmp> mCudaDeformableMeshComponents;
 
   std::shared_ptr<SapienRenderCubemap> mCubemap;
+
+  static std::shared_ptr<NativeData> gNativeData;
 };
 
 } // namespace sapien_renderer
diff --git a/python/CMakeLists.txt b/python/CMakeLists.txt
index db48f0a0..046dfc5c 100644
--- a/python/CMakeLists.txt
+++ b/python/CMakeLists.txt
@@ -10,6 +10,8 @@ else()
     set(CMAKE_CXX_FLAGS_RELEASE "-O3 -g0 -Wall  -std=c++20")
 endif()
 
+set(CMAKE_INSTALL_RPATH "@loader_path/libs")
+set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
 
 if (CMAKE_BUILD_TYPE STREQUAL "Debug")
     add_definitions(-D_DEBUG)
@@ -33,7 +35,7 @@ find_package(sapien REQUIRED)
 
 file(GLOB_RECURSE PYBIND_SRC "pybind/*.cpp")
 pybind11_add_module(pysapien ${PYBIND_SRC})
-target_link_libraries(pysapien PRIVATE sapien::sapien eigen)
+target_link_libraries(pysapien PRIVATE sapien::sapien eigen ${PYTHON_LIBRARIES} android log)
 target_compile_definitions(pysapien PRIVATE PYBIND11_USE_SMART_HOLDER_AS_DEFAULT)
 
 if (MSVC)
diff --git a/python/py_package/__init__.py b/python/py_package/__init__.py
index ae4e06cd..411aaf60 100644
--- a/python/py_package/__init__.py
+++ b/python/py_package/__init__.py
@@ -6,8 +6,8 @@ import platform
 from .version import __version__
 
 os.environ["SAPIEN_PACKAGE_PATH"] = os.path.dirname(__file__)
-from . import _dylibs_tricks
-from . import _oidn_tricks
+# from . import _dylibs_tricks
+# from . import _oidn_tricks
 
 from . import pysapien
 
@@ -15,17 +15,13 @@ from .pysapien import Entity, Component, System, CudaArray, Pose, Device
 from .pysapien import profile
 from .pysapien import set_log_level
 # zhangxiao
-import sys
-if sys.platform == 'darwin':
-    from .pysapien import math
-else:
-    from .pysapien import math, simsense
+from .pysapien import math
 
 
 from . import physx
 from . import render
 
-from . import _vulkan_tricks
+# from . import _vulkan_tricks
 
 from .wrapper.scene import Scene, SceneConfig, Widget
 from .wrapper.engine import Engine
diff --git a/python/py_package/__init__.pyi b/python/py_package/__init__.pyi
index e9c42f50..e0d3bb3a 100644
--- a/python/py_package/__init__.pyi
+++ b/python/py_package/__init__.pyi
@@ -15,11 +15,11 @@ from sapien.pysapien.physx import PhysxSceneConfig as SceneConfig
 from sapien.pysapien import profile
 from sapien.pysapien import set_log_level
 # zhangxiao
-import sys
-if sys.platform != 'darwin':
-    from sapien.pysapien import simsense
+# import sys
+# if sys.platform != 'darwin':
+#     from sapien.pysapien import simsense
 
-from sapien.pysapien_pinocchio import PinocchioModel
+# from sapien.pysapien_pinocchio import PinocchioModel
 from sapien.wrapper.actor_builder import ActorBuilder
 from sapien.wrapper.articulation_builder import ArticulationBuilder
 from sapien.wrapper.engine import Engine
diff --git a/python/py_package/_dylibs_tricks.py b/python/py_package/_dylibs_tricks.py
index b3825544..7efd6013 100644
--- a/python/py_package/_dylibs_tricks.py
+++ b/python/py_package/_dylibs_tricks.py
@@ -1,13 +1,13 @@
-import platform
-import os
-import sys
-import shutil
+# import platform
+# import os
+# import sys
+# import shutil
 
-if platform.system() == "Darwin":
-    target_dir = os.path.join(sys.prefix, "lib")
-    source_path = os.path.join(os.path.dirname(__file__), "libs")
-    assert os.path.exists(source_path)
+# if platform.system() == "Darwin":
+#     target_dir = os.path.join(sys.prefix, "lib")
+#     source_path = os.path.join(os.path.dirname(__file__), "libs")
+#     assert os.path.exists(source_path)
     
-    for item in os.listdir(source_path):
-        src_path = os.path.join(source_path, item)
-        shutil.copy2(src_path, target_dir)
\ No newline at end of file
+#     for item in os.listdir(source_path):
+#         src_path = os.path.join(source_path, item)
+#         shutil.copy2(src_path, target_dir)
\ No newline at end of file
diff --git a/python/py_package/pysapien/__init__.pyi b/python/py_package/pysapien/__init__.pyi
index b62afc39..d9fb27ee 100644
--- a/python/py_package/pysapien/__init__.pyi
+++ b/python/py_package/pysapien/__init__.pyi
@@ -8,12 +8,7 @@ from . import math
 from . import physx
 from . import render
 # zhangxiao
-import sys
-if sys.platform == 'darwin':
-    __all__ = ['Component', 'CudaArray', 'Device', 'Entity', 'Pose', 'Profiler', 'Scene', 'System', 'abi_version', 'compiled_with_cxx11_abi', 'internal_renderer', 'math', 'physx', 'profile', 'pybind11_internals_id', 'pybind11_use_smart_holder', 'render', 'set_log_level']
-else:
-    from . import simsense
-    __all__ = ['Component', 'CudaArray', 'Device', 'Entity', 'Pose', 'Profiler', 'Scene', 'System', 'abi_version', 'compiled_with_cxx11_abi', 'internal_renderer', 'math', 'physx', 'profile', 'pybind11_internals_id', 'pybind11_use_smart_holder', 'render', 'set_log_level', 'simsense']
+__all__ = ['Component', 'CudaArray', 'Device', 'Entity', 'Pose', 'Profiler', 'Scene', 'System', 'abi_version', 'compiled_with_cxx11_abi', 'internal_renderer', 'math', 'physx', 'profile', 'pybind11_internals_id', 'pybind11_use_smart_holder', 'render', 'set_log_level']
 
 _T = typing.TypeVar("_T", Component)
 class Component:
diff --git a/python/py_package/utils/viewer/viewer.py b/python/py_package/utils/viewer/viewer.py
index 4089ce6b..86885c50 100644
--- a/python/py_package/utils/viewer/viewer.py
+++ b/python/py_package/utils/viewer/viewer.py
@@ -32,18 +32,19 @@ class Viewer:
         self,
         renderer: SapienRenderer = None,
         shader_dir="",
-        resolutions=(1920, 1080),
+        # resolutions=(1920, 1080),
+        resolutions=(1080, 2039),
         plugins=[
-            PathWindow(),
-            ContactWindow(),
-            SettingWindow(),
-            TransformWindow(),
-            RenderOptionsWindow(),
-            ControlWindow(),
-            SceneWindow(),
-            EntityWindow(),
-            ArticulationWindow(),
-            # KeyframeWindow(),
+            # PathWindow(),
+            # ContactWindow(),
+            # SettingWindow(),
+            # TransformWindow(),
+            # RenderOptionsWindow(),
+            # ControlWindow(),
+            # SceneWindow(),
+            # EntityWindow(),
+            # ArticulationWindow(),
+            # # KeyframeWindow(),
         ],
     ):
         filename = sapien.render.get_imgui_ini_filename()
@@ -56,23 +57,23 @@ class Viewer:
             with open(filename, "w") as f:
                 f.write(imgui_ini)
 
-        if renderer is None:
-            renderer = SapienRenderer()
+        # if renderer is None:
+        #     renderer = SapienRenderer()
 
-        self.renderer_context = renderer._internal_context
+        # self.renderer_context = renderer._internal_context
 
-        if not shader_dir:
-            self.shader_dir = get_viewer_shader_dir()
-        else:
-            self.shader_dir = shader_dir
+        # if not shader_dir:
+        #     self.shader_dir = get_viewer_shader_dir()
+        # else:
+        #     self.shader_dir = shader_dir
 
-        resolution = np.array(resolutions).flatten()[:2]
+        # resolution = np.array(resolutions).flatten()[:2]
 
         self.scenes = []
 
-        self.window = RenderWindow(*resolution, self.shader_dir)
-        self.window.set_focus_callback(self.focus_change)
-        self.window.set_drop_callback(self.drop)
+        # self.window = RenderWindow(*resolution, self.shader_dir)
+        # self.window.set_focus_callback(self.focus_change)
+        # self.window.set_drop_callback(self.drop)
 
         self.paused = False
         self.render_target = "Color"
diff --git a/python/py_package/wrapper/engine.py b/python/py_package/wrapper/engine.py
index 78c6a404..d458673f 100644
--- a/python/py_package/wrapper/engine.py
+++ b/python/py_package/wrapper/engine.py
@@ -1,9 +1,5 @@
 # zhangxiao
-import sys
-if sys.platform == 'darwin':
-    from ..pysapien.physx import PhysxSystem, PhysxCpuSystem, PhysxMaterial
-else:
-    from ..pysapien.physx import PhysxSystem, PhysxGpuSystem, PhysxCpuSystem, PhysxMaterial
+from ..pysapien.physx import PhysxSystem, PhysxCpuSystem, PhysxMaterial
 
 from .. import pysapien as sapien
 from ..pysapien.render import RenderSystem
diff --git a/python/py_package/wrapper/pinocchio_model.py b/python/py_package/wrapper/pinocchio_model.py
index 9d7bc32c..f4c87f25 100644
--- a/python/py_package/wrapper/pinocchio_model.py
+++ b/python/py_package/wrapper/pinocchio_model.py
@@ -277,25 +277,33 @@ try:
             return self.q_p2s(best_q), success, best_error
 
 except ModuleNotFoundError:
-    if platform.system() == "Linux":
-        from ..pysapien_pinocchio import PinocchioModel
-    else:
-        warnings.warn(
-            "pinnochio package is not installed, robotics functionalities will not be available"
-        )
-        PinocchioModel = None
+    # if platform.system() == "Linux":
+    #     from ..pysapien_pinocchio import PinocchioModel
+    # else:
+    #     warnings.warn(
+    #         "pinnochio package is not installed, robotics functionalities will not be available"
+    #     )
+    #     PinocchioModel = None
+    warnings.warn(
+        "pinnochio package is not installed, robotics functionalities will not be available"
+    )
+    PinocchioModel = None
 
 except ImportError:
-    if platform.system() == "Linux":
-        warnings.warn(
-            "pinnochio package is broken, fallback to built-in pinocchio. This may be fixed by installing pinocchio via conda instead of pip"
-        )
-        from ..pysapien_pinocchio import PinocchioModel
-    else:
-        warnings.warn(
-            "pinnochio package is broken, robotics functionalities will not be available"
-        )
-        PinocchioModel = None
+    # if platform.system() == "Linux":
+    #     warnings.warn(
+    #         "pinnochio package is broken, fallback to built-in pinocchio. This may be fixed by installing pinocchio via conda instead of pip"
+    #     )
+    #     from ..pysapien_pinocchio import PinocchioModel
+    # else:
+    #     warnings.warn(
+    #         "pinnochio package is broken, robotics functionalities will not be available"
+    #     )
+    #     PinocchioModel = None
+    warnings.warn(
+        "pinnochio package is broken, robotics functionalities will not be available"
+    )
+    PinocchioModel = None
 
 
 def _create_pinocchio_model(
diff --git a/python/pybind/sapien.cpp b/python/pybind/sapien.cpp
index c03af1a1..ccbfe436 100644
--- a/python/pybind/sapien.cpp
+++ b/python/pybind/sapien.cpp
@@ -18,6 +18,20 @@
 #include <pybind11/smart_holder.h>
 #include <pybind11/stl.h>
 
+// #ifdef __ANDROID__
+// #include <jni.h>
+// #include <string>
+// #include <android/native_window_jni.h>
+// #include <android/log.h>
+// #define LOG_TAG "SAPIEN"
+// #define LOGV(...) __android_log_print(ANDROID_LOG_VERBOSE, LOG_TAG, __VA_ARGS__)
+// #define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)
+// #define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)
+// #define LOGW(...) __android_log_print(ANDROID_LOG_WARN, LOG_TAG, __VA_ARGS__)
+// #define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)
+// #define LOGF(...) __android_log_print(ANDROID_LOG_FATAL, LOG_TAG, __VA_ARGS__)
+// #endif
+
 namespace py = pybind11;
 using namespace pybind11::literals;
 using namespace sapien;
@@ -347,3 +361,24 @@ Generator<int> init_sapien(py::module &m) {
   });
   m.def("pybind11_internals_id", []() { return PYBIND11_INTERNALS_ID; });
 }
+
+// #ifdef __ANDROID__
+// extern "C" JNIEXPORT void JNICALL
+// Java_org_beeware_android_MainActivity_sapienInit(
+//         JNIEnv* env,
+//         jobject,
+//         jobject surface,
+//         jint width,
+//         jint height,
+//         jstring assetsResRootPath) {
+//     LOGI("-----+++++-----Java_org_beeware_android_MainActivity_sapienInit---\n");
+//     std::string rootDir(env->GetStringUTFChars(assetsResRootPath, nullptr));
+//     LOGI("-----+++++-----init---width = %d, height = %d, path = %s\n", width, height, rootDir.c_str());
+//     ANativeWindow *nativeWindow = ANativeWindow_fromSurface(env, surface);
+//     if (!nativeWindow) {
+//       LOGI("-----+++++-----nativeWindow == nullptr ---\n");
+//     } else {
+//       LOGI("-----+++++-----nativeWindow != nullptr ---\n");
+//     }
+// }
+// #endif
\ No newline at end of file
diff --git a/python/pybind/sapien_renderer.cpp b/python/pybind/sapien_renderer.cpp
index 3aa2a05a..9ffa502a 100644
--- a/python/pybind/sapien_renderer.cpp
+++ b/python/pybind/sapien_renderer.cpp
@@ -617,6 +617,12 @@ This function waits for any pending CUDA operations on cuda stream provided by :
 
       // .def("disable_auto_upload", &SapienRendererSystem::disableAutoUpload)
 
+      .def_static("set_native_data", [](uintptr_t winAddress, uintptr_t vm, uintptr_t activity) {
+        SapienRendererSystem::setNativeData(reinterpret_cast<void*>(winAddress),
+                                            reinterpret_cast<void*>(vm),
+                                            reinterpret_cast<void*>(activity));
+      }, py::arg("layer"), py::arg("application_vm"), py::arg("application_activity"))
+
       .def_property_readonly("cuda_object_transforms",
                              &SapienRendererSystem::getTransformCudaArray)
 
diff --git a/python/requirements.txt b/python/requirements.txt
index 495d36ea..9a1f7450 100644
--- a/python/requirements.txt
+++ b/python/requirements.txt
@@ -1,7 +1,6 @@
-numpy>=1.17
-requests>=2.22
-transforms3d>=0.3
+numpy
+requests
+transforms3d
 lxml
 networkx
-pyperclip
-opencv-python>=4.0
+pyperclip
\ No newline at end of file
diff --git a/setup.py b/setup.py
index bd21283f..39b99d44 100644
--- a/setup.py
+++ b/setup.py
@@ -105,7 +105,8 @@ def generate_version():
     return version
 
 
-version = generate_version()
+# version = generate_version()
+version = "3.0.0"
 
 if args.get_version:
     print(version)
@@ -141,8 +142,9 @@ def build_sapien(sapien_source_dir, sapien_build_dir):
         "-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded",
     ]
     
-    if args.macOS:
-        cmake_args += ["-DCMAKE_TOOLCHAIN_FILE=toolchains/macos.toolchain.cmake"]
+    # if args.macOS:
+    #     cmake_args += ["-DCMAKE_TOOLCHAIN_FILE=toolchains/macos.toolchain.cmake"]
+    cmake_args += ["-DCMAKE_TOOLCHAIN_FILE=toolchains/android.toolchain.cmake"]
 
     if sys.platform == "win32":
         cmake_args += [f"-DBUILD_TESTING=Off"]
@@ -285,18 +287,19 @@ class CMakeBuild(build_ext):
 
         # provide oidn for linux
         if platform.system() == "Linux":
-            for folder in ["lib", "lib64"]:
-                library_dir = os.path.join(sapien_install_dir, folder)
-                if not os.path.exists(library_dir):
-                    continue
-                print("copy library from", library_dir)
-                for lib in os.listdir(library_dir):
-                    if lib in [
-                        "libOpenImageDenoise.so.2.0.1",
-                        "libOpenImageDenoise_core.so.2.0.1",
-                        "libOpenImageDenoise_device_cuda.so.2.0.1",
-                    ]:
-                        shutil.copy(os.path.join(library_dir, lib), oidn_library_path)
+            print("---provide oidn for linux")
+            # for folder in ["lib", "lib64"]:
+            #     library_dir = os.path.join(sapien_install_dir, folder)
+            #     if not os.path.exists(library_dir):
+            #         continue
+            #     print("copy library from", library_dir)
+            #     for lib in os.listdir(library_dir):
+            #         if lib in [
+            #             "libOpenImageDenoise.so.2.0.1",
+            #             "libOpenImageDenoise_core.so.2.0.1",
+            #             "libOpenImageDenoise_device_cuda.so.2.0.1",
+            #         ]:
+            #             shutil.copy(os.path.join(library_dir, lib), oidn_library_path)
 
     def copy_assets(self, ext):
         vulkan_shader_path = os.path.join(self.build_lib, "sapien", "vulkan_shader")
@@ -313,10 +316,18 @@ class CMakeBuild(build_ext):
             dy_source_paths = [
                 os.path.join(sapien_install_dir, "lib/libsapien.dylib"),
                 os.path.join(sapien_install_dir, "lib/libsvulkan2.dylib"),
-                os.path.join(ext.sourcedir, "apple/macOS/physx5/bin/mac.x86_64/release/libPhysX_64.dylib"),
-                os.path.join(ext.sourcedir, "apple/macOS/physx5/bin/mac.x86_64/release/libPhysXCommon_64.dylib"),
-                os.path.join(ext.sourcedir, "apple/macOS/physx5/bin/mac.x86_64/release/libPhysXCooking_64.dylib"),
-                os.path.join(ext.sourcedir, "apple/macOS/physx5/bin/mac.x86_64/release/libPhysXFoundation_64.dylib"),
+            ]
+            if os.path.exists(dy_libs_path):
+                shutil.rmtree(dy_libs_path)
+            os.makedirs(dy_libs_path)
+            for lib in dy_source_paths:
+                shutil.copy(lib, dy_libs_path)
+        if platform.system() == "Linux":
+            sapien_install_dir = os.path.join(self.sapien_build_dir, "_sapien_install")
+            dy_libs_path = os.path.join(self.build_lib, "sapien", "libs")
+            dy_source_paths = [
+                os.path.join(sapien_install_dir, "lib/libsapien.so"),
+                os.path.join(sapien_install_dir, "lib/libsvulkan2.so"),
             ]
             if os.path.exists(dy_libs_path):
                 shutil.rmtree(dy_libs_path)
@@ -325,15 +336,16 @@ class CMakeBuild(build_ext):
                 shutil.copy(lib, dy_libs_path)
 
         # provide Vulkan libraries for linux
-        if platform.system() == "Linux" or platform.system() == "Darwin":
-            vulkan_library_path = os.path.join(
-                self.build_lib, "sapien", "vulkan_library"
-            )
-            source_path = os.path.join(ext.sourcedir, "vulkan_library")
-            if os.path.exists(vulkan_library_path):
-                shutil.rmtree(vulkan_library_path)
-            assert os.path.exists(source_path)
-            shutil.copytree(source_path, vulkan_library_path)
+        # if platform.system() == "Linux" or platform.system() == "Darwin":
+        #     print("---provide Vulkan libraries for linux")
+        #     vulkan_library_path = os.path.join(
+        #         self.build_lib, "sapien", "vulkan_library"
+        #     )
+        #     source_path = os.path.join(ext.sourcedir, "vulkan_library")
+        #     if os.path.exists(vulkan_library_path):
+        #         shutil.rmtree(vulkan_library_path)
+        #     assert os.path.exists(source_path)
+        #     shutil.copytree(source_path, vulkan_library_path)
 
         sensor_assets_path = os.path.join(self.build_lib, "sapien", "sensor", "assets")
         source_patterns_path = os.path.join(
@@ -350,7 +362,8 @@ class CMakeBuild(build_ext):
 
     def build_extension(self, ext):
         if platform.system() == "Linux":
-            self.build_pinocchio(ext)
+            print("---build linux build extension")
+            # self.build_pinocchio(ext)
         self.build_pybind(ext)
         self.copy_assets(ext)
 
diff --git a/src/sapien_renderer/sapien_renderer_system.cpp b/src/sapien_renderer/sapien_renderer_system.cpp
index 7c190c40..453b5b0f 100644
--- a/src/sapien_renderer/sapien_renderer_system.cpp
+++ b/src/sapien_renderer/sapien_renderer_system.cpp
@@ -11,6 +11,7 @@
 #include <svulkan2/renderer/renderer.h>
 #include <svulkan2/renderer/rt_renderer.h>
 #include <svulkan2/scene/scene.h>
+#include <logger.h>
 
 // zhangxiao
 #ifdef SAPIEN_CUDA
@@ -18,9 +19,16 @@
 #include <cuda_runtime.h>
 #endif
 
+#ifdef __ANDROID__
+#include <jni.h>
+#include <android/native_window_jni.h>
+#endif
+
 namespace sapien {
 namespace sapien_renderer {
 
+std::shared_ptr<NativeData> SapienRendererSystem::gNativeData = nullptr;
+
 std::shared_ptr<SapienRenderEngine> SapienRenderEngine::Get(std::shared_ptr<Device> device, const void *layer
 #ifdef USE_OPENXR
                                                             ,const std::shared_ptr<PlatformData> &platformData
@@ -117,6 +125,9 @@ SapienRendererSystem::SapienRendererSystem(std::shared_ptr<Device> device, const
                                           ,const std::shared_ptr<PlatformData> &data
 #endif
 ) {
+  if (gNativeData && gNativeData->layer) {
+    layer = gNativeData->layer;
+  }
   mEngine = SapienRenderEngine::Get(device, layer
 #ifdef USE_OPENXR
                                     ,data
@@ -220,6 +231,24 @@ CudaArrayHandle SapienRendererSystem::getTransformCudaArray() {
 #endif
 }
 
+void SapienRendererSystem::setNativeData(void *layer,
+                                         void *application_vm,
+                                         void *application_activity) {
+#ifdef __ANDROID__
+    LOGD("-----SapienRendererSystem::setNativeData---layer = {%ld}, application_vm = {%ld}, application_activity = {%ld}", reinterpret_cast<long>(layer), reinterpret_cast<long>(application_vm), reinterpret_cast<long>(application_activity));
+    ANativeWindow* nativeWindow = reinterpret_cast<ANativeWindow*>(layer);
+    if (nativeWindow) {
+      LOGD("-----SapienRendererSystem::setNativeData---width = {%d}, height = {%d}", ANativeWindow_getWidth(nativeWindow), ANativeWindow_getHeight(nativeWindow));
+    }
+#endif
+    gNativeData = std::make_shared<NativeData>();
+    gNativeData->layer = layer;
+#ifdef USE_OPENXR
+    gNativeData->application_vm = application_vm;
+    gNativeData->application_activity = application_activity;
+#endif
+  }
+
 SapienRendererSystem::~SapienRendererSystem() {}
 
 } // namespace sapien_renderer
diff --git a/toolchains/android.toolchain.cmake b/toolchains/android.toolchain.cmake
index 0e1d57bc..62976a77 100644
--- a/toolchains/android.toolchain.cmake
+++ b/toolchains/android.toolchain.cmake
@@ -22,7 +22,9 @@ set(CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION clang)
 
 set(CMAKE_Fortran_COMPILER "" CACHE INTERNAL "Set Fortran compiler")
 
+set(CMAKE_C_COMPILER_LAUNCHER ccache CACHE INTERNAL "C cache")
+set(CMAKE_CXX_COMPILER_LAUNCHER ccache CACHE INTERNAL "C++ cache")
+
 set(USE_IMGUI OFF CACHE INTERNAL "Use imgui")
 set(USE_GLFW OFF CACHE INTERNAL "Use glfw")
-set(VK_USE_PLATFORM_ANDROID_KHR ON CACHE INTERNAL "Vulkan setting - Use platform Android")
-set(USE_CPP_WRAPPER ON CACHE INTERNAL "Use cpp wrapper")
\ No newline at end of file
+set(VK_USE_PLATFORM_ANDROID_KHR ON CACHE INTERNAL "Vulkan setting - Use platform Android")
\ No newline at end of file
