diff --git a/3rd_party/sapien-vulkan-2/src/core/instance.cpp b/3rd_party/sapien-vulkan-2/src/core/instance.cpp
index b4afa3de..2a36927d 100644
--- a/3rd_party/sapien-vulkan-2/src/core/instance.cpp
+++ b/3rd_party/sapien-vulkan-2/src/core/instance.cpp
@@ -77,7 +77,7 @@ namespace svulkan2::core {
 #endif
   )
           : mApiVersion(apiVersion), mLayer(layer) {
-
+    LOGI("-------------------------Instance::Instance---mLayer == null (%d)", mLayer == nullptr);
 #ifdef USE_OPENXR
     // Initialize vulkan loader
     try {
@@ -692,6 +692,7 @@ namespace svulkan2::core {
   vk::UniqueSurfaceKHR uniqueSurface = mInstance->createMetalSurfaceEXTUnique(surfaceCreateInfo);
   tmpSurface = uniqueSurface.get();
 #elif defined(VK_USE_PLATFORM_ANDROID_KHR)
+  LOGI("-------------------------Instance::summarizePhysicalDevices---mLayer == null (%d)", mLayer == nullptr);
   vk::AndroidSurfaceCreateInfoKHR surfaceCreateInfo = {};
   surfaceCreateInfo.flags = vk::AndroidSurfaceCreateFlagsKHR();
   surfaceCreateInfo.setWindow(const_cast<ANativeWindow*>(static_cast<const ANativeWindow*>(mLayer)));
diff --git a/CMakeLists.txt b/CMakeLists.txt
index dcd94d91..f2ef6d0c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -61,11 +61,11 @@ endif()
 if (${USE_OPENXR})
     include(openxr)
     include(magic-enum)
-    include(pinocchio)
-    include(yaml-cpp)
-    include(nlopt)
-    include(pytorch)
-    include(nlohmann)
+    # include(pinocchio)
+    # include(yaml-cpp)
+    # include(nlopt)
+    # include(pytorch)
+    # include(nlohmann)
 endif()
 
 if (${SAPIEN_DEBUG_VIEWER})
@@ -134,10 +134,11 @@ if(CMAKE_SYSTEM_NAME MATCHES "Android")
 endif()
 
 if (${USE_OPENXR})
-    target_link_libraries(sapien PRIVATE OpenXR::headers OpenXR::openxr_loader magic_enum pinocchio yaml-cpp nlopt pytorch nlohmann_json)
+    # target_link_libraries(sapien PRIVATE OpenXR::headers OpenXR::openxr_loader magic_enum pinocchio yaml-cpp nlopt pytorch nlohmann_json)
+    target_link_libraries(sapien PRIVATE OpenXR::headers OpenXR::openxr_loader magic_enum)
 endif()
 
-target_link_libraries(sapien PUBLIC eigen svulkan2)
+target_link_libraries(sapien PUBLIC eigen svulkan2 android log)
 if (${USE_CPP_WRAPPER})
     target_link_libraries(sapien PUBLIC tinyxml2)
 endif()
diff --git a/cmake/openxr.cmake b/cmake/openxr.cmake
index 81462d94..dfa464f1 100644
--- a/cmake/openxr.cmake
+++ b/cmake/openxr.cmake
@@ -6,4 +6,10 @@ FetchContent_Declare(OpenXR-SDK
         GIT_SHALLOW TRUE
         GIT_PROGRESS TRUE
 )
-FetchContent_MakeAvailable(OpenXR-SDK)
\ No newline at end of file
+FetchContent_MakeAvailable(OpenXR-SDK)
+
+target_include_directories(
+        headers
+        INTERFACE
+        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../OpenXR>
+        $<INSTALL_INTERFACE:include>)
\ No newline at end of file
diff --git a/cmake/pybind11.cmake b/cmake/pybind11.cmake
index 1cf1a77c..5de98509 100644
--- a/cmake/pybind11.cmake
+++ b/cmake/pybind11.cmake
@@ -6,7 +6,7 @@ include(FetchContent)
 FetchContent_Declare(
   pybind11
   GIT_REPOSITORY https://github.com/pybind/pybind11.git
-  GIT_TAG smart_holder
+  GIT_TAG archive/smart_holder
   GIT_SHALLOW TRUE
   GIT_PROGRESS TRUE
 )
diff --git a/engine/include/engine/vr_viewer.h b/engine/include/engine/vr_viewer.h
index 1343b057..c112deac 100644
--- a/engine/include/engine/vr_viewer.h
+++ b/engine/include/engine/vr_viewer.h
@@ -23,12 +23,13 @@ public:
   void render();
 
   void setOnTracking(const std::function<void(const std::vector<Pose>& left, const std::vector<Pose>& right)>& onTracking);
+#ifdef USE_OPENXR
   void setOnControllerStateUpdate(const std::function<void(const ControllerState &)> onControllerStateUpdate);
 
   void addFixedCameraPos(const std::string &name, const Vec3 &p);
   void removeFixedCameraPos(const std::string &name);
   void switchCameraPos(const std::string &name = "");
-
+#endif
   ~VRViewer();
 
 private:
diff --git a/engine/src/vr_viewer.cpp b/engine/src/vr_viewer.cpp
index ba38e7a3..4d6c8dd2 100644
--- a/engine/src/vr_viewer.cpp
+++ b/engine/src/vr_viewer.cpp
@@ -32,6 +32,7 @@ namespace sapien::engine {
     mRenderWindow->setOnTracking(onTracking);
   }
 
+#ifdef USE_OPENXR
   void VRViewer::setOnControllerStateUpdate(const std::function<void(const ControllerState &)> onControllerStateUpdate) {
     mRenderWindow->setOnControllerStateUpdate(onControllerStateUpdate);
   }
@@ -47,6 +48,7 @@ namespace sapien::engine {
   void VRViewer::switchCameraPos(const std::string &name) {
     mRenderWindow->switchCameraPos(name);
   }
+#endif
 
   VRViewer::~VRViewer() {
 
diff --git a/include/sapien/physx/physx_system.h b/include/sapien/physx/physx_system.h
index f6850154..a6425631 100644
--- a/include/sapien/physx/physx_system.h
+++ b/include/sapien/physx/physx_system.h
@@ -314,7 +314,29 @@ private:
   int mContactCount{0}; // current contact count, valid only when contactUpdaToDate is true
   void copyContactData();
 };
+#else
+class PhysxSystemGpu : public PhysxSystem {
+public:
+  PhysxSystemGpu(std::shared_ptr<Device> device);
+
+  void registerComponent(std::shared_ptr<PhysxRigidDynamicComponent> component) override {}
+  void registerComponent(std::shared_ptr<PhysxRigidStaticComponent> component) override {}
+  void registerComponent(std::shared_ptr<PhysxArticulationLinkComponent> component) override {}
+  void unregisterComponent(std::shared_ptr<PhysxRigidDynamicComponent> component) override {}
+  void unregisterComponent(std::shared_ptr<PhysxRigidStaticComponent> component) override {}
+  void unregisterComponent(std::shared_ptr<PhysxArticulationLinkComponent> component) override {}
+  std::vector<std::shared_ptr<PhysxRigidDynamicComponent>>
+  getRigidDynamicComponents() const override { return {}; }
+  std::vector<std::shared_ptr<PhysxRigidStaticComponent>>
+  getRigidStaticComponents() const override { return {}; }
+  std::vector<std::shared_ptr<PhysxArticulationLinkComponent>>
+  getArticulationLinkComponents() const override { return {}; }
 
+  void step() override {}
+  bool isGpu() const override { return true; }
+
+  ~PhysxSystemGpu() {}
+};
 #endif
 
 } // namespace physx
diff --git a/include/sapien/sapien_renderer/sapien_renderer_system.h b/include/sapien/sapien_renderer/sapien_renderer_system.h
index e1e14d43..30888d33 100644
--- a/include/sapien/sapien_renderer/sapien_renderer_system.h
+++ b/include/sapien/sapien_renderer/sapien_renderer_system.h
@@ -26,6 +26,14 @@ class PointCloudComponent;
 class CudaDeformableMeshComponent;
 class SapienRenderCubemap;
 
+
+struct NativeData {
+  void *layer;
+#ifdef USE_OPENXR
+  std::shared_ptr<PlatformData> platformData;
+#endif
+};
+
 class SapienRenderEngine {
 public:
   static std::shared_ptr<SapienRenderEngine> Get(std::shared_ptr<Device> device = nullptr, const void *layer = nullptr
@@ -115,6 +123,10 @@ public:
 
   uint64_t nextRenderId() { return mNextRenderId++; };
 
+  static void setNativeData(void *layer = nullptr, 
+                            void *application_vm = nullptr,
+                            void *application_activity = nullptr
+  );
 private:
   uint64_t mNextRenderId{1};
 
@@ -128,6 +140,8 @@ private:
   std::set<std::shared_ptr<CudaDeformableMeshComponent>, comp_cmp> mCudaDeformableMeshComponents;
 
   std::shared_ptr<SapienRenderCubemap> mCubemap;
+public:
+  static std::shared_ptr<NativeData> gNativeData;
 };
 
 } // namespace sapien_renderer
diff --git a/include/sapien/sapien_renderer/vr.h b/include/sapien/sapien_renderer/vr.h
index 95fbb74c..795d85de 100644
--- a/include/sapien/sapien_renderer/vr.h
+++ b/include/sapien/sapien_renderer/vr.h
@@ -87,6 +87,9 @@ namespace sapien::sapien_renderer {
     std::function<void(const ControllerState &state)> mOnControllerStateUpdate;
     std::map<std::string, Vec3> mFixedCameraPositions;
     std::string mCameraPositionName;
+
+    std::vector<Pose> mLeftHandSkeletalPoses;
+    std::vector<Pose> mRightHandSkeletalPoses;
 #endif
     std::function<void(const std::vector<Pose>&, const std::vector<Pose>&)> mOnTracking;
   };
diff --git a/pinocchio/CMakeLists.txt b/pinocchio/CMakeLists.txt
index 379f380e..809a3112 100644
--- a/pinocchio/CMakeLists.txt
+++ b/pinocchio/CMakeLists.txt
@@ -22,4 +22,4 @@ include(pinocchio)
 
 find_package(sapien REQUIRED)
 pybind11_add_module(pysapien_pinocchio "pinocchio_model.cpp" NO_EXTRAS)
-target_link_libraries(pysapien_pinocchio PRIVATE sapien::sapien eigen pinocchio)
+target_link_libraries(pysapien_pinocchio PRIVATE sapien::sapien eigen pinocchio ${PYTHON_LIBRARIES})
diff --git a/pinocchio/cmake/pybind11.cmake b/pinocchio/cmake/pybind11.cmake
index 1cf1a77c..5de98509 100644
--- a/pinocchio/cmake/pybind11.cmake
+++ b/pinocchio/cmake/pybind11.cmake
@@ -6,7 +6,7 @@ include(FetchContent)
 FetchContent_Declare(
   pybind11
   GIT_REPOSITORY https://github.com/pybind/pybind11.git
-  GIT_TAG smart_holder
+  GIT_TAG archive/smart_holder
   GIT_SHALLOW TRUE
   GIT_PROGRESS TRUE
 )
diff --git a/python/CMakeLists.txt b/python/CMakeLists.txt
index db48f0a0..4b3349a9 100644
--- a/python/CMakeLists.txt
+++ b/python/CMakeLists.txt
@@ -10,6 +10,9 @@ else()
     set(CMAKE_CXX_FLAGS_RELEASE "-O3 -g0 -Wall  -std=c++20")
 endif()
 
+set(CMAKE_INSTALL_RPATH "@loader_path/$ORIGIN/libs")
+set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
+# set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
 
 if (CMAKE_BUILD_TYPE STREQUAL "Debug")
     add_definitions(-D_DEBUG)
@@ -28,12 +31,20 @@ endmacro()
 list(PREPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../cmake")
 include(eigen)
 include(pybind11)
+message(---------------------------------USE_OPENXR = ${USE_OPENXR})
+if (${USE_OPENXR})
+    include(openxr)
+    include(magic-enum)
+endif()
 
 find_package(sapien REQUIRED)
 
 file(GLOB_RECURSE PYBIND_SRC "pybind/*.cpp")
 pybind11_add_module(pysapien ${PYBIND_SRC})
-target_link_libraries(pysapien PRIVATE sapien::sapien eigen)
+target_link_libraries(pysapien PRIVATE sapien::sapien eigen ${PYTHON_LIBRARIES} android log)
+if (${USE_OPENXR})
+    target_link_libraries(pysapien PRIVATE OpenXR::headers OpenXR::openxr_loader magic_enum)
+endif()
 target_compile_definitions(pysapien PRIVATE PYBIND11_USE_SMART_HOLDER_AS_DEFAULT)
 
 if (MSVC)
diff --git a/python/py_package/__init__.py b/python/py_package/__init__.py
index ae4e06cd..411aaf60 100644
--- a/python/py_package/__init__.py
+++ b/python/py_package/__init__.py
@@ -6,8 +6,8 @@ import platform
 from .version import __version__
 
 os.environ["SAPIEN_PACKAGE_PATH"] = os.path.dirname(__file__)
-from . import _dylibs_tricks
-from . import _oidn_tricks
+# from . import _dylibs_tricks
+# from . import _oidn_tricks
 
 from . import pysapien
 
@@ -15,17 +15,13 @@ from .pysapien import Entity, Component, System, CudaArray, Pose, Device
 from .pysapien import profile
 from .pysapien import set_log_level
 # zhangxiao
-import sys
-if sys.platform == 'darwin':
-    from .pysapien import math
-else:
-    from .pysapien import math, simsense
+from .pysapien import math
 
 
 from . import physx
 from . import render
 
-from . import _vulkan_tricks
+# from . import _vulkan_tricks
 
 from .wrapper.scene import Scene, SceneConfig, Widget
 from .wrapper.engine import Engine
diff --git a/python/py_package/__init__.pyi b/python/py_package/__init__.pyi
index e9c42f50..e0d3bb3a 100644
--- a/python/py_package/__init__.pyi
+++ b/python/py_package/__init__.pyi
@@ -15,11 +15,11 @@ from sapien.pysapien.physx import PhysxSceneConfig as SceneConfig
 from sapien.pysapien import profile
 from sapien.pysapien import set_log_level
 # zhangxiao
-import sys
-if sys.platform != 'darwin':
-    from sapien.pysapien import simsense
+# import sys
+# if sys.platform != 'darwin':
+#     from sapien.pysapien import simsense
 
-from sapien.pysapien_pinocchio import PinocchioModel
+# from sapien.pysapien_pinocchio import PinocchioModel
 from sapien.wrapper.actor_builder import ActorBuilder
 from sapien.wrapper.articulation_builder import ArticulationBuilder
 from sapien.wrapper.engine import Engine
diff --git a/python/py_package/_dylibs_tricks.py b/python/py_package/_dylibs_tricks.py
index b3825544..7efd6013 100644
--- a/python/py_package/_dylibs_tricks.py
+++ b/python/py_package/_dylibs_tricks.py
@@ -1,13 +1,13 @@
-import platform
-import os
-import sys
-import shutil
+# import platform
+# import os
+# import sys
+# import shutil
 
-if platform.system() == "Darwin":
-    target_dir = os.path.join(sys.prefix, "lib")
-    source_path = os.path.join(os.path.dirname(__file__), "libs")
-    assert os.path.exists(source_path)
+# if platform.system() == "Darwin":
+#     target_dir = os.path.join(sys.prefix, "lib")
+#     source_path = os.path.join(os.path.dirname(__file__), "libs")
+#     assert os.path.exists(source_path)
     
-    for item in os.listdir(source_path):
-        src_path = os.path.join(source_path, item)
-        shutil.copy2(src_path, target_dir)
\ No newline at end of file
+#     for item in os.listdir(source_path):
+#         src_path = os.path.join(source_path, item)
+#         shutil.copy2(src_path, target_dir)
\ No newline at end of file
diff --git a/python/py_package/pysapien/__init__.pyi b/python/py_package/pysapien/__init__.pyi
index b62afc39..d9fb27ee 100644
--- a/python/py_package/pysapien/__init__.pyi
+++ b/python/py_package/pysapien/__init__.pyi
@@ -8,12 +8,7 @@ from . import math
 from . import physx
 from . import render
 # zhangxiao
-import sys
-if sys.platform == 'darwin':
-    __all__ = ['Component', 'CudaArray', 'Device', 'Entity', 'Pose', 'Profiler', 'Scene', 'System', 'abi_version', 'compiled_with_cxx11_abi', 'internal_renderer', 'math', 'physx', 'profile', 'pybind11_internals_id', 'pybind11_use_smart_holder', 'render', 'set_log_level']
-else:
-    from . import simsense
-    __all__ = ['Component', 'CudaArray', 'Device', 'Entity', 'Pose', 'Profiler', 'Scene', 'System', 'abi_version', 'compiled_with_cxx11_abi', 'internal_renderer', 'math', 'physx', 'profile', 'pybind11_internals_id', 'pybind11_use_smart_holder', 'render', 'set_log_level', 'simsense']
+__all__ = ['Component', 'CudaArray', 'Device', 'Entity', 'Pose', 'Profiler', 'Scene', 'System', 'abi_version', 'compiled_with_cxx11_abi', 'internal_renderer', 'math', 'physx', 'profile', 'pybind11_internals_id', 'pybind11_use_smart_holder', 'render', 'set_log_level']
 
 _T = typing.TypeVar("_T", Component)
 class Component:
diff --git a/python/py_package/pysapien/physx.pyi b/python/py_package/pysapien/physx.pyi
index 4b1edc51..f42f4fdc 100644
--- a/python/py_package/pysapien/physx.pyi
+++ b/python/py_package/pysapien/physx.pyi
@@ -8,7 +8,7 @@ import typing
 import sys
 
 # __all__ = ['PhysxArticulation', 'PhysxArticulationJoint', 'PhysxArticulationLinkComponent', 'PhysxBaseComponent', 'PhysxBodyConfig', 'PhysxCollisionShape', 'PhysxCollisionShapeBox', 'PhysxCollisionShapeCapsule', 'PhysxCollisionShapeConvexMesh', 'PhysxCollisionShapeCylinder', 'PhysxCollisionShapePlane', 'PhysxCollisionShapeSphere', 'PhysxCollisionShapeTriangleMesh', 'PhysxContact', 'PhysxContactPoint', 'PhysxCpuSystem', 'PhysxDistanceJointComponent', 'PhysxDriveComponent', 'PhysxEngine', 'PhysxGearComponent', 'PhysxGpuContactBodyImpulseQuery', 'PhysxGpuContactPairImpulseQuery', 'PhysxGpuSystem', 'PhysxJointComponent', 'PhysxMaterial', 'PhysxRayHit', 'PhysxRigidBaseComponent', 'PhysxRigidBodyComponent', 'PhysxRigidDynamicComponent', 'PhysxRigidStaticComponent', 'PhysxSDFConfig', 'PhysxSceneConfig', 'PhysxShapeConfig', 'PhysxSystem', 'get_body_config', 'get_default_material', 'get_scene_config', 'get_sdf_config', 'get_shape_config', 'is_gpu_enabled', 'set_body_config', 'set_default_material', 'set_gpu_memory_config', 'set_scene_config', 'set_sdf_config', 'set_shape_config', 'version']
-__all__ = ['PhysxArticulation', 'PhysxArticulationJoint', 'PhysxArticulationLinkComponent', 'PhysxBaseComponent', 'PhysxBodyConfig', 'PhysxCollisionShape', 'PhysxCollisionShapeBox', 'PhysxCollisionShapeCapsule', 'PhysxCollisionShapeConvexMesh', 'PhysxCollisionShapeCylinder', 'PhysxCollisionShapePlane', 'PhysxCollisionShapeSphere', 'PhysxCollisionShapeTriangleMesh', 'PhysxContact', 'PhysxContactPoint', 'PhysxCpuSystem', 'PhysxDistanceJointComponent', 'PhysxDriveComponent', 'PhysxEngine', 'PhysxGearComponent', 'PhysxJointComponent', 'PhysxMaterial', 'PhysxRayHit', 'PhysxRigidBaseComponent', 'PhysxRigidBodyComponent', 'PhysxRigidDynamicComponent', 'PhysxRigidStaticComponent', 'PhysxSDFConfig', 'PhysxSceneConfig', 'PhysxShapeConfig', 'PhysxSystem', 'get_body_config', 'get_default_material', 'get_scene_config', 'get_sdf_config', 'get_shape_config', 'is_gpu_enabled', 'set_body_config', 'set_default_material', 'set_gpu_memory_config', 'set_scene_config', 'set_sdf_config', 'set_shape_config', 'version']
+__all__ = ['PhysxArticulation', 'PhysxArticulationJoint', 'PhysxArticulationLinkComponent', 'PhysxBaseComponent', 'PhysxBodyConfig', 'PhysxCollisionShape', 'PhysxCollisionShapeBox', 'PhysxCollisionShapeCapsule', 'PhysxCollisionShapeConvexMesh', 'PhysxCollisionShapeCylinder', 'PhysxCollisionShapePlane', 'PhysxCollisionShapeSphere', 'PhysxCollisionShapeTriangleMesh', 'PhysxContact', 'PhysxContactPoint', 'PhysxCpuSystem', 'PhysxDistanceJointComponent', 'PhysxDriveComponent', 'PhysxEngine', 'PhysxGearComponent', 'PhysxGpuSystem','PhysxJointComponent', 'PhysxMaterial', 'PhysxRayHit', 'PhysxRigidBaseComponent', 'PhysxRigidBodyComponent', 'PhysxRigidDynamicComponent', 'PhysxRigidStaticComponent', 'PhysxSDFConfig', 'PhysxSceneConfig', 'PhysxShapeConfig', 'PhysxSystem', 'get_body_config', 'get_default_material', 'get_scene_config', 'get_sdf_config', 'get_shape_config', 'is_gpu_enabled', 'set_body_config', 'set_default_material', 'set_gpu_memory_config', 'set_scene_config', 'set_sdf_config', 'set_shape_config', 'version']
 M = typing.TypeVar("M", bound=int)
 class PhysxArticulation:
     name: str
diff --git a/python/py_package/pysapien/render.pyi b/python/py_package/pysapien/render.pyi
index ea6c214f..2968db0b 100644
--- a/python/py_package/pysapien/render.pyi
+++ b/python/py_package/pysapien/render.pyi
@@ -788,7 +788,7 @@ class RenderTexturedLightComponent(RenderSpotLightComponent):
         ...
 class RenderVRDisplay:
     root_pose: sapien.pysapien.Pose
-    def __init__(self) -> None:
+    def __init__(self, screen_scale: float = 1.0) -> None:
         ...
     def fetch_poses(self) -> None:
         """
diff --git a/python/py_package/wrapper/engine.py b/python/py_package/wrapper/engine.py
index 78c6a404..d458673f 100644
--- a/python/py_package/wrapper/engine.py
+++ b/python/py_package/wrapper/engine.py
@@ -1,9 +1,5 @@
 # zhangxiao
-import sys
-if sys.platform == 'darwin':
-    from ..pysapien.physx import PhysxSystem, PhysxCpuSystem, PhysxMaterial
-else:
-    from ..pysapien.physx import PhysxSystem, PhysxGpuSystem, PhysxCpuSystem, PhysxMaterial
+from ..pysapien.physx import PhysxSystem, PhysxCpuSystem, PhysxMaterial
 
 from .. import pysapien as sapien
 from ..pysapien.render import RenderSystem
diff --git a/python/py_package/wrapper/pinocchio_model.py b/python/py_package/wrapper/pinocchio_model.py
index 9d7bc32c..773bf403 100644
--- a/python/py_package/wrapper/pinocchio_model.py
+++ b/python/py_package/wrapper/pinocchio_model.py
@@ -284,6 +284,10 @@ except ModuleNotFoundError:
             "pinnochio package is not installed, robotics functionalities will not be available"
         )
         PinocchioModel = None
+    warnings.warn(
+        "pinnochio package is not installed, robotics functionalities will not be available"
+    )
+    PinocchioModel = None
 
 except ImportError:
     if platform.system() == "Linux":
@@ -296,6 +300,10 @@ except ImportError:
             "pinnochio package is broken, robotics functionalities will not be available"
         )
         PinocchioModel = None
+    warnings.warn(
+        "pinnochio package is broken, robotics functionalities will not be available"
+    )
+    PinocchioModel = None
 
 
 def _create_pinocchio_model(
diff --git a/python/py_package/wrapper/renderer.py b/python/py_package/wrapper/renderer.py
index 13198865..e3d91b11 100644
--- a/python/py_package/wrapper/renderer.py
+++ b/python/py_package/wrapper/renderer.py
@@ -6,6 +6,8 @@ from warnings import warn
 class SapienRenderer(_SapienRenderer):
     def __init__(self, **args):
         warn("SapienRenderer is no no longer needed.", DeprecationWarning, stacklevel=2)
+        print("--------------------------------SapienRenderer---__init__---1")
+        print(f"--------------------------------SapienRenderer---__init__---args = {args}")
         super().__init__()
 
     def create_material(self):
diff --git a/python/pybind/physx.cpp b/python/pybind/physx.cpp
index 68423651..91619c07 100644
--- a/python/pybind/physx.cpp
+++ b/python/pybind/physx.cpp
@@ -288,9 +288,8 @@ Generator<int> init_physx(py::module &sapien) {
   auto PyPhysxSystem = py::class_<PhysxSystem, System>(m, "PhysxSystem");
   auto PyPhysxSystemCpu = py::class_<PhysxSystemCpu, PhysxSystem>(m, "PhysxCpuSystem");
 
-#ifdef SAPIEN_CUDA
   auto PyPhysxSystemGpu = py::class_<PhysxSystemGpu, PhysxSystem>(m, "PhysxGpuSystem");
-
+#ifdef SAPIEN_CUDA
   auto PyPhysxGpuContactPairImpulseQuery =
       py::class_<PhysxGpuContactPairImpulseQuery>(m, "PhysxGpuContactPairImpulseQuery");
   auto PyPhysxGpuContactBodyImpulseQuery =
@@ -574,6 +573,12 @@ Usage:
 
   PyPhysxGpuContactBodyImpulseQuery.def_property_readonly(
       "cuda_impulses", [](PhysxGpuContactBodyImpulseQuery const &q) { return q.buffer.handle(); });
+#else
+  PyPhysxSystemGpu
+      .def(py::init([](std::string const &device) {
+             return std::make_shared<PhysxSystemGpu>(findDevice(device));
+           }),
+           py::arg("device") = "cuda");
 #endif
   PyPhysxMaterial
       .def(py::init<float, float, float>(), py::arg("static_friction"),
diff --git a/python/pybind/sapien_renderer.cpp b/python/pybind/sapien_renderer.cpp
index 3aa2a05a..ab7534b5 100644
--- a/python/pybind/sapien_renderer.cpp
+++ b/python/pybind/sapien_renderer.cpp
@@ -563,7 +563,9 @@ void init_sapien_renderer(py::module &sapien) {
   auto PyRenderWindow = py::class_<SapienRendererWindow>(m, "RenderWindow");
   auto PyRenderVRDisplay = py::class_<SapienVRDisplay>(m, "RenderVRDisplay");
 
-  PySapienRenderer.def(py::init(&SapienRenderEngine::Get), py::arg("device") = nullptr, py::arg("layer") = nullptr)
+  PySapienRenderer.def(py::init([](std::shared_ptr<Device> device) {
+    return SapienRenderEngine::Get(device);
+  }), py::arg("device") = nullptr)
       .def_property_readonly("_internal_context", &SapienRenderEngine::getContext);
 
   PyRenderSystemGroup
@@ -617,6 +619,15 @@ This function waits for any pending CUDA operations on cuda stream provided by :
 
       // .def("disable_auto_upload", &SapienRendererSystem::disableAutoUpload)
 
+      .def_static("set_native_data", [](std::string winAddress, std::string vm, std::string activity) {
+        uintptr_t a = static_cast<uintptr_t>(std::stoull(winAddress, nullptr, 16));
+        uintptr_t b = static_cast<uintptr_t>(std::stoull(vm, nullptr, 16));
+        uintptr_t c = static_cast<uintptr_t>(std::stoull(activity, nullptr, 16));
+        SapienRendererSystem::setNativeData(reinterpret_cast<void*>(a),
+                                            reinterpret_cast<void*>(b),
+                                            reinterpret_cast<void*>(c));
+      }, py::arg("layer"), py::arg("application_vm"), py::arg("application_activity"))
+
       .def_property_readonly("cuda_object_transforms",
                              &SapienRendererSystem::getTransformCudaArray)
 
@@ -1269,7 +1280,10 @@ consumer library. Make a copy if needed.
       .def("set_focus_callback", &SapienRendererWindow::setFocusCallback, py::arg("callback"))
       .def("unset_focus_callback", &SapienRendererWindow::unsetFocusCallback);
 
-  PyRenderVRDisplay.def(py::init<>())
+  PyRenderVRDisplay
+      .def(py::init([](float screenScale) {
+            return std::make_shared<SapienVRDisplay>("", screenScale);
+          }), py::arg("screenScale") = 1.f)
       .def("set_scene", &SapienVRDisplay::setScene, py::arg("scene"))
       .def("set_camera_parameters", &SapienVRDisplay::setCameraParameters, py::arg("near"),
            py::arg("far"))
diff --git a/python/requirements.txt b/python/requirements.txt
index 495d36ea..530a6532 100644
--- a/python/requirements.txt
+++ b/python/requirements.txt
@@ -1,7 +1,7 @@
-numpy>=1.17
-requests>=2.22
-transforms3d>=0.3
+numpy
+requests
+transforms3d
 lxml
 networkx
 pyperclip
-opencv-python>=4.0
+# opencv-python
diff --git a/setup.py b/setup.py
index bd21283f..085770f3 100644
--- a/setup.py
+++ b/setup.py
@@ -105,7 +105,8 @@ def generate_version():
     return version
 
 
-version = generate_version()
+# version = generate_version()
+version = "3.0.0"
 
 if args.get_version:
     print(version)
@@ -141,8 +142,10 @@ def build_sapien(sapien_source_dir, sapien_build_dir):
         "-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded",
     ]
     
-    if args.macOS:
-        cmake_args += ["-DCMAKE_TOOLCHAIN_FILE=toolchains/macos.toolchain.cmake"]
+    # if args.macOS:
+    #     cmake_args += ["-DCMAKE_TOOLCHAIN_FILE=toolchains/macos.toolchain.cmake"]
+    # cmake_args += ["-DCMAKE_TOOLCHAIN_FILE=toolchains/android.toolchain.cmake"]
+    cmake_args += ["-DCMAKE_TOOLCHAIN_FILE=toolchains/meta-quest.toolchain.cmake"]
 
     if sys.platform == "win32":
         cmake_args += [f"-DBUILD_TESTING=Off"]
@@ -245,6 +248,8 @@ class CMakeBuild(build_ext):
             f"-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=$<1:{extdir}>",
             f"-DPYTHON_EXECUTABLE={sys.executable}",
             f"-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded",
+            # openxr
+            "-DUSE_OPENXR=ON",
         ]
         if args.debug:
             cfg = "Debug"
@@ -285,18 +290,19 @@ class CMakeBuild(build_ext):
 
         # provide oidn for linux
         if platform.system() == "Linux":
-            for folder in ["lib", "lib64"]:
-                library_dir = os.path.join(sapien_install_dir, folder)
-                if not os.path.exists(library_dir):
-                    continue
-                print("copy library from", library_dir)
-                for lib in os.listdir(library_dir):
-                    if lib in [
-                        "libOpenImageDenoise.so.2.0.1",
-                        "libOpenImageDenoise_core.so.2.0.1",
-                        "libOpenImageDenoise_device_cuda.so.2.0.1",
-                    ]:
-                        shutil.copy(os.path.join(library_dir, lib), oidn_library_path)
+            print("---provide oidn for linux")
+            # for folder in ["lib", "lib64"]:
+            #     library_dir = os.path.join(sapien_install_dir, folder)
+            #     if not os.path.exists(library_dir):
+            #         continue
+            #     print("copy library from", library_dir)
+            #     for lib in os.listdir(library_dir):
+            #         if lib in [
+            #             "libOpenImageDenoise.so.2.0.1",
+            #             "libOpenImageDenoise_core.so.2.0.1",
+            #             "libOpenImageDenoise_device_cuda.so.2.0.1",
+            #         ]:
+            #             shutil.copy(os.path.join(library_dir, lib), oidn_library_path)
 
     def copy_assets(self, ext):
         vulkan_shader_path = os.path.join(self.build_lib, "sapien", "vulkan_shader")
@@ -313,10 +319,18 @@ class CMakeBuild(build_ext):
             dy_source_paths = [
                 os.path.join(sapien_install_dir, "lib/libsapien.dylib"),
                 os.path.join(sapien_install_dir, "lib/libsvulkan2.dylib"),
-                os.path.join(ext.sourcedir, "apple/macOS/physx5/bin/mac.x86_64/release/libPhysX_64.dylib"),
-                os.path.join(ext.sourcedir, "apple/macOS/physx5/bin/mac.x86_64/release/libPhysXCommon_64.dylib"),
-                os.path.join(ext.sourcedir, "apple/macOS/physx5/bin/mac.x86_64/release/libPhysXCooking_64.dylib"),
-                os.path.join(ext.sourcedir, "apple/macOS/physx5/bin/mac.x86_64/release/libPhysXFoundation_64.dylib"),
+            ]
+            if os.path.exists(dy_libs_path):
+                shutil.rmtree(dy_libs_path)
+            os.makedirs(dy_libs_path)
+            for lib in dy_source_paths:
+                shutil.copy(lib, dy_libs_path)
+        if platform.system() == "Linux":
+            sapien_install_dir = os.path.join(self.sapien_build_dir, "_sapien_install")
+            dy_libs_path = os.path.join(self.build_lib, "sapien", "libs")
+            dy_source_paths = [
+                os.path.join(sapien_install_dir, "lib/libsapien.so"),
+                os.path.join(sapien_install_dir, "lib/libsvulkan2.so"),
             ]
             if os.path.exists(dy_libs_path):
                 shutil.rmtree(dy_libs_path)
@@ -325,15 +339,16 @@ class CMakeBuild(build_ext):
                 shutil.copy(lib, dy_libs_path)
 
         # provide Vulkan libraries for linux
-        if platform.system() == "Linux" or platform.system() == "Darwin":
-            vulkan_library_path = os.path.join(
-                self.build_lib, "sapien", "vulkan_library"
-            )
-            source_path = os.path.join(ext.sourcedir, "vulkan_library")
-            if os.path.exists(vulkan_library_path):
-                shutil.rmtree(vulkan_library_path)
-            assert os.path.exists(source_path)
-            shutil.copytree(source_path, vulkan_library_path)
+        # if platform.system() == "Linux" or platform.system() == "Darwin":
+        #     print("---provide Vulkan libraries for linux")
+        #     vulkan_library_path = os.path.join(
+        #         self.build_lib, "sapien", "vulkan_library"
+        #     )
+        #     source_path = os.path.join(ext.sourcedir, "vulkan_library")
+        #     if os.path.exists(vulkan_library_path):
+        #         shutil.rmtree(vulkan_library_path)
+        #     assert os.path.exists(source_path)
+        #     shutil.copytree(source_path, vulkan_library_path)
 
         sensor_assets_path = os.path.join(self.build_lib, "sapien", "sensor", "assets")
         source_patterns_path = os.path.join(
@@ -350,6 +365,7 @@ class CMakeBuild(build_ext):
 
     def build_extension(self, ext):
         if platform.system() == "Linux":
+            print("---build linux build extension")
             self.build_pinocchio(ext)
         self.build_pybind(ext)
         self.copy_assets(ext)
diff --git a/src/physx/articulation.cpp b/src/physx/articulation.cpp
index 36acec1f..bc0116e6 100644
--- a/src/physx/articulation.cpp
+++ b/src/physx/articulation.cpp
@@ -4,6 +4,8 @@
 #include "sapien/physx/articulation_link_component.h"
 #include "sapien/physx/physx_system.h"
 #include "sapien/scene.h"
+#include <iostream>
+#include <sstream>
 
 using namespace physx;
 
@@ -222,7 +224,9 @@ uint32_t PhysxArticulation::getDof() {
 
 void PhysxArticulation::checkDof(uint32_t n) {
   if (n != getDof()) {
-    throw std::runtime_error("input vector size does not match articulation DOFs");
+    std::ostringstream oss;
+    oss << "input vector size does not match articulation DOFs. " << "n = " << n << ", getDof() = " << getDof();
+    throw std::runtime_error(oss.str());
   }
 }
 
diff --git a/src/physx/physx_system.cpp b/src/physx/physx_system.cpp
index 1b182440..c59f85c4 100644
--- a/src/physx/physx_system.cpp
+++ b/src/physx/physx_system.cpp
@@ -132,6 +132,11 @@ PhysxSystemGpu::PhysxSystemGpu(std::shared_ptr<Device> device) {
   sceneDesc.cpuDispatcher = mPxCPUDispatcher;
   mPxScene = mEngine->getPxPhysics()->createScene(sceneDesc);
 }
+#else
+PhysxSystemGpu::PhysxSystemGpu(std::shared_ptr<Device> device) {
+  throw std::runtime_error(
+        "Does not support PhysX GPU system.");
+}
 #endif
 
 void PhysxSystemCpu::registerComponent(std::shared_ptr<PhysxRigidDynamicComponent> component) {
diff --git a/src/sapien_renderer/sapien_renderer_system.cpp b/src/sapien_renderer/sapien_renderer_system.cpp
index 7c190c40..1d70a6e4 100644
--- a/src/sapien_renderer/sapien_renderer_system.cpp
+++ b/src/sapien_renderer/sapien_renderer_system.cpp
@@ -11,6 +11,7 @@
 #include <svulkan2/renderer/renderer.h>
 #include <svulkan2/renderer/rt_renderer.h>
 #include <svulkan2/scene/scene.h>
+#include <logger.h>
 
 // zhangxiao
 #ifdef SAPIEN_CUDA
@@ -18,14 +19,25 @@
 #include <cuda_runtime.h>
 #endif
 
+#ifdef __ANDROID__
+#include <jni.h>
+#include <android/native_window_jni.h>
+#include "../logger.h"
+#endif
+
 namespace sapien {
 namespace sapien_renderer {
 
+std::shared_ptr<NativeData> SapienRendererSystem::gNativeData = nullptr;
+
 std::shared_ptr<SapienRenderEngine> SapienRenderEngine::Get(std::shared_ptr<Device> device, const void *layer
 #ifdef USE_OPENXR
                                                             ,const std::shared_ptr<PlatformData> &platformData
 #endif
                                                             ) {
+  if (!layer && SapienRendererSystem::gNativeData && SapienRendererSystem::gNativeData->layer) {
+    layer = SapienRendererSystem::gNativeData->layer;
+  }
   static std::weak_ptr<SapienRenderEngine> gEngine;
   std::shared_ptr<SapienRenderEngine> engine;
   if ((engine = gEngine.lock())) {
@@ -35,12 +47,15 @@ std::shared_ptr<SapienRenderEngine> SapienRenderEngine::Get(std::shared_ptr<Devi
     }
     return engine;
   }
+  LOGI("-------------------------SapienRenderEngine::Get---layer == null (%d)", layer == nullptr);
   if (layer) {
     svulkan2::core::Context::setLayer(layer);
   }
 #ifdef USE_OPENXR
     if (platformData) {
       svulkan2::core::Context::setPlatformData(platformData);
+    } else if (SapienRendererSystem::gNativeData && SapienRendererSystem::gNativeData->platformData) {
+      svulkan2::core::Context::setPlatformData(SapienRendererSystem::gNativeData->platformData);
     }
 #endif
   gEngine = engine = std::make_shared<SapienRenderEngine>(device);
@@ -117,6 +132,9 @@ SapienRendererSystem::SapienRendererSystem(std::shared_ptr<Device> device, const
                                           ,const std::shared_ptr<PlatformData> &data
 #endif
 ) {
+  if (!layer && gNativeData && gNativeData->layer) {
+    layer = gNativeData->layer;
+  }
   mEngine = SapienRenderEngine::Get(device, layer
 #ifdef USE_OPENXR
                                     ,data
@@ -220,6 +238,27 @@ CudaArrayHandle SapienRendererSystem::getTransformCudaArray() {
 #endif
 }
 
+void SapienRendererSystem::setNativeData(void *layer,
+                                         void *application_vm,
+                                         void *application_activity) {
+#ifdef __ANDROID__
+    LOGD("-----SapienRendererSystem::setNativeData---layer = {%ld}, application_vm = {%ld}, application_activity = {%ld}", reinterpret_cast<long>(layer), reinterpret_cast<long>(application_vm), reinterpret_cast<long>(application_activity));
+    ANativeWindow* nativeWindow = reinterpret_cast<ANativeWindow*>(layer);
+    if (nativeWindow) {
+      LOGD("-----SapienRendererSystem::setNativeData---width = {%d}, height = {%d}", ANativeWindow_getWidth(nativeWindow), ANativeWindow_getHeight(nativeWindow));
+    }
+#endif
+    gNativeData = std::make_shared<NativeData>();
+    gNativeData->layer = layer;
+    svulkan2::core::Context::setLayer(layer);
+#ifdef USE_OPENXR
+    gNativeData->platformData = std::make_shared<PlatformData>();
+    gNativeData->platformData->application_vm = application_vm;
+    gNativeData->platformData->application_activity = application_activity;
+    svulkan2::core::Context::setPlatformData(gNativeData->platformData);
+#endif
+  }
+
 SapienRendererSystem::~SapienRendererSystem() {}
 
 } // namespace sapien_renderer
diff --git a/src/sapien_renderer/vr.cpp b/src/sapien_renderer/vr.cpp
index b5ff922a..710bd17d 100644
--- a/src/sapien_renderer/vr.cpp
+++ b/src/sapien_renderer/vr.cpp
@@ -126,7 +126,13 @@ namespace sapien::sapien_renderer {
     }
   }
 
-  std::vector<uint32_t> SapienVRDisplay::getControllerIds() const { return mVR->getControllers(); }
+  std::vector<uint32_t> SapienVRDisplay::getControllerIds() const {
+#ifdef USE_OPENXR
+    return {};
+#else
+    return mVR->getControllers();
+#endif
+  }
 
   void SapienVRDisplay::fetchPoses() { mVR->updatePoses(); }
 
@@ -139,13 +145,24 @@ namespace sapien::sapien_renderer {
   }
 
   Pose SapienVRDisplay::getLeftHandRootPose() {
+#ifdef USE_OPENXR
+    return Pose();
+#else
     return POSE_GL_TO_ROS * Mat4ToPose(mVR->getSkeletalRootPoseLeft()) * POSE_ROS_TO_GL;
+#endif
   }
 
   Pose SapienVRDisplay::getRightHandRootPose() {
+#ifdef USE_OPENXR
+    return Pose();
+#else
     return POSE_GL_TO_ROS * Mat4ToPose(mVR->getSkeletalRootPoseRight()) * POSE_ROS_TO_GL;
+#endif
   }
   std::vector<Pose> SapienVRDisplay::getLeftHandSkeletalPoses() {
+#ifdef USE_OPENXR
+    return mLeftHandSkeletalPoses;
+#else
     auto poses = mVR->getSkeletalDataLeft();
     std::vector<Pose> res;
     res.reserve(poses.size());
@@ -154,8 +171,12 @@ namespace sapien::sapien_renderer {
                     POSE_ROS_TO_GL);
     }
     return res;
+#endif
   }
   std::vector<Pose> SapienVRDisplay::getRightHandSkeletalPoses() {
+#ifdef USE_OPENXR
+    return mRightHandSkeletalPoses;
+#else
     auto poses = mVR->getSkeletalDataRight();
     std::vector<Pose> res;
     res.reserve(poses.size());
@@ -164,6 +185,7 @@ namespace sapien::sapien_renderer {
                     POSE_ROS_TO_GL);
     }
     return res;
+#endif
   }
 
   uint64_t SapienVRDisplay::getControllerButtonPressed(uint32_t id) const {
@@ -199,6 +221,9 @@ namespace sapien::sapien_renderer {
   void SapienVRDisplay::setRootPose(Pose const &pose) { mRootPose = pose; }
 
   void SapienVRDisplay::render() {
+#ifdef USE_OPENXR
+    xrRender();
+#else
     if (mEngine->getContext()->getDevice().waitForFences(mSceneRenderFence.get(), VK_TRUE,
                                                          UINT64_MAX) != vk::Result::eSuccess) {
       throw std::runtime_error("failed on wait for fence.");
@@ -229,18 +254,16 @@ namespace sapien::sapien_renderer {
 
     // present to steam
     mVR->renderFrame(imageLeft, imageRight);
+#endif
   }
 
 #ifdef USE_OPENXR
   void SapienVRDisplay::onTracking(const std::vector<XrPosef>& left, const std::vector<XrPosef>& right) {
-    if (!mOnTracking) {
-      return;
+    mLeftHandSkeletalPoses = updatePoses(left);
+    mRightHandSkeletalPoses = updatePoses(right);
+    if (mOnTracking) {
+      mOnTracking(mLeftHandSkeletalPoses, mRightHandSkeletalPoses);
     }
-    std::vector<Pose> leftHand;
-    std::vector<Pose> rightHand;
-    leftHand = updatePoses(left);
-    rightHand = updatePoses(right);
-    mOnTracking(leftHand, rightHand);
   }
 
   void SapienVRDisplay::xrRender() {
diff --git a/src/sapien_renderer/window.cpp b/src/sapien_renderer/window.cpp
index 74e3b7a4..201645de 100644
--- a/src/sapien_renderer/window.cpp
+++ b/src/sapien_renderer/window.cpp
@@ -5,6 +5,11 @@
 #include <svulkan2/renderer/rt_renderer.h>
 #include <svulkan2/scene/scene_group.h>
 
+#ifdef __ANDROID__
+#include <jni.h>
+#include <android/native_window_jni.h>
+#endif
+
 namespace sapien {
 namespace sapien_renderer {
 
@@ -54,6 +59,17 @@ void FPSCameraControllerDebug::update() {
 
 SapienRendererWindow::SapienRendererWindow(int width, int height, std::string const &shaderDir, const void *layer)
     : mShaderDir(shaderDir) {
+#ifdef __ANDROID__
+  if (SapienRendererSystem::gNativeData && SapienRendererSystem::gNativeData->layer) {
+    ANativeWindow* nativeWindow = reinterpret_cast<ANativeWindow*>(SapienRendererSystem::gNativeData->layer);
+    int w = ANativeWindow_getWidth(nativeWindow);
+    int h = ANativeWindow_getHeight(nativeWindow);
+    if (width != w || height != h) {
+      width = w; 
+      height = h;
+    }
+  }
+#endif
   mEngine = SapienRenderEngine::Get(nullptr, layer);
   auto &renderConfig = SapienRendererDefault::Get();
 
diff --git a/toolchains/android.toolchain.cmake b/toolchains/android.toolchain.cmake
index 0e1d57bc..3fea333a 100644
--- a/toolchains/android.toolchain.cmake
+++ b/toolchains/android.toolchain.cmake
@@ -22,7 +22,10 @@ set(CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION clang)
 
 set(CMAKE_Fortran_COMPILER "" CACHE INTERNAL "Set Fortran compiler")
 
+set(CMAKE_C_COMPILER_LAUNCHER ccache CACHE INTERNAL "C cache")
+set(CMAKE_CXX_COMPILER_LAUNCHER ccache CACHE INTERNAL "C++ cache")
+
 set(USE_IMGUI OFF CACHE INTERNAL "Use imgui")
 set(USE_GLFW OFF CACHE INTERNAL "Use glfw")
 set(VK_USE_PLATFORM_ANDROID_KHR ON CACHE INTERNAL "Vulkan setting - Use platform Android")
-set(USE_CPP_WRAPPER ON CACHE INTERNAL "Use cpp wrapper")
\ No newline at end of file
+# set(USE_CPP_WRAPPER ON CACHE INTERNAL "Use cpp wrapper")
\ No newline at end of file
diff --git a/toolchains/meta-quest.toolchain.cmake b/toolchains/meta-quest.toolchain.cmake
index c5d6cdb9..20f84cba 100644
--- a/toolchains/meta-quest.toolchain.cmake
+++ b/toolchains/meta-quest.toolchain.cmake
@@ -25,5 +25,8 @@ set(CMAKE_Fortran_COMPILER "" CACHE INTERNAL "Set Fortran compiler")
 set(USE_IMGUI OFF CACHE INTERNAL "Use imgui")
 set(USE_GLFW OFF CACHE INTERNAL "Use glfw")
 set(VK_USE_PLATFORM_ANDROID_KHR ON CACHE INTERNAL "Vulkan setting - Use platform Android")
-set(USE_CPP_WRAPPER ON CACHE INTERNAL "Use cpp wrapper")
-set(USE_OPENXR ON CACHE INTERNAL "Use OpenXr")
\ No newline at end of file
+# set(USE_CPP_WRAPPER ON CACHE INTERNAL "Use cpp wrapper")
+set(USE_OPENXR ON CACHE INTERNAL "Use OpenXr")
+
+set(CMAKE_C_COMPILER_LAUNCHER ccache CACHE INTERNAL "C cache")
+set(CMAKE_CXX_COMPILER_LAUNCHER ccache CACHE INTERNAL "C++ cache")
\ No newline at end of file
