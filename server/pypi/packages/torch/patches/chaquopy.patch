diff --git a/CMakeLists.txt b/CMakeLists.txt
index c8af5f00b5c..d16698abe6d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -22,6 +22,28 @@ if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
   message(FATAL_ERROR "In-source build are not supported")
 endif()
 
+# --------------------------------- chaquopy begin ------------------------------------
+set(BUILD_CUSTOM_PROTOBUF OFF)
+set(CMAKE_TOOLCHAIN_FILE "/home/ubuntu/workspace/android-sdk/ndk/27.1.12297006/build/cmake/android.toolchain.cmake")
+set(BUILD_TEST OFF)
+set(BUILD_BINARY OFF)
+set(BUILD_LITE_INTERPRETER OFF)
+set(TRACING_BASED OFF)
+set(USE_LIGHTWEIGHT_DISPATCH OFF)
+
+set(BUILD_MOBILE_BENCHMARK OFF)
+set(BUILD_MOBILE_TEST OFF)
+
+set(USE_CUDA OFF)
+
+set(USE_ITT OFF)
+set(USE_GFLAGS OFF)
+set(USE_OPENCV OFF)
+set(USE_MPI OFF)
+
+set(USE_OPENMP OFF)
+# --------------------------------- chaquopy end ------------------------------------
+
 # ---[ Project and semantic versioning.
 project(Torch CXX C)
 
diff --git a/setup.py b/setup.py
index a6a6db7b033..cc63c895978 100644
--- a/setup.py
+++ b/setup.py
@@ -948,7 +948,7 @@ def configure_extension_build():
     library_dirs.append(lib_path)
 
     main_compile_args = []
-    main_libraries = ["torch_python"]
+    main_libraries = ["torch_python", "torch"]
 
     main_link_args = []
     main_sources = ["torch/csrc/stub.c"]
@@ -1362,6 +1362,7 @@ def main():
                 "lib/libtorch_python.so",
                 "lib/libtorch_python.dylib",
                 "lib/libtorch_python.dll",
+                "libtorch.so",
             ]
         )
     if not BUILD_PYTHON_ONLY:
Submodule third_party/pocketfft contains modified content
diff --git a/third_party/pocketfft/pocketfft_hdronly.h b/third_party/pocketfft/pocketfft_hdronly.h
index 330c3c7..deb60c5 100644
--- a/third_party/pocketfft/pocketfft_hdronly.h
+++ b/third_party/pocketfft/pocketfft_hdronly.h
@@ -156,9 +156,15 @@ template<> struct VLEN<double> { static constexpr size_t val=2; };
 inline void *aligned_alloc(size_t align, size_t size)
   {
   // aligned_alloc() requires that the requested size is a multiple of "align"
-  void *ptr = ::aligned_alloc(align,(size+align-1)&(~(align-1)));
-  if (!ptr) throw std::bad_alloc();
-  return ptr;
+  // void *ptr = ::aligned_alloc(align,(size+align-1)&(~(align-1)));
+  // if (!ptr) throw std::bad_alloc();
+  // return ptr;
+    void *ptr = nullptr;
+    int ret = posix_memalign(&ptr, align, size);
+    if (ret != 0) {
+        throw std::bad_alloc();
+    }
+    return ptr;
   }
 inline void aligned_dealloc(void *ptr)
     { free(ptr); }
