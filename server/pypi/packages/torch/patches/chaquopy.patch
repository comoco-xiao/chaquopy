diff --git a/.gitmodules b/.gitmodules
index 36d5becb57c..9a2ad2a6bcf 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,93 +1,82 @@
 [submodule "third_party/pybind11"]
-    ignore = dirty
     path = third_party/pybind11
     url = https://github.com/pybind/pybind11.git
 [submodule "third_party/eigen"]
-    ignore = dirty
     path = third_party/eigen
     url = https://gitlab.com/libeigen/eigen.git
 [submodule "third_party/googletest"]
-    ignore = dirty
     path = third_party/googletest
     url = https://github.com/google/googletest.git
 [submodule "third_party/benchmark"]
-    ignore = dirty
     path = third_party/benchmark
     url = https://github.com/google/benchmark.git
 [submodule "third_party/protobuf"]
-    ignore = dirty
     path = third_party/protobuf
     url = https://github.com/protocolbuffers/protobuf.git
 [submodule "third_party/NNPACK"]
-    ignore = dirty
     path = third_party/NNPACK
     url = https://github.com/Maratyszcza/NNPACK.git
 [submodule "third_party/gloo"]
-    ignore = dirty
     path = third_party/gloo
     url = https://github.com/facebookincubator/gloo
 [submodule "third_party/NNPACK_deps/pthreadpool"]
-    ignore = dirty
     path = third_party/pthreadpool
     url = https://github.com/Maratyszcza/pthreadpool.git
 [submodule "third_party/NNPACK_deps/FXdiv"]
-    ignore = dirty
     path = third_party/FXdiv
     url = https://github.com/Maratyszcza/FXdiv.git
 [submodule "third_party/NNPACK_deps/FP16"]
-    ignore = dirty
     path = third_party/FP16
     url = https://github.com/Maratyszcza/FP16.git
 [submodule "third_party/NNPACK_deps/psimd"]
-    ignore = dirty
     path = third_party/psimd
     url = https://github.com/Maratyszcza/psimd.git
 [submodule "third_party/cpuinfo"]
-    ignore = dirty
+    
     path = third_party/cpuinfo
     url = https://github.com/pytorch/cpuinfo.git
 [submodule "third_party/python-peachpy"]
-    ignore = dirty
+    
     path = third_party/python-peachpy
     url = https://github.com/malfet/PeachPy.git
 [submodule "third_party/onnx"]
-    ignore = dirty
+    
     path = third_party/onnx
     url = https://github.com/onnx/onnx.git
 [submodule "third_party/sleef"]
-    ignore = dirty
+    
     path = third_party/sleef
     url = https://github.com/shibatch/sleef
 [submodule "third_party/ideep"]
-    ignore = dirty
+    
     path = third_party/ideep
     url = https://github.com/intel/ideep
 [submodule "third_party/nccl/nccl"]
-    ignore = dirty
+    
     path = third_party/nccl/nccl
     url = https://github.com/NVIDIA/nccl
 [submodule "third_party/gemmlowp/gemmlowp"]
-    ignore = dirty
+    
     path = third_party/gemmlowp/gemmlowp
     url = https://github.com/google/gemmlowp.git
 [submodule "third_party/fbgemm"]
-    ignore = dirty
+    
     path = third_party/fbgemm
     url = https://github.com/pytorch/fbgemm
 [submodule "android/libs/fbjni"]
-    ignore = dirty
+    
     path = android/libs/fbjni
     url = https://github.com/facebookincubator/fbjni.git
 [submodule "third_party/XNNPACK"]
-    ignore = dirty
+    
     path = third_party/XNNPACK
     url = https://github.com/google/XNNPACK.git
 [submodule "third_party/fmt"]
-    ignore = dirty
+    
     path = third_party/fmt
     url = https://github.com/fmtlib/fmt.git
 [submodule "third_party/tensorpipe"]
-    ignore = dirty
+    
     path = third_party/tensorpipe
     url = https://github.com/pytorch/tensorpipe.git
 [submodule "third_party/cudnn_frontend"]
diff --git a/CMakeLists.txt b/CMakeLists.txt
index c8af5f00b5c..958c1209e3a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -22,6 +22,35 @@ if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
   message(FATAL_ERROR "In-source build are not supported")
 endif()
 
+# --------------------------------- chaquopy begin ------------------------------------
+set(BUILD_CUSTOM_PROTOBUF ON)
+# set(CMAKE_TOOLCHAIN_FILE "/home/ubuntu/workspace/android-sdk/ndk/21.4.7075529/build/cmake/android.toolchain.cmake")
+set(BUILD_TEST OFF)
+set(BUILD_BINARY OFF)
+set(BUILD_LITE_INTERPRETER OFF)
+set(TRACING_BASED OFF)
+set(USE_LIGHTWEIGHT_DISPATCH OFF)
+
+set(BUILD_MOBILE_BENCHMARK OFF)
+set(BUILD_MOBILE_TEST OFF)
+
+set(USE_CUDA OFF)
+
+set(USE_ITT OFF)
+set(USE_GFLAGS OFF)
+set(USE_OPENCV OFF)
+set(USE_MPI OFF)
+
+set(USE_OPENMP OFF)
+set(BUILD_PYTHON ON)
+
+# dependencies
+set(USE_NUMPY ON)
+set(USE_VULKAN OFF)
+# set(BUILD_MOBILE_AUTOGRAD ON)
+
+# --------------------------------- chaquopy end ------------------------------------
+
 # ---[ Project and semantic versioning.
 project(Torch CXX C)
 
@@ -663,7 +692,7 @@ string(APPEND CMAKE_CUDA_FLAGS " -Xfatbin -compress-all")
 if(ANDROID
    OR IOS
    OR DEFINED ENV{BUILD_PYTORCH_MOBILE_WITH_HOST_TOOLCHAIN})
-  set(INTERN_BUILD_MOBILE ON)
+  # set(INTERN_BUILD_MOBILE ON)
   message(WARNING "INTERN_BUILD_MOBILE is on, disabling BUILD_LAZY_TS_BACKEND")
   set(BUILD_LAZY_TS_BACKEND OFF)
 
@@ -715,10 +744,12 @@ if(INTERN_BUILD_MOBILE)
   else()
     set(INTERN_DISABLE_AUTOGRAD ON)
   endif()
-  set(BUILD_PYTHON OFF)
+  # todo xiao
+  # set(BUILD_PYTHON OFF)
   set(BUILD_FUNCTORCH OFF)
   set(USE_DISTRIBUTED OFF)
-  set(NO_API ON)
+  # todo xiao
+  # set(NO_API ON)
   set(USE_FBGEMM OFF)
   set(INTERN_DISABLE_ONNX ON)
   if(USE_BLAS)
@@ -855,6 +886,11 @@ endif()
 # The only solution is to include(cmake/Dependencies.cmake), and defer the
 # aotriton build decision later.
 
+set(Python_LIBRARIES ${PYTHON_LIBRARIES} CACHE PATH "Python include directory" FORCE)
+set(Python_INCLUDE_DIRS ${PYTHON_INCLUDE_DIRS} CACHE FILEPATH "Python library" FORCE)
+message(---------------------------Python_LIBRARIES = ${Python_LIBRARIES})
+message(---------------------------Python_INCLUDE_DIRS = ${Python_INCLUDE_DIRS})
+
 include(cmake/Dependencies.cmake)
 
 cmake_dependent_option(
@@ -1355,6 +1391,12 @@ if(BUILD_JNI)
   add_subdirectory(android/pytorch_android)
 endif()
 
+# todo xiao
+# set(Python_LIBRARIES ${PYTHON_LIBRARIES})
+# set(Python_INCLUDE_DIRS ${PYTHON_INCLUDE_DIRS})
+# message(---------------------------Python_LIBRARIES = ${Python_LIBRARIES})
+# message(---------------------------Python_INCLUDE_DIRS = ${Python_INCLUDE_DIRS})
+
 include(cmake/Summary.cmake)
 caffe2_print_configuration_summary()
 
diff --git a/aten/src/ATen/CMakeLists.txt b/aten/src/ATen/CMakeLists.txt
index f0868ea0489..91dbbbff8cb 100644
--- a/aten/src/ATen/CMakeLists.txt
+++ b/aten/src/ATen/CMakeLists.txt
@@ -397,7 +397,8 @@ if(UNIX)
     add_definitions(-DHAVE_MMAP=1)
   endif(HAVE_MMAP)
   # done for lseek: https://www.gnu.org/software/libc/manual/html_node/File-Position-Primitive.html
-  add_definitions(-D_FILE_OFFSET_BITS=64)
+  # Chaquopy: see https://android.googlesource.com/platform/bionic/+/master/docs/32-bit-abi.md
+  # add_definitions(-D_FILE_OFFSET_BITS=64)
   CHECK_FUNCTION_EXISTS(shm_open HAVE_SHM_OPEN)
   if(HAVE_SHM_OPEN)
     add_definitions(-DHAVE_SHM_OPEN=1)
diff --git a/c10/macros/Macros.h b/c10/macros/Macros.h
index 919eb6c8567..bc4eacda0a3 100644
--- a/c10/macros/Macros.h
+++ b/c10/macros/Macros.h
@@ -433,6 +433,7 @@ __host__ __device__
 
 #if defined(__ANDROID__)
 #define C10_ANDROID 1
+// Chaquopy: this disables things required by the Python build.
 #define C10_MOBILE 1
 #elif (                   \
     defined(__APPLE__) && \
diff --git a/cmake/Dependencies.cmake b/cmake/Dependencies.cmake
index 1813f4418a2..e4e34510665 100644
--- a/cmake/Dependencies.cmake
+++ b/cmake/Dependencies.cmake
@@ -844,11 +844,32 @@ if(NOT Python_EXECUTABLE)
 endif()
 
 if(BUILD_PYTHON)
+  message(+++++++++++++++++++++++++++++++++++++++++++Dependencies---Development.Module = ${Development.Module})
   set(PYTHON_COMPONENTS Development.Module)
   if(USE_NUMPY)
     list(APPEND PYTHON_COMPONENTS NumPy)
   endif()
-  find_package(Python COMPONENTS Interpreter OPTIONAL_COMPONENTS ${PYTHON_COMPONENTS})
+  find_package(Python COMPONENTS Interpreter OPTIONAL_COMPONENTS Development ${PYTHON_COMPONENTS})
+  # 打印核心信息
+message(STATUS "===== Python 配置信息 =====")
+message(STATUS "解释器路径: ${Python_EXECUTABLE}")
+message(STATUS "解释器是否找到: ${Python_Interpreter_FOUND}")
+
+# 打印可选组件状态
+message(STATUS "Development 组件状态: ${Python_Development_FOUND}")
+message(STATUS "NumPy 组件状态: ${Python_NumPy_FOUND}")
+
+# 打印开发组件路径（如果找到）
+if(Python_Development_FOUND)
+    message(STATUS "头文件目录: ${Python_INCLUDE_DIRS}")
+    message(STATUS "库文件路径: ${Python_LIBRARIES}")
+endif()
+
+# 打印 NumPy 路径（如果找到）
+if(Python_NumPy_FOUND)
+    message(STATUS "NumPy 头文件目录: ${Python_NumPy_INCLUDE_DIRS}")
+endif()
+message(STATUS "============================")
 else()
   find_package(Python COMPONENTS Interpreter)
 endif()
@@ -863,23 +884,26 @@ if(${Python_VERSION} VERSION_LESS 3.8)
 endif()
 
 # ---[ Python + Numpy
+message(+++++++++++++++++++++++++++++++++++++++++++Dependencies---1---BUILD_PYTHON = ${BUILD_PYTHON})
 if(BUILD_PYTHON)
+  message(STATUS "Python_Development.Module_FOUND状态: ${Python_Development.Module_FOUND}")
   if(Python_Development.Module_FOUND)
-    if(USE_NUMPY)
-      if(NOT Python_NumPy_FOUND)
-        message(WARNING "NumPy could not be found. Not building with NumPy. Suppress this warning with -DUSE_NUMPY=OFF")
-        caffe2_update_option(USE_NUMPY OFF)
-      else()
-        caffe2_update_option(USE_NUMPY ON)
-      endif()
-    endif()
-    # Observers are required in the python build
-    caffe2_update_option(USE_OBSERVERS ON)
-  else()
-    message(WARNING "Python dependencies not met. Not compiling with python. Suppress this warning with -DBUILD_PYTHON=OFF")
-    caffe2_update_option(BUILD_PYTHON OFF)
+#     if(USE_NUMPY)
+#       if(NOT Python_NumPy_FOUND)
+#         message(WARNING "NumPy could not be found. Not building with NumPy. Suppress this warning with -DUSE_NUMPY=OFF")
+#         caffe2_update_option(USE_NUMPY OFF)
+#       else()
+#         caffe2_update_option(USE_NUMPY ON)
+#       endif()
+#     endif()
+#     # Observers are required in the python build
+#     caffe2_update_option(USE_OBSERVERS ON)
+#   else()
+#     message(WARNING "Python dependencies not met. Not compiling with python. Suppress this warning with -DBUILD_PYTHON=OFF")
+#     caffe2_update_option(BUILD_PYTHON OFF)
   endif()
 endif()
+message(+++++++++++++++++++++++++++++++++++++++++++Dependencies---2---BUILD_PYTHON = ${BUILD_PYTHON})
 
 # ---[ pybind11
 if(USE_SYSTEM_PYBIND11)
@@ -898,9 +922,11 @@ else()
             FILES_MATCHING PATTERN "*.h")
 endif()
 message(STATUS "pybind11 include dirs: " "${pybind11_INCLUDE_DIRS}")
-add_library(pybind::pybind11 INTERFACE IMPORTED)
-target_include_directories(pybind::pybind11 SYSTEM INTERFACE ${pybind11_INCLUDE_DIRS})
-target_link_libraries(pybind::pybind11 INTERFACE Python::Module)
+# todo xiao
+# add_library(pybind::pybind11 INTERFACE IMPORTED)
+# target_include_directories(pybind::pybind11 SYSTEM INTERFACE ${pybind11_INCLUDE_DIRS})
+# target_link_libraries(pybind::pybind11 INTERFACE Python::Module)
+include_directories(SYSTEM ${pybind11_INCLUDE_DIRS})
 
 # ---[ OpenTelemetry API headers
 find_package(OpenTelemetryApi)
@@ -1290,7 +1316,8 @@ if(CAFFE2_CMAKE_BUILDING_WITH_MAIN_REPO AND NOT INTERN_DISABLE_ONNX)
     # In mobile build we care about code size, and so we need drop
     # everything (e.g. checker) in onnx but the pb definition.
     if(ANDROID OR IOS)
-      caffe2_interface_library(onnx_proto onnx_library)
+      # caffe2_interface_library(onnx_proto onnx_library)
+      caffe2_interface_library(onnx onnx_library)  # Chaquopy: `onnx` was `onnx_proto`.
     else()
       caffe2_interface_library(onnx onnx_library)
     endif()
@@ -1497,7 +1524,8 @@ if(NOT INTERN_BUILD_MOBILE)
       add_definitions(-DHAVE_MMAP=1)
     endif(HAVE_MMAP)
     # done for lseek: https://www.gnu.org/software/libc/manual/html_node/File-Position-Primitive.html
-    add_definitions(-D_FILE_OFFSET_BITS=64)
+    # Chaquopy: see https://android.googlesource.com/platform/bionic/+/master/docs/32-bit-abi.md
+    # add_definitions(-D_FILE_OFFSET_BITS=64)
     CHECK_FUNCTION_EXISTS(shm_open HAVE_SHM_OPEN)
     if(HAVE_SHM_OPEN)
       add_definitions(-DHAVE_SHM_OPEN=1)
diff --git a/functorch/CMakeLists.txt b/functorch/CMakeLists.txt
index bdfa4bfe455..a47e9948e27 100644
--- a/functorch/CMakeLists.txt
+++ b/functorch/CMakeLists.txt
@@ -22,7 +22,8 @@ else()
   # functorch cannot use the alias to build on windows
   target_link_libraries(${PROJECT_NAME} PRIVATE torch torch_python)
 endif()
-target_link_libraries(${PROJECT_NAME} PRIVATE pybind::pybind11)
+# todo xiao
+# target_link_libraries(${PROJECT_NAME} PRIVATE pybind::pybind11)
 
 set_target_properties(${PROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY
       ${CMAKE_BINARY_DIR}/functorch)
diff --git a/setup.py b/setup.py
index a6a6db7b033..54cb93ee6b4 100644
--- a/setup.py
+++ b/setup.py
@@ -483,11 +483,13 @@ def build_deps():
     check_submodules()
     check_pydep("yaml", "pyyaml")
     build_python = not BUILD_LIBTORCH_WHL
+    print(f"++++++++++++++++++++++++++++++++++++---build_python = {build_python}")
+    print(f"++++++++++++++++++++++++++++++++++++---cmake_python_library = {cmake_python_library}")
     build_pytorch(
         version=version,
         cmake_python_library=cmake_python_library,
         build_python=build_python,
-        rerun_cmake=RERUN_CMAKE,
+        rerun_cmake=True,
         cmake_only=CMAKE_ONLY,
         cmake=cmake,
     )
@@ -1167,7 +1169,15 @@ def main():
         long_description = f.read()
 
     version_range_max = max(sys.version_info[1], 13) + 1
+    
+    # Chaquopy: see package_data below.
+    if os.path.exists("chaquopy"):
+        shutil.rmtree("chaquopy")
+    os.mkdir("chaquopy")
+    os.symlink("../torch/lib", "chaquopy/lib")
+    
     torch_package_data = [
+        'lib/libtorch_global_deps.so',  # Chaquopy: see comment at top of package_data.
         "py.typed",
         "bin/*",
         "test/*",
@@ -1416,6 +1426,9 @@ def main():
     ]
     package_data = {
         "torch": torch_package_data,
+        'chaquopy': [
+            'lib/*.so*'  # See exclude_package_data below.
+        ],
     }
 
     if not BUILD_LIBTORCH_WHL:
@@ -1435,7 +1448,7 @@ def main():
         long_description_content_type="text/markdown",
         ext_modules=extensions,
         cmdclass=cmdclass,
-        packages=packages,
+        packages=packages + ["chaquopy"],
         entry_points=entry_points,
         install_requires=install_requires,
         extras_require=extras_require,
@@ -1445,6 +1458,9 @@ def main():
         author="PyTorch Team",
         author_email="packages@pytorch.org",
         python_requires=f">={python_min_version_str}",
+        
+        exclude_package_data={'chaquopy': ['lib/libtorch_global_deps.so']},
+        
         # PyPI package information.
         classifiers=[
             "Development Status :: 5 - Production/Stable",
Submodule third_party/onnx contains modified content
Submodule third_party/pybind11 contains modified content
diff --git a/third_party/onnx/third_party/pybind11/CMakeLists.txt b/third_party/onnx/third_party/pybind11/CMakeLists.txt
index 7db1bf66..21e0588b 100644
--- a/third_party/onnx/third_party/pybind11/CMakeLists.txt
+++ b/third_party/onnx/third_party/pybind11/CMakeLists.txt
@@ -26,10 +26,12 @@ if(_pybind11_cmp0148)
   unset(_pybind11_cmp0148)
 endif()
 
+message(---------------------third_party-Onnx-third_party-pybind11-CMakeLists--1---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 # Avoid infinite recursion if tests include this as a subdirectory
 if(DEFINED PYBIND11_MASTER_PROJECT)
   return()
 endif()
+message(---------------------third_party-Onnx-third_party-pybind11-CMakeLists--2---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 
 # Extract project version from source
 file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/include/pybind11/detail/common.h"
Submodule third_party/pocketfft contains modified content
diff --git a/third_party/pocketfft/pocketfft_hdronly.h b/third_party/pocketfft/pocketfft_hdronly.h
index 330c3c7..deb60c5 100644
--- a/third_party/pocketfft/pocketfft_hdronly.h
+++ b/third_party/pocketfft/pocketfft_hdronly.h
@@ -156,9 +156,15 @@ template<> struct VLEN<double> { static constexpr size_t val=2; };
 inline void *aligned_alloc(size_t align, size_t size)
   {
   // aligned_alloc() requires that the requested size is a multiple of "align"
-  void *ptr = ::aligned_alloc(align,(size+align-1)&(~(align-1)));
-  if (!ptr) throw std::bad_alloc();
-  return ptr;
+  // void *ptr = ::aligned_alloc(align,(size+align-1)&(~(align-1)));
+  // if (!ptr) throw std::bad_alloc();
+  // return ptr;
+    void *ptr = nullptr;
+    int ret = posix_memalign(&ptr, align, size);
+    if (ret != 0) {
+        throw std::bad_alloc();
+    }
+    return ptr;
   }
 inline void aligned_dealloc(void *ptr)
     { free(ptr); }
Submodule third_party/protobuf contains modified content
diff --git a/third_party/protobuf/cmake/libprotobuf.cmake b/third_party/protobuf/cmake/libprotobuf.cmake
index 0c12596c2..81752360a 100644
--- a/third_party/protobuf/cmake/libprotobuf.cmake
+++ b/third_party/protobuf/cmake/libprotobuf.cmake
@@ -118,6 +118,11 @@ target_link_libraries(libprotobuf ${CMAKE_THREAD_LIBS_INIT})
 if(protobuf_WITH_ZLIB)
   target_link_libraries(libprotobuf ${ZLIB_LIBRARIES})
 endif()
+
+# todo xiao
+# Chaquopy: used by src/google/protobuf/stubs/common.cc
+# target_link_libraries(libprotobuf INTERFACE log)
+
 if(protobuf_LINK_LIBATOMIC)
   target_link_libraries(libprotobuf atomic)
 endif()
Submodule third_party/pybind11 contains modified content
diff --git a/third_party/pybind11/CMakeLists.txt b/third_party/pybind11/CMakeLists.txt
index f53aa209..9c20f150 100644
--- a/third_party/pybind11/CMakeLists.txt
+++ b/third_party/pybind11/CMakeLists.txt
@@ -26,10 +26,12 @@ if(_pybind11_cmp0148)
   unset(_pybind11_cmp0148)
 endif()
 
+message(---------------------third_party-pybind11-CMakeLists--1---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 # Avoid infinite recursion if tests include this as a subdirectory
 if(DEFINED PYBIND11_MASTER_PROJECT)
   return()
 endif()
+message(---------------------third_party-pybind11-CMakeLists--2---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 
 # Extract project version from source
 file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/include/pybind11/detail/common.h"
Submodule third_party/sleef contains modified content
diff --git a/third_party/sleef/Configure.cmake b/third_party/sleef/Configure.cmake
index 19a153f..bcb96f6 100644
--- a/third_party/sleef/Configure.cmake
+++ b/third_party/sleef/Configure.cmake
@@ -115,8 +115,10 @@ elseif(SLEEF_TARGET_PROCESSOR MATCHES "aarch64|arm64")
 
 elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "arm")
   set(SLEEF_ARCH_AARCH32 ON CACHE INTERNAL "True for Aarch32 architecture.")
-  set(COMPILER_SUPPORTS_NEON32 1)
-  set(COMPILER_SUPPORTS_NEON32VFPV4 1)
+  # set(COMPILER_SUPPORTS_NEON32 1)
+  # set(COMPILER_SUPPORTS_NEON32VFPV4 1)
+  set(COMPILER_SUPPORTS_NEON32 0)  # Chaquopy: changed from 1 to 0
+  set(COMPILER_SUPPORTS_NEON32VFPV4 0)  # Chaquopy: changed from 1 to 0
 
   set(CLANG_FLAGS_ENABLE_PURECFMA_SCALAR "-mfpu=vfpv4")
 elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc|ppc)64")
@@ -133,7 +135,8 @@ elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "riscv64")
 endif()
 
 set(COMPILER_SUPPORTS_PUREC_SCALAR 1)
-set(COMPILER_SUPPORTS_PURECFMA_SCALAR 1)
+# set(COMPILER_SUPPORTS_PURECFMA_SCALAR 1)
+set(COMPILER_SUPPORTS_PURECFMA_SCALAR 0)  # Chaquopy: changed from 1 to 0
 
 # Compiler feature detection
 
diff --git a/tools/setup_helpers/cmake.py b/tools/setup_helpers/cmake.py
index 84e4dad32d3..f9e36c8fff7 100644
--- a/tools/setup_helpers/cmake.py
+++ b/tools/setup_helpers/cmake.py
@@ -305,11 +305,30 @@ class CMake:
             )
             sys.exit(1)
         build_options.update(cmake__options)
-
+        
+        # Chaquopy: see https://github.com/shibatch/sleef/issues/249
+        # build_sleef_native = os.path.abspath("build-sleef-native")
+        # if not os.path.exists(build_sleef_native):  # For rerunning with build-wheel.py --no-unpack
+        #     os.mkdir(build_sleef_native)
+        #     sleef_env = os.environ.copy()
+        #     for name in ["AR", "ARFLAGS", "AS", "CC", "CFLAGS", "CPP", "CPPFLAGS", "CXX",
+        #                  "CXXFLAGS", "F77", "F90", "FARCH", "FC", "LD", "LDFLAGS", "LDSHARED",
+        #                  "NM", "RANLIB", "READELF", "STRIP"]:
+        #         sleef_env.pop(name, None)
+        #     kwargs = dict(cwd=build_sleef_native, env=sleef_env)
+        #     check_call(["cmake", "../third_party/sleef"], **kwargs)
+        #     check_call(["cmake", "--build", "." , "--", "-j", str(os.cpu_count())], **kwargs)
+            
         CMake.defines(
             args,
-            Python_EXECUTABLE=sys.executable,
+            # Python_EXECUTABLE=sys.executable,
+            CAFFE2_CUSTOM_PROTOC_EXECUTABLE=which("protoc"),
+            ONNX_CUSTOM_PROTOC_EXECUTABLE=which("protoc"),
+            # BLAS="OpenBLAS",
+            # NATIVE_BUILD_DIR=build_sleef_native,
             TORCH_BUILD_VERSION=version,
+            # USE_CUDA="0",
+            # USE_VULKAN="0",  # Disable for now to simplify the build.
             **build_options,
         )
 
diff --git a/torch/CMakeLists.txt b/torch/CMakeLists.txt
index b123023d2fd..a7d95309d4f 100644
--- a/torch/CMakeLists.txt
+++ b/torch/CMakeLists.txt
@@ -9,6 +9,7 @@ if(NOT CAFFE2_CMAKE_BUILDING_WITH_MAIN_REPO)
   set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
 endif()
 
+message(+-+-+-+-+-+-+-+-+-+-+-+-+-+--+-+-+-+----------------BUILD_PYTHON = ${BUILD_PYTHON})
 if(NOT BUILD_PYTHON)
   return()
 endif()
@@ -70,6 +71,8 @@ set(TORCH_PYTHON_INCLUDE_DIRECTORIES
     ${TORCH_ROOT}/third_party/kineto/libkineto/include
     ${TORCH_ROOT}/third_party/cpp-httplib
     ${TORCH_ROOT}/third_party/nlohmann/include
+    # todo xiao
+    ${pybind11_INCLUDE_DIRS}
 
     ${TORCH_SRC_DIR}/csrc
     ${TORCH_SRC_DIR}/csrc/api/include
@@ -79,11 +82,12 @@ set(TORCH_PYTHON_INCLUDE_DIRECTORIES
 list(APPEND TORCH_PYTHON_INCLUDE_DIRECTORIES ${LIBSHM_SRCDIR})
 
 set(TORCH_PYTHON_LINK_LIBRARIES
-    Python::Module
-    pybind::pybind11
-    opentelemetry::api
-    httplib
-    nlohmann
+# todo xiao
+    # Python::Module
+    # pybind::pybind11
+    # opentelemetry::api
+    # httplib
+    # nlohmann
     shm
     fmt::fmt-header-only
     ATEN_CPU_FILES_GEN_LIB)
@@ -324,7 +328,8 @@ if(CAFFE2_USE_MKL AND BUILD_LIBTORCHLESS)
   target_link_libraries(torch_python PRIVATE caffe2::mkl)
 endif()
 
-add_dependencies(torch_python onnx_proto)
+# todo xiao
+# add_dependencies(torch_python onnx_proto)
 # Avoid numpy for the DEPLOY build
 if(USE_NUMPY)
   target_link_libraries(torch_python PRIVATE Python::NumPy)
@@ -482,19 +487,20 @@ add_dependencies(torch_python gen_torch_version)
 
 # Skip building this library under MacOS, since it is currently failing to build on Mac
 # Github issue #61930
-if(NOT ${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
-  # Add Android Nnapi delegate library
-  add_library(nnapi_backend SHARED
-          ${TORCH_SRC_DIR}/csrc/jit/backends/nnapi/nnapi_backend_lib.cpp
-          ${TORCH_SRC_DIR}/csrc/jit/backends/nnapi/nnapi_backend_preprocess.cpp
-          )
-  # Pybind11 requires explicit linking of the torch_python library
-  if(BUILD_LIBTORCHLESS)
-    target_link_libraries(nnapi_backend PRIVATE ${TORCH_LIB} torch_python pybind::pybind11)
-  else()
-    target_link_libraries(nnapi_backend PRIVATE torch torch_python pybind::pybind11)
-  endif()
-endif()
+# todo xiao
+# if(NOT ${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
+#   # Add Android Nnapi delegate library
+#   add_library(nnapi_backend SHARED
+#           ${TORCH_SRC_DIR}/csrc/jit/backends/nnapi/nnapi_backend_lib.cpp
+#           ${TORCH_SRC_DIR}/csrc/jit/backends/nnapi/nnapi_backend_preprocess.cpp
+#           )
+#   # Pybind11 requires explicit linking of the torch_python library
+#   if(BUILD_LIBTORCHLESS)
+#     target_link_libraries(nnapi_backend PRIVATE ${TORCH_LIB} torch_python pybind::pybind11)
+#   else()
+#     target_link_libraries(nnapi_backend PRIVATE torch torch_python pybind::pybind11)
+#   endif()
+# endif()
 
 set(TORCH_PYTHON_COMPILE_OPTIONS ${TORCH_PYTHON_COMPILE_OPTIONS} PARENT_SCOPE)
 set(TORCH_PYTHON_LINK_FLAGS ${TORCH_PYTHON_LINK_FLAGS} PARENT_SCOPE)
diff --git a/torch/_utils_internal.py b/torch/_utils_internal.py
index f58eb93d86d..b72d68cf59b 100644
--- a/torch/_utils_internal.py
+++ b/torch/_utils_internal.py
@@ -63,7 +63,8 @@ def prepare_multiprocessing_environment(path: str) -> None:
 
 
 def resolve_library_path(path: str) -> str:
-    return os.path.realpath(path)
+    # return os.path.realpath(path)
+    return os.path.abspath(path)  # Chaquopy: was realpath. This patch is no longer necessary on newer versions of Chaquopy, which call realpath early in the importer.
 
 
 def throw_abstract_impl_not_imported_error(opname, module, context):
diff --git a/torch/lib/libshm/manager.cpp b/torch/lib/libshm/manager.cpp
index 6aa70d8c211..4ef34873977 100644
--- a/torch/lib/libshm/manager.cpp
+++ b/torch/lib/libshm/manager.cpp
@@ -70,7 +70,8 @@ void print_init_message(std::string_view message) {
 }
 
 bool object_exists(const char* name) {
-  int fd = shm_open(name, O_RDONLY, 0);
+  // int fd = shm_open(name, O_RDONLY, 0);
+  int fd = -1;   // Chaquopy: removed shm_open, which isn't supported on Android.
   if (fd >= 0) {
     close(fd);
     return true;
@@ -180,7 +181,8 @@ int main(int argc, char* argv[]) {
 
   for (auto& obj_name : used_objects) {
     DEBUG("freeing %s", obj_name.c_str());
-    shm_unlink(obj_name.c_str());
+    // shm_unlink(obj_name.c_str());
+    // Chaquopy: removed shm_unlink, which isn't supported on Android.
   }
 
   // Clean up file descriptors
