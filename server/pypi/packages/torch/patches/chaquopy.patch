Submodule third_party/onnx contains modified content
Submodule third_party/pybind11 contains modified content
diff --git a/third_party/onnx/third_party/pybind11/CMakeLists.txt b/third_party/onnx/third_party/pybind11/CMakeLists.txt
index 7db1bf66..21e0588b 100644
--- a/third_party/onnx/third_party/pybind11/CMakeLists.txt
+++ b/third_party/onnx/third_party/pybind11/CMakeLists.txt
@@ -26,10 +26,12 @@ if(_pybind11_cmp0148)
   unset(_pybind11_cmp0148)
 endif()
 
+message(---------------------third_party-Onnx-third_party-pybind11-CMakeLists--1---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 # Avoid infinite recursion if tests include this as a subdirectory
 if(DEFINED PYBIND11_MASTER_PROJECT)
   return()
 endif()
+message(---------------------third_party-Onnx-third_party-pybind11-CMakeLists--2---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 
 # Extract project version from source
 file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/include/pybind11/detail/common.h"
Submodule third_party/pocketfft contains modified content
diff --git a/third_party/pocketfft/pocketfft_hdronly.h b/third_party/pocketfft/pocketfft_hdronly.h
index 330c3c7..deb60c5 100644
--- a/third_party/pocketfft/pocketfft_hdronly.h
+++ b/third_party/pocketfft/pocketfft_hdronly.h
@@ -156,9 +156,15 @@ template<> struct VLEN<double> { static constexpr size_t val=2; };
 inline void *aligned_alloc(size_t align, size_t size)
   {
   // aligned_alloc() requires that the requested size is a multiple of "align"
-  void *ptr = ::aligned_alloc(align,(size+align-1)&(~(align-1)));
-  if (!ptr) throw std::bad_alloc();
-  return ptr;
+  // void *ptr = ::aligned_alloc(align,(size+align-1)&(~(align-1)));
+  // if (!ptr) throw std::bad_alloc();
+  // return ptr;
+    void *ptr = nullptr;
+    int ret = posix_memalign(&ptr, align, size);
+    if (ret != 0) {
+        throw std::bad_alloc();
+    }
+    return ptr;
   }
 inline void aligned_dealloc(void *ptr)
     { free(ptr); }
Submodule third_party/protobuf contains modified content
diff --git a/third_party/protobuf/cmake/libprotobuf.cmake b/third_party/protobuf/cmake/libprotobuf.cmake
index 0c12596c2..81752360a 100644
--- a/third_party/protobuf/cmake/libprotobuf.cmake
+++ b/third_party/protobuf/cmake/libprotobuf.cmake
@@ -118,6 +118,11 @@ target_link_libraries(libprotobuf ${CMAKE_THREAD_LIBS_INIT})
 if(protobuf_WITH_ZLIB)
   target_link_libraries(libprotobuf ${ZLIB_LIBRARIES})
 endif()
+
+# todo xiao
+# Chaquopy: used by src/google/protobuf/stubs/common.cc
+# target_link_libraries(libprotobuf INTERFACE log)
+
 if(protobuf_LINK_LIBATOMIC)
   target_link_libraries(libprotobuf atomic)
 endif()
Submodule third_party/pybind11 contains modified content
diff --git a/third_party/pybind11/CMakeLists.txt b/third_party/pybind11/CMakeLists.txt
index f53aa209..9c20f150 100644
--- a/third_party/pybind11/CMakeLists.txt
+++ b/third_party/pybind11/CMakeLists.txt
@@ -26,10 +26,12 @@ if(_pybind11_cmp0148)
   unset(_pybind11_cmp0148)
 endif()
 
+message(---------------------third_party-pybind11-CMakeLists--1---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 # Avoid infinite recursion if tests include this as a subdirectory
 if(DEFINED PYBIND11_MASTER_PROJECT)
   return()
 endif()
+message(---------------------third_party-pybind11-CMakeLists--2---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 
 # Extract project version from source
 file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/include/pybind11/detail/common.h"
Submodule third_party/sleef contains modified content
diff --git a/third_party/sleef/Configure.cmake b/third_party/sleef/Configure.cmake
index 19a153f..bcb96f6 100644
--- a/third_party/sleef/Configure.cmake
+++ b/third_party/sleef/Configure.cmake
@@ -115,8 +115,10 @@ elseif(SLEEF_TARGET_PROCESSOR MATCHES "aarch64|arm64")
 
 elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "arm")
   set(SLEEF_ARCH_AARCH32 ON CACHE INTERNAL "True for Aarch32 architecture.")
-  set(COMPILER_SUPPORTS_NEON32 1)
-  set(COMPILER_SUPPORTS_NEON32VFPV4 1)
+  # set(COMPILER_SUPPORTS_NEON32 1)
+  # set(COMPILER_SUPPORTS_NEON32VFPV4 1)
+  set(COMPILER_SUPPORTS_NEON32 0)  # Chaquopy: changed from 1 to 0
+  set(COMPILER_SUPPORTS_NEON32VFPV4 0)  # Chaquopy: changed from 1 to 0
 
   set(CLANG_FLAGS_ENABLE_PURECFMA_SCALAR "-mfpu=vfpv4")
 elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc|ppc)64")
@@ -133,7 +135,8 @@ elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "riscv64")
 endif()
 
 set(COMPILER_SUPPORTS_PUREC_SCALAR 1)
-set(COMPILER_SUPPORTS_PURECFMA_SCALAR 1)
+# set(COMPILER_SUPPORTS_PURECFMA_SCALAR 1)
+set(COMPILER_SUPPORTS_PURECFMA_SCALAR 0)  # Chaquopy: changed from 1 to 0
 
 # Compiler feature detection
 
