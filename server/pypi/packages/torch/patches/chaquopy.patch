diff --git a/CMakeLists.txt b/CMakeLists.txt
index 958c1209e3a..4cee7ef8a55 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -23,29 +23,24 @@ if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
 endif()
 
 # --------------------------------- chaquopy begin ------------------------------------
-set(BUILD_CUSTOM_PROTOBUF ON)
+# set(BUILD_CUSTOM_PROTOBUF ON)
 # set(CMAKE_TOOLCHAIN_FILE "/home/ubuntu/workspace/android-sdk/ndk/21.4.7075529/build/cmake/android.toolchain.cmake")
 set(BUILD_TEST OFF)
-set(BUILD_BINARY OFF)
 set(BUILD_LITE_INTERPRETER OFF)
-set(TRACING_BASED OFF)
 set(USE_LIGHTWEIGHT_DISPATCH OFF)
 
-set(BUILD_MOBILE_BENCHMARK OFF)
-set(BUILD_MOBILE_TEST OFF)
-
 set(USE_CUDA OFF)
 
-set(USE_ITT OFF)
-set(USE_GFLAGS OFF)
+# set(USE_ITT OFF)
+# set(USE_GFLAGS OFF)
 set(USE_OPENCV OFF)
-set(USE_MPI OFF)
+# set(USE_MPI OFF)
 
-set(USE_OPENMP OFF)
+# set(USE_OPENMP OFF)
 set(BUILD_PYTHON ON)
 
 # dependencies
-set(USE_NUMPY ON)
+# set(USE_NUMPY ON)
 set(USE_VULKAN OFF)
 # set(BUILD_MOBILE_AUTOGRAD ON)
 
@@ -749,7 +744,7 @@ if(INTERN_BUILD_MOBILE)
   set(BUILD_FUNCTORCH OFF)
   set(USE_DISTRIBUTED OFF)
   # todo xiao
-  # set(NO_API ON)
+  set(NO_API ON)
   set(USE_FBGEMM OFF)
   set(INTERN_DISABLE_ONNX ON)
   if(USE_BLAS)
diff --git a/c10/macros/Macros.h b/c10/macros/Macros.h
index 6146255b5d9..d6799b21229 100644
--- a/c10/macros/Macros.h
+++ b/c10/macros/Macros.h
@@ -435,7 +435,7 @@ __host__ __device__
 #define C10_ANDROID 1
 // todo xiao
 // Chaquopy: this disables things required by the Python build.
-#define C10_MOBILE 1
+// #define C10_MOBILE 1
 #elif (                   \
     defined(__APPLE__) && \
     (TARGET_IPHONE_SIMULATOR || TARGET_OS_SIMULATOR || TARGET_OS_IPHONE))
diff --git a/cmake/Dependencies.cmake b/cmake/Dependencies.cmake
index 2da257b9483..8a1c519f1d3 100644
--- a/cmake/Dependencies.cmake
+++ b/cmake/Dependencies.cmake
@@ -33,6 +33,9 @@ macro(enable_ubsan)
   endif()
 endmacro()
 
+message(-------------------------cmake path = ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
+list(PREPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
+
 # ---[ CUDA
 if(USE_CUDA)
   # public/*.cmake uses CAFFE2_USE_*
@@ -910,6 +913,17 @@ add_library(pybind::pybind11 INTERFACE IMPORTED)
 target_include_directories(pybind::pybind11 SYSTEM INTERFACE ${pybind11_INCLUDE_DIRS})
 target_link_libraries(pybind::pybind11 INTERFACE Python::Module)
 
+# todo xiao
+# message(STATUS "----------------------1---Successfully included pybind11")
+# # add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/pybind11)
+# include(pybind11)
+# message(STATUS "----------------------2---Successfully included pybind11")
+# # add_library(pybind::pybind11 ALIAS pybind11::pybind11)
+
+# message(STATUS "----------------------3---Successfully included pybind11")
+# target_link_libraries(pybind11::pybind11 INTERFACE Python::Module)
+# message(STATUS "----------------------4---Successfully included pybind11")
+
 # ---[ OpenTelemetry API headers
 find_package(OpenTelemetryApi)
 if(NOT OpenTelemetryApi_FOUND)
diff --git a/cmake/pybind11.cmake b/cmake/pybind11.cmake
index 1cf1a77c877..d883c53875b 100644
--- a/cmake/pybind11.cmake
+++ b/cmake/pybind11.cmake
@@ -6,7 +6,6 @@ include(FetchContent)
 FetchContent_Declare(
   pybind11
   GIT_REPOSITORY https://github.com/pybind/pybind11.git
-  GIT_TAG smart_holder
   GIT_SHALLOW TRUE
   GIT_PROGRESS TRUE
 )
Submodule third_party/flatbuffers contains modified content
diff --git a/third_party/flatbuffers/android/.project b/third_party/flatbuffers/android/.project
index 3ed7298f..17ddcb3e 100644
--- a/third_party/flatbuffers/android/.project
+++ b/third_party/flatbuffers/android/.project
@@ -1,12 +1,18 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <projectDescription>
-	<name>FlatBufferTest</name>
+	<name>FlatbuffersTest-android</name>
 	<comment></comment>
 	<projects>
 	</projects>
 	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
 	</buildSpec>
 	<natures>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
 	</natures>
 	<filteredResources>
 		<filter>
Submodule third_party/onnx contains modified content
Submodule third_party/pybind11 contains modified content
diff --git a/third_party/onnx/third_party/pybind11/CMakeLists.txt b/third_party/onnx/third_party/pybind11/CMakeLists.txt
index 7db1bf66..21e0588b 100644
--- a/third_party/onnx/third_party/pybind11/CMakeLists.txt
+++ b/third_party/onnx/third_party/pybind11/CMakeLists.txt
@@ -26,10 +26,12 @@ if(_pybind11_cmp0148)
   unset(_pybind11_cmp0148)
 endif()
 
+message(---------------------third_party-Onnx-third_party-pybind11-CMakeLists--1---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 # Avoid infinite recursion if tests include this as a subdirectory
 if(DEFINED PYBIND11_MASTER_PROJECT)
   return()
 endif()
+message(---------------------third_party-Onnx-third_party-pybind11-CMakeLists--2---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 
 # Extract project version from source
 file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/include/pybind11/detail/common.h"
Submodule third_party/pocketfft contains modified content
diff --git a/third_party/pocketfft/pocketfft_hdronly.h b/third_party/pocketfft/pocketfft_hdronly.h
index 330c3c7..deb60c5 100644
--- a/third_party/pocketfft/pocketfft_hdronly.h
+++ b/third_party/pocketfft/pocketfft_hdronly.h
@@ -156,9 +156,15 @@ template<> struct VLEN<double> { static constexpr size_t val=2; };
 inline void *aligned_alloc(size_t align, size_t size)
   {
   // aligned_alloc() requires that the requested size is a multiple of "align"
-  void *ptr = ::aligned_alloc(align,(size+align-1)&(~(align-1)));
-  if (!ptr) throw std::bad_alloc();
-  return ptr;
+  // void *ptr = ::aligned_alloc(align,(size+align-1)&(~(align-1)));
+  // if (!ptr) throw std::bad_alloc();
+  // return ptr;
+    void *ptr = nullptr;
+    int ret = posix_memalign(&ptr, align, size);
+    if (ret != 0) {
+        throw std::bad_alloc();
+    }
+    return ptr;
   }
 inline void aligned_dealloc(void *ptr)
     { free(ptr); }
Submodule third_party/pybind11 contains modified content
diff --git a/third_party/pybind11/CMakeLists.txt b/third_party/pybind11/CMakeLists.txt
index f53aa209..9c20f150 100644
--- a/third_party/pybind11/CMakeLists.txt
+++ b/third_party/pybind11/CMakeLists.txt
@@ -26,10 +26,12 @@ if(_pybind11_cmp0148)
   unset(_pybind11_cmp0148)
 endif()
 
+message(---------------------third_party-pybind11-CMakeLists--1---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 # Avoid infinite recursion if tests include this as a subdirectory
 if(DEFINED PYBIND11_MASTER_PROJECT)
   return()
 endif()
+message(---------------------third_party-pybind11-CMakeLists--2---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 
 # Extract project version from source
 file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/include/pybind11/detail/common.h"
Submodule third_party/sleef contains modified content
diff --git a/third_party/sleef/CMakeLists.txt b/third_party/sleef/CMakeLists.txt
index ad31386..59b102a 100644
--- a/third_party/sleef/CMakeLists.txt
+++ b/third_party/sleef/CMakeLists.txt
@@ -12,7 +12,7 @@ option(SLEEF_BUILD_DFT "libsleefdft will be built." OFF)
 option(SLEEF_BUILD_QUAD "libsleefquad will be built." OFF)
 option(SLEEF_BUILD_GNUABI_LIBS "libsleefgnuabi will be built." ON)
 option(SLEEF_BUILD_SCALAR_LIB "libsleefscalar will be built." OFF)
-option(SLEEF_BUILD_TESTS "Tests will be built." ON)
+option(SLEEF_BUILD_TESTS "Tests will be built." OFF)
 option(SLEEF_BUILD_INLINE_HEADERS "Build header for inlining whole SLEEF functions" OFF)
 
 option(SLEEF_TEST_ALL_IUT "Perform tests on implementations with all vector extensions" OFF)
diff --git a/third_party/sleef/Configure.cmake b/third_party/sleef/Configure.cmake
index 19a153f..bcb96f6 100644
--- a/third_party/sleef/Configure.cmake
+++ b/third_party/sleef/Configure.cmake
@@ -115,8 +115,10 @@ elseif(SLEEF_TARGET_PROCESSOR MATCHES "aarch64|arm64")
 
 elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "arm")
   set(SLEEF_ARCH_AARCH32 ON CACHE INTERNAL "True for Aarch32 architecture.")
-  set(COMPILER_SUPPORTS_NEON32 1)
-  set(COMPILER_SUPPORTS_NEON32VFPV4 1)
+  # set(COMPILER_SUPPORTS_NEON32 1)
+  # set(COMPILER_SUPPORTS_NEON32VFPV4 1)
+  set(COMPILER_SUPPORTS_NEON32 0)  # Chaquopy: changed from 1 to 0
+  set(COMPILER_SUPPORTS_NEON32VFPV4 0)  # Chaquopy: changed from 1 to 0
 
   set(CLANG_FLAGS_ENABLE_PURECFMA_SCALAR "-mfpu=vfpv4")
 elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc|ppc)64")
@@ -133,7 +135,8 @@ elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "riscv64")
 endif()
 
 set(COMPILER_SUPPORTS_PUREC_SCALAR 1)
-set(COMPILER_SUPPORTS_PURECFMA_SCALAR 1)
+# set(COMPILER_SUPPORTS_PURECFMA_SCALAR 1)
+set(COMPILER_SUPPORTS_PURECFMA_SCALAR 0)  # Chaquopy: changed from 1 to 0
 
 # Compiler feature detection
 
diff --git a/tools/setup_helpers/cmake.py b/tools/setup_helpers/cmake.py
index 70bf31375a8..0723c4e02db 100644
--- a/tools/setup_helpers/cmake.py
+++ b/tools/setup_helpers/cmake.py
@@ -309,6 +309,14 @@ class CMake:
         # todo xiao
         # Chaquopy: see https://github.com/shibatch/sleef/issues/249
         # build_sleef_native = os.path.abspath("build-sleef-native")
+        build_sleef_native="/home/ubuntu/workspace/sleef/build-native"
+        build_sleef_cross = os.path.abspath("build-sleef-cross")
+        src_path = os.path.abspath("")
+        print(f"--------------------build_sleef_native = {build_sleef_native}")
+        print(f"--------------------build_sleef_cross = {build_sleef_cross}")
+        print(f"--------------------src_path = {src_path}")
+        # if not os.path.exists(build_sleef_cross):
+        #     os.mkdir(build_sleef_cross)
         # if not os.path.exists(build_sleef_native):  # For rerunning with build-wheel.py --no-unpack
         #     os.mkdir(build_sleef_native)
         #     sleef_env = os.environ.copy()
@@ -316,10 +324,20 @@ class CMake:
         #                  "CXXFLAGS", "F77", "F90", "FARCH", "FC", "LD", "LDFLAGS", "LDSHARED",
         #                  "NM", "RANLIB", "READELF", "STRIP"]:
         #         sleef_env.pop(name, None)
-        #     kwargs = dict(cwd=build_sleef_native, env=sleef_env)
-        #     check_call(["cmake", "../third_party/sleef"], **kwargs)
-        #     check_call(["cmake", "--build", "." , "--", "-j", str(os.cpu_count())], **kwargs)
-        
+        #     # todo xiao
+        #     # kwargs = dict(cwd=build_sleef_native, env=sleef_env)
+        #     # check_call(["cmake", "../third_party/sleef"], **kwargs)
+        #     # check_call(["cmake", "--build", "." , "--", "-j", str(os.cpu_count())], **kwargs)
+        #     print(f"--------------------build sleef native---1")
+        #     check_call(["/home/ubuntu/workspace/pkg/cmake-3.31.4/bin/cmake", "-S", f"{src_path}/third_party/sleef", "-B", build_sleef_native])
+        #     # print(f"--------------------build sleef native---2")
+        #     # check_call(["/home/ubuntu/workspace/pkg/cmake-3.31.4/bin/cmake", "--build", build_sleef_native, "-j", "--clean-first"])
+        #     # tool_chain_file=os.path.abspath("../chaquopy.toolchain.cmake")
+        #     # print(f"--------------------build sleef cross---tool_chain_file = {tool_chain_file}")
+        #     # check_call(["cmake", "-S", f"{src_path}/third_party/sleef", "-B", build_sleef_cross, f"-DCMAKE_TOOLCHAIN_FILE={tool_chain_file}", f"-DNATIVE_BUILD_DIR={build_sleef_native}"])
+        #     # print(f"--------------------build sleef cross---2")
+        print(f"--------------------setup args = {args}")
+        print(f"--------------------setup build_options = {build_options}")
         # todo xiao
         CMake.defines(
             args,
@@ -327,7 +345,7 @@ class CMake:
             CAFFE2_CUSTOM_PROTOC_EXECUTABLE=which("protoc"),
             ONNX_CUSTOM_PROTOC_EXECUTABLE=which("protoc"),
             # BLAS="OpenBLAS",
-            # NATIVE_BUILD_DIR=build_sleef_native,
+            NATIVE_BUILD_DIR=build_sleef_native,
             TORCH_BUILD_VERSION=version,
             # USE_CUDA="0",
             # USE_VULKAN="0",  # Disable for now to simplify the build.
