diff --git a/cmake/Dependencies.cmake b/cmake/Dependencies.cmake
index 2da257b9483..7664479dd5b 100644
--- a/cmake/Dependencies.cmake
+++ b/cmake/Dependencies.cmake
@@ -33,6 +33,9 @@ macro(enable_ubsan)
   endif()
 endmacro()
 
+message(-------------------------cmake path = ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
+list(PREPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
+
 # ---[ CUDA
 if(USE_CUDA)
   # public/*.cmake uses CAFFE2_USE_*
@@ -889,26 +892,36 @@ endif()
 message(+++++++++++++++++++++++++++++++++++++++++++Dependencies---2---BUILD_PYTHON = ${BUILD_PYTHON})
 
 # ---[ pybind11
-if(USE_SYSTEM_PYBIND11)
-  find_package(pybind11 CONFIG)
-  if(NOT pybind11_FOUND)
-    find_package(pybind11)
-  endif()
-  if(NOT pybind11_FOUND)
-    message(FATAL "Cannot find system pybind11")
-  endif()
-else()
-    message(STATUS "Using third_party/pybind11.")
-    set(pybind11_INCLUDE_DIRS ${CMAKE_CURRENT_LIST_DIR}/../third_party/pybind11/include)
-    install(DIRECTORY ${pybind11_INCLUDE_DIRS}
-            DESTINATION ${CMAKE_INSTALL_PREFIX}
-            FILES_MATCHING PATTERN "*.h")
-endif()
-message(STATUS "pybind11 include dirs: " "${pybind11_INCLUDE_DIRS}")
-
-add_library(pybind::pybind11 INTERFACE IMPORTED)
-target_include_directories(pybind::pybind11 SYSTEM INTERFACE ${pybind11_INCLUDE_DIRS})
-target_link_libraries(pybind::pybind11 INTERFACE Python::Module)
+# if(USE_SYSTEM_PYBIND11)
+#   find_package(pybind11 CONFIG)
+#   if(NOT pybind11_FOUND)
+#     find_package(pybind11)
+#   endif()
+#   if(NOT pybind11_FOUND)
+#     message(FATAL "Cannot find system pybind11")
+#   endif()
+# else()
+#     message(STATUS "Using third_party/pybind11.")
+#     set(pybind11_INCLUDE_DIRS ${CMAKE_CURRENT_LIST_DIR}/../third_party/pybind11/include)
+#     install(DIRECTORY ${pybind11_INCLUDE_DIRS}
+#             DESTINATION ${CMAKE_INSTALL_PREFIX}
+#             FILES_MATCHING PATTERN "*.h")
+# endif()
+# message(STATUS "pybind11 include dirs: " "${pybind11_INCLUDE_DIRS}")
+
+# add_library(pybind::pybind11 INTERFACE IMPORTED)
+# target_include_directories(pybind::pybind11 SYSTEM INTERFACE ${pybind11_INCLUDE_DIRS})
+# target_link_libraries(pybind::pybind11 INTERFACE Python::Module)
+
+message(STATUS "----------------------1---Successfully included pybind11")
+# add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/pybind11)
+include(pybind11)
+message(STATUS "----------------------2---Successfully included pybind11")
+# add_library(pybind::pybind11 ALIAS pybind11::pybind11)
+
+message(STATUS "----------------------3---Successfully included pybind11")
+target_link_libraries(pybind11::pybind11 INTERFACE Python::Module)
+message(STATUS "----------------------4---Successfully included pybind11")
 
 # ---[ OpenTelemetry API headers
 find_package(OpenTelemetryApi)
diff --git a/cmake/pybind11.cmake b/cmake/pybind11.cmake
index 1cf1a77c877..d883c53875b 100644
--- a/cmake/pybind11.cmake
+++ b/cmake/pybind11.cmake
@@ -6,7 +6,6 @@ include(FetchContent)
 FetchContent_Declare(
   pybind11
   GIT_REPOSITORY https://github.com/pybind/pybind11.git
-  GIT_TAG smart_holder
   GIT_SHALLOW TRUE
   GIT_PROGRESS TRUE
 )
Submodule third_party/flatbuffers contains modified content
diff --git a/third_party/flatbuffers/android/.project b/third_party/flatbuffers/android/.project
index 3ed7298f..17ddcb3e 100644
--- a/third_party/flatbuffers/android/.project
+++ b/third_party/flatbuffers/android/.project
@@ -1,12 +1,18 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <projectDescription>
-	<name>FlatBufferTest</name>
+	<name>FlatbuffersTest-android</name>
 	<comment></comment>
 	<projects>
 	</projects>
 	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
 	</buildSpec>
 	<natures>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
 	</natures>
 	<filteredResources>
 		<filter>
Submodule third_party/onnx contains modified content
Submodule third_party/pybind11 contains modified content
diff --git a/third_party/onnx/third_party/pybind11/CMakeLists.txt b/third_party/onnx/third_party/pybind11/CMakeLists.txt
index 7db1bf66..21e0588b 100644
--- a/third_party/onnx/third_party/pybind11/CMakeLists.txt
+++ b/third_party/onnx/third_party/pybind11/CMakeLists.txt
@@ -26,10 +26,12 @@ if(_pybind11_cmp0148)
   unset(_pybind11_cmp0148)
 endif()
 
+message(---------------------third_party-Onnx-third_party-pybind11-CMakeLists--1---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 # Avoid infinite recursion if tests include this as a subdirectory
 if(DEFINED PYBIND11_MASTER_PROJECT)
   return()
 endif()
+message(---------------------third_party-Onnx-third_party-pybind11-CMakeLists--2---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 
 # Extract project version from source
 file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/include/pybind11/detail/common.h"
Submodule third_party/pocketfft contains modified content
diff --git a/third_party/pocketfft/pocketfft_hdronly.h b/third_party/pocketfft/pocketfft_hdronly.h
index 330c3c7..deb60c5 100644
--- a/third_party/pocketfft/pocketfft_hdronly.h
+++ b/third_party/pocketfft/pocketfft_hdronly.h
@@ -156,9 +156,15 @@ template<> struct VLEN<double> { static constexpr size_t val=2; };
 inline void *aligned_alloc(size_t align, size_t size)
   {
   // aligned_alloc() requires that the requested size is a multiple of "align"
-  void *ptr = ::aligned_alloc(align,(size+align-1)&(~(align-1)));
-  if (!ptr) throw std::bad_alloc();
-  return ptr;
+  // void *ptr = ::aligned_alloc(align,(size+align-1)&(~(align-1)));
+  // if (!ptr) throw std::bad_alloc();
+  // return ptr;
+    void *ptr = nullptr;
+    int ret = posix_memalign(&ptr, align, size);
+    if (ret != 0) {
+        throw std::bad_alloc();
+    }
+    return ptr;
   }
 inline void aligned_dealloc(void *ptr)
     { free(ptr); }
Submodule third_party/protobuf contains modified content
diff --git a/third_party/protobuf/cmake/libprotobuf.cmake b/third_party/protobuf/cmake/libprotobuf.cmake
index 0c12596c2..81752360a 100644
--- a/third_party/protobuf/cmake/libprotobuf.cmake
+++ b/third_party/protobuf/cmake/libprotobuf.cmake
@@ -118,6 +118,11 @@ target_link_libraries(libprotobuf ${CMAKE_THREAD_LIBS_INIT})
 if(protobuf_WITH_ZLIB)
   target_link_libraries(libprotobuf ${ZLIB_LIBRARIES})
 endif()
+
+# todo xiao
+# Chaquopy: used by src/google/protobuf/stubs/common.cc
+# target_link_libraries(libprotobuf INTERFACE log)
+
 if(protobuf_LINK_LIBATOMIC)
   target_link_libraries(libprotobuf atomic)
 endif()
Submodule third_party/pybind11 contains modified content
diff --git a/third_party/pybind11/CMakeLists.txt b/third_party/pybind11/CMakeLists.txt
index f53aa209..9c20f150 100644
--- a/third_party/pybind11/CMakeLists.txt
+++ b/third_party/pybind11/CMakeLists.txt
@@ -26,10 +26,12 @@ if(_pybind11_cmp0148)
   unset(_pybind11_cmp0148)
 endif()
 
+message(---------------------third_party-pybind11-CMakeLists--1---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 # Avoid infinite recursion if tests include this as a subdirectory
 if(DEFINED PYBIND11_MASTER_PROJECT)
   return()
 endif()
+message(---------------------third_party-pybind11-CMakeLists--2---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 
 # Extract project version from source
 file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/include/pybind11/detail/common.h"
Submodule third_party/sleef contains modified content
diff --git a/third_party/sleef/Configure.cmake b/third_party/sleef/Configure.cmake
index 19a153f..bcb96f6 100644
--- a/third_party/sleef/Configure.cmake
+++ b/third_party/sleef/Configure.cmake
@@ -115,8 +115,10 @@ elseif(SLEEF_TARGET_PROCESSOR MATCHES "aarch64|arm64")
 
 elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "arm")
   set(SLEEF_ARCH_AARCH32 ON CACHE INTERNAL "True for Aarch32 architecture.")
-  set(COMPILER_SUPPORTS_NEON32 1)
-  set(COMPILER_SUPPORTS_NEON32VFPV4 1)
+  # set(COMPILER_SUPPORTS_NEON32 1)
+  # set(COMPILER_SUPPORTS_NEON32VFPV4 1)
+  set(COMPILER_SUPPORTS_NEON32 0)  # Chaquopy: changed from 1 to 0
+  set(COMPILER_SUPPORTS_NEON32VFPV4 0)  # Chaquopy: changed from 1 to 0
 
   set(CLANG_FLAGS_ENABLE_PURECFMA_SCALAR "-mfpu=vfpv4")
 elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc|ppc)64")
@@ -133,7 +135,8 @@ elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "riscv64")
 endif()
 
 set(COMPILER_SUPPORTS_PUREC_SCALAR 1)
-set(COMPILER_SUPPORTS_PURECFMA_SCALAR 1)
+# set(COMPILER_SUPPORTS_PURECFMA_SCALAR 1)
+set(COMPILER_SUPPORTS_PURECFMA_SCALAR 0)  # Chaquopy: changed from 1 to 0
 
 # Compiler feature detection
 
