diff --git a/.gitmodules b/.gitmodules
index 36d5becb57c..a9f9d995458 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,93 +1,70 @@
 [submodule "third_party/pybind11"]
-    ignore = dirty
     path = third_party/pybind11
     url = https://github.com/pybind/pybind11.git
 [submodule "third_party/eigen"]
-    ignore = dirty
     path = third_party/eigen
     url = https://gitlab.com/libeigen/eigen.git
 [submodule "third_party/googletest"]
-    ignore = dirty
     path = third_party/googletest
     url = https://github.com/google/googletest.git
 [submodule "third_party/benchmark"]
-    ignore = dirty
     path = third_party/benchmark
     url = https://github.com/google/benchmark.git
 [submodule "third_party/protobuf"]
-    ignore = dirty
     path = third_party/protobuf
     url = https://github.com/protocolbuffers/protobuf.git
 [submodule "third_party/NNPACK"]
-    ignore = dirty
     path = third_party/NNPACK
     url = https://github.com/Maratyszcza/NNPACK.git
 [submodule "third_party/gloo"]
-    ignore = dirty
     path = third_party/gloo
     url = https://github.com/facebookincubator/gloo
 [submodule "third_party/NNPACK_deps/pthreadpool"]
-    ignore = dirty
     path = third_party/pthreadpool
     url = https://github.com/Maratyszcza/pthreadpool.git
 [submodule "third_party/NNPACK_deps/FXdiv"]
-    ignore = dirty
     path = third_party/FXdiv
     url = https://github.com/Maratyszcza/FXdiv.git
 [submodule "third_party/NNPACK_deps/FP16"]
-    ignore = dirty
     path = third_party/FP16
     url = https://github.com/Maratyszcza/FP16.git
 [submodule "third_party/NNPACK_deps/psimd"]
-    ignore = dirty
     path = third_party/psimd
     url = https://github.com/Maratyszcza/psimd.git
 [submodule "third_party/cpuinfo"]
-    ignore = dirty
     path = third_party/cpuinfo
     url = https://github.com/pytorch/cpuinfo.git
 [submodule "third_party/python-peachpy"]
-    ignore = dirty
     path = third_party/python-peachpy
     url = https://github.com/malfet/PeachPy.git
 [submodule "third_party/onnx"]
-    ignore = dirty
     path = third_party/onnx
     url = https://github.com/onnx/onnx.git
 [submodule "third_party/sleef"]
-    ignore = dirty
     path = third_party/sleef
     url = https://github.com/shibatch/sleef
 [submodule "third_party/ideep"]
-    ignore = dirty
     path = third_party/ideep
     url = https://github.com/intel/ideep
 [submodule "third_party/nccl/nccl"]
-    ignore = dirty
     path = third_party/nccl/nccl
     url = https://github.com/NVIDIA/nccl
 [submodule "third_party/gemmlowp/gemmlowp"]
-    ignore = dirty
     path = third_party/gemmlowp/gemmlowp
     url = https://github.com/google/gemmlowp.git
 [submodule "third_party/fbgemm"]
-    ignore = dirty
     path = third_party/fbgemm
     url = https://github.com/pytorch/fbgemm
 [submodule "android/libs/fbjni"]
-    ignore = dirty
     path = android/libs/fbjni
     url = https://github.com/facebookincubator/fbjni.git
 [submodule "third_party/XNNPACK"]
-    ignore = dirty
     path = third_party/XNNPACK
     url = https://github.com/google/XNNPACK.git
 [submodule "third_party/fmt"]
-    ignore = dirty
     path = third_party/fmt
     url = https://github.com/fmtlib/fmt.git
 [submodule "third_party/tensorpipe"]
-    ignore = dirty
     path = third_party/tensorpipe
     url = https://github.com/pytorch/tensorpipe.git
 [submodule "third_party/cudnn_frontend"]
diff --git a/CMakeLists.txt b/CMakeLists.txt
index c8af5f00b5c..656f7d122f0 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -22,6 +22,28 @@ if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
   message(FATAL_ERROR "In-source build are not supported")
 endif()
 
+# --------------------------------- chaquopy begin ------------------------------------
+# set(BUILD_CUSTOM_PROTOBUF ON)
+# set(CMAKE_TOOLCHAIN_FILE "/home/ubuntu/workspace/android-sdk/ndk/21.4.7075529/build/cmake/android.toolchain.cmake")
+set(BUILD_TEST OFF)
+# set(BUILD_LITE_INTERPRETER OFF)
+# set(USE_LIGHTWEIGHT_DISPATCH OFF)
+
+set(USE_CUDA OFF)
+
+# set(USE_ITT OFF)
+# set(USE_GFLAGS OFF)
+set(USE_OPENCV OFF)
+# set(USE_MPI OFF)
+
+# set(USE_OPENMP OFF)
+set(BUILD_PYTHON ON)
+
+# dependencies
+# set(USE_NUMPY ON)
+set(USE_VULKAN OFF)
+# --------------------------------- chaquopy end ------------------------------------
+
 # ---[ Project and semantic versioning.
 project(Torch CXX C)
 
@@ -663,9 +685,9 @@ string(APPEND CMAKE_CUDA_FLAGS " -Xfatbin -compress-all")
 if(ANDROID
    OR IOS
    OR DEFINED ENV{BUILD_PYTORCH_MOBILE_WITH_HOST_TOOLCHAIN})
-  set(INTERN_BUILD_MOBILE ON)
+  # set(INTERN_BUILD_MOBILE ON)
   message(WARNING "INTERN_BUILD_MOBILE is on, disabling BUILD_LAZY_TS_BACKEND")
-  set(BUILD_LAZY_TS_BACKEND OFF)
+  # set(BUILD_LAZY_TS_BACKEND OFF)
 
   # Set -ffunction-sections and -fdata-sections so that each method has its own
   # text section. This allows the linker to remove unused section when the flag
@@ -855,6 +877,11 @@ endif()
 # The only solution is to include(cmake/Dependencies.cmake), and defer the
 # aotriton build decision later.
 
+set(Python_LIBRARIES ${PYTHON_LIBRARIES} CACHE PATH "Python include directory" FORCE)
+set(Python_INCLUDE_DIRS ${PYTHON_INCLUDE_DIRS} CACHE FILEPATH "Python library" FORCE)
+message(---------------------------Python_LIBRARIES = ${Python_LIBRARIES})
+message(---------------------------Python_INCLUDE_DIRS = ${Python_INCLUDE_DIRS})
+
 include(cmake/Dependencies.cmake)
 
 cmake_dependent_option(
@@ -1355,6 +1382,12 @@ if(BUILD_JNI)
   add_subdirectory(android/pytorch_android)
 endif()
 
+# todo xiao
+# set(Python_LIBRARIES ${PYTHON_LIBRARIES})
+# set(Python_INCLUDE_DIRS ${PYTHON_INCLUDE_DIRS})
+# message(---------------------------Python_LIBRARIES = ${Python_LIBRARIES})
+# message(---------------------------Python_INCLUDE_DIRS = ${Python_INCLUDE_DIRS})
+
 include(cmake/Summary.cmake)
 caffe2_print_configuration_summary()
 
diff --git a/c10/macros/Macros.h b/c10/macros/Macros.h
index 919eb6c8567..d6799b21229 100644
--- a/c10/macros/Macros.h
+++ b/c10/macros/Macros.h
@@ -433,7 +433,9 @@ __host__ __device__
 
 #if defined(__ANDROID__)
 #define C10_ANDROID 1
-#define C10_MOBILE 1
+// todo xiao
+// Chaquopy: this disables things required by the Python build.
+// #define C10_MOBILE 1
 #elif (                   \
     defined(__APPLE__) && \
     (TARGET_IPHONE_SIMULATOR || TARGET_OS_SIMULATOR || TARGET_OS_IPHONE))
diff --git a/cmake/Dependencies.cmake b/cmake/Dependencies.cmake
index 1813f4418a2..27104a73726 100644
--- a/cmake/Dependencies.cmake
+++ b/cmake/Dependencies.cmake
@@ -848,7 +848,9 @@ if(BUILD_PYTHON)
   if(USE_NUMPY)
     list(APPEND PYTHON_COMPONENTS NumPy)
   endif()
-  find_package(Python COMPONENTS Interpreter OPTIONAL_COMPONENTS ${PYTHON_COMPONENTS})
+  # todo xiao
+  # find_package(Python COMPONENTS Interpreter OPTIONAL_COMPONENTS ${PYTHON_COMPONENTS})
+  find_package(Python COMPONENTS Interpreter OPTIONAL_COMPONENTS Development ${PYTHON_COMPONENTS})
 else()
   find_package(Python COMPONENTS Interpreter)
 endif()
@@ -1290,7 +1292,9 @@ if(CAFFE2_CMAKE_BUILDING_WITH_MAIN_REPO AND NOT INTERN_DISABLE_ONNX)
     # In mobile build we care about code size, and so we need drop
     # everything (e.g. checker) in onnx but the pb definition.
     if(ANDROID OR IOS)
-      caffe2_interface_library(onnx_proto onnx_library)
+      # todo xiao
+      # caffe2_interface_library(onnx_proto onnx_library)
+      caffe2_interface_library(onnx onnx_library)  # Chaquopy: `onnx` was `onnx_proto`.
     else()
       caffe2_interface_library(onnx onnx_library)
     endif()
@@ -1497,7 +1501,9 @@ if(NOT INTERN_BUILD_MOBILE)
       add_definitions(-DHAVE_MMAP=1)
     endif(HAVE_MMAP)
     # done for lseek: https://www.gnu.org/software/libc/manual/html_node/File-Position-Primitive.html
-    add_definitions(-D_FILE_OFFSET_BITS=64)
+    # todo xiao
+    # Chaquopy: see https://android.googlesource.com/platform/bionic/+/master/docs/32-bit-abi.md
+    # add_definitions(-D_FILE_OFFSET_BITS=64)
     CHECK_FUNCTION_EXISTS(shm_open HAVE_SHM_OPEN)
     if(HAVE_SHM_OPEN)
       add_definitions(-DHAVE_SHM_OPEN=1)
diff --git a/functorch/CMakeLists.txt b/functorch/CMakeLists.txt
index bdfa4bfe455..9e3b4643097 100644
--- a/functorch/CMakeLists.txt
+++ b/functorch/CMakeLists.txt
@@ -22,7 +22,7 @@ else()
   # functorch cannot use the alias to build on windows
   target_link_libraries(${PROJECT_NAME} PRIVATE torch torch_python)
 endif()
-target_link_libraries(${PROJECT_NAME} PRIVATE pybind::pybind11)
+target_link_libraries(${PROJECT_NAME} PRIVATE pybind::pybind11 ${PYTHON_LIBRARIES})
 
 set_target_properties(${PROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY
       ${CMAKE_BINARY_DIR}/functorch)
diff --git a/setup.py b/setup.py
index a6a6db7b033..6383a9b319a 100644
--- a/setup.py
+++ b/setup.py
@@ -368,7 +368,9 @@ if BUILD_LIBTORCH_WHL:
 
 
 package_type = os.getenv("PACKAGE_TYPE", "wheel")
-version = get_torch_version()
+# todo xiao
+# version = get_torch_version()
+version = "2.6.0"
 report(f"Building wheel {package_name}-{version}")
 
 cmake = CMake()
@@ -483,11 +485,13 @@ def build_deps():
     check_submodules()
     check_pydep("yaml", "pyyaml")
     build_python = not BUILD_LIBTORCH_WHL
+    print(f"++++++++++++++++++++++++++++++++++++---build_python = {build_python}")
+    print(f"++++++++++++++++++++++++++++++++++++---cmake_python_library = {cmake_python_library}")
     build_pytorch(
         version=version,
         cmake_python_library=cmake_python_library,
         build_python=build_python,
-        rerun_cmake=RERUN_CMAKE,
+        rerun_cmake=True,
         cmake_only=CMAKE_ONLY,
         cmake=cmake,
     )
@@ -1167,7 +1171,15 @@ def main():
         long_description = f.read()
 
     version_range_max = max(sys.version_info[1], 13) + 1
+    
+    # Chaquopy: see package_data below.
+    if os.path.exists("chaquopy"):
+        shutil.rmtree("chaquopy")
+    os.mkdir("chaquopy")
+    os.symlink("../torch/lib", "chaquopy/lib")
+    
     torch_package_data = [
+        'lib/libtorch_global_deps.so',  # Chaquopy: see comment at top of package_data.
         "py.typed",
         "bin/*",
         "test/*",
@@ -1416,6 +1428,9 @@ def main():
     ]
     package_data = {
         "torch": torch_package_data,
+        'chaquopy': [
+            'lib/*.so*'  # See exclude_package_data below.
+        ],
     }
 
     if not BUILD_LIBTORCH_WHL:
@@ -1435,7 +1450,7 @@ def main():
         long_description_content_type="text/markdown",
         ext_modules=extensions,
         cmdclass=cmdclass,
-        packages=packages,
+        packages=packages + ["chaquopy"],
         entry_points=entry_points,
         install_requires=install_requires,
         extras_require=extras_require,
@@ -1445,6 +1460,9 @@ def main():
         author="PyTorch Team",
         author_email="packages@pytorch.org",
         python_requires=f">={python_min_version_str}",
+        
+        exclude_package_data={'chaquopy': ['lib/libtorch_global_deps.so']},
+        
         # PyPI package information.
         classifiers=[
             "Development Status :: 5 - Production/Stable",
Submodule third_party/pybind11 contains modified content
diff --git a/third_party/pybind11/CMakeLists.txt b/third_party/pybind11/CMakeLists.txt
index f53aa209..9c20f150 100644
--- a/third_party/pybind11/CMakeLists.txt
+++ b/third_party/pybind11/CMakeLists.txt
@@ -26,10 +26,12 @@ if(_pybind11_cmp0148)
   unset(_pybind11_cmp0148)
 endif()
 
+message(---------------------third_party-pybind11-CMakeLists--1---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 # Avoid infinite recursion if tests include this as a subdirectory
 if(DEFINED PYBIND11_MASTER_PROJECT)
   return()
 endif()
+message(---------------------third_party-pybind11-CMakeLists--2---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 
 # Extract project version from source
 file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/include/pybind11/detail/common.h"
Submodule third_party/sleef contains modified content
diff --git a/third_party/sleef/CMakeLists.txt b/third_party/sleef/CMakeLists.txt
index ad31386..59b102a 100644
--- a/third_party/sleef/CMakeLists.txt
+++ b/third_party/sleef/CMakeLists.txt
@@ -12,7 +12,7 @@ option(SLEEF_BUILD_DFT "libsleefdft will be built." OFF)
 option(SLEEF_BUILD_QUAD "libsleefquad will be built." OFF)
 option(SLEEF_BUILD_GNUABI_LIBS "libsleefgnuabi will be built." ON)
 option(SLEEF_BUILD_SCALAR_LIB "libsleefscalar will be built." OFF)
-option(SLEEF_BUILD_TESTS "Tests will be built." ON)
+option(SLEEF_BUILD_TESTS "Tests will be built." OFF)
 option(SLEEF_BUILD_INLINE_HEADERS "Build header for inlining whole SLEEF functions" OFF)
 
 option(SLEEF_TEST_ALL_IUT "Perform tests on implementations with all vector extensions" OFF)
diff --git a/third_party/sleef/Configure.cmake b/third_party/sleef/Configure.cmake
index 19a153f..bcb96f6 100644
--- a/third_party/sleef/Configure.cmake
+++ b/third_party/sleef/Configure.cmake
@@ -115,8 +115,10 @@ elseif(SLEEF_TARGET_PROCESSOR MATCHES "aarch64|arm64")
 
 elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "arm")
   set(SLEEF_ARCH_AARCH32 ON CACHE INTERNAL "True for Aarch32 architecture.")
-  set(COMPILER_SUPPORTS_NEON32 1)
-  set(COMPILER_SUPPORTS_NEON32VFPV4 1)
+  # set(COMPILER_SUPPORTS_NEON32 1)
+  # set(COMPILER_SUPPORTS_NEON32VFPV4 1)
+  set(COMPILER_SUPPORTS_NEON32 0)  # Chaquopy: changed from 1 to 0
+  set(COMPILER_SUPPORTS_NEON32VFPV4 0)  # Chaquopy: changed from 1 to 0
 
   set(CLANG_FLAGS_ENABLE_PURECFMA_SCALAR "-mfpu=vfpv4")
 elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc|ppc)64")
@@ -133,7 +135,8 @@ elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "riscv64")
 endif()
 
 set(COMPILER_SUPPORTS_PUREC_SCALAR 1)
-set(COMPILER_SUPPORTS_PURECFMA_SCALAR 1)
+# set(COMPILER_SUPPORTS_PURECFMA_SCALAR 1)
+set(COMPILER_SUPPORTS_PURECFMA_SCALAR 0)  # Chaquopy: changed from 1 to 0
 
 # Compiler feature detection
 
diff --git a/tools/setup_helpers/cmake.py b/tools/setup_helpers/cmake.py
index 84e4dad32d3..f54fbd715a6 100644
--- a/tools/setup_helpers/cmake.py
+++ b/tools/setup_helpers/cmake.py
@@ -305,10 +305,19 @@ class CMake:
             )
             sys.exit(1)
         build_options.update(cmake__options)
-
+        
+        # todo xiao
+        # Chaquopy: see https://github.com/shibatch/sleef/issues/249
+        # build_sleef_native = os.path.abspath("build-sleef-native")
+        build_sleef_native="/home/ubuntu/workspace/sleef/build-native"
+        
         CMake.defines(
             args,
-            Python_EXECUTABLE=sys.executable,
+            # Python_EXECUTABLE=sys.executable,
+            CAFFE2_CUSTOM_PROTOC_EXECUTABLE=which("protoc"),
+            ONNX_CUSTOM_PROTOC_EXECUTABLE=which("protoc"),
+            # BLAS="OpenBLAS",
+            NATIVE_BUILD_DIR=build_sleef_native,
             TORCH_BUILD_VERSION=version,
             **build_options,
         )
diff --git a/torch/CMakeLists.txt b/torch/CMakeLists.txt
index b123023d2fd..4ebd88274ae 100644
--- a/torch/CMakeLists.txt
+++ b/torch/CMakeLists.txt
@@ -428,7 +428,7 @@ endif()
 
 target_compile_definitions(torch_python PRIVATE "-DTHP_BUILD_MAIN_LIB")
 
-target_link_libraries(torch_python PRIVATE ${TORCH_LIB} ${TORCH_PYTHON_LINK_LIBRARIES})
+target_link_libraries(torch_python PRIVATE ${TORCH_LIB} ${TORCH_PYTHON_LINK_LIBRARIES} ${PYTHON_LIBRARIES})
 
 target_compile_definitions(torch_python PRIVATE ${TORCH_PYTHON_COMPILE_DEFINITIONS})
 
@@ -492,7 +492,7 @@ if(NOT ${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
   if(BUILD_LIBTORCHLESS)
     target_link_libraries(nnapi_backend PRIVATE ${TORCH_LIB} torch_python pybind::pybind11)
   else()
-    target_link_libraries(nnapi_backend PRIVATE torch torch_python pybind::pybind11)
+    target_link_libraries(nnapi_backend PRIVATE torch torch_python pybind::pybind11 ${PYTHON_LIBRARIES})
   endif()
 endif()
 
diff --git a/torch/_utils_internal.py b/torch/_utils_internal.py
index f58eb93d86d..c3c7a50c26b 100644
--- a/torch/_utils_internal.py
+++ b/torch/_utils_internal.py
@@ -63,7 +63,9 @@ def prepare_multiprocessing_environment(path: str) -> None:
 
 
 def resolve_library_path(path: str) -> str:
-    return os.path.realpath(path)
+    # todo xiao
+    # return os.path.realpath(path)
+    return os.path.abspath(path)  # Chaquopy: was realpath. This patch is no longer necessary on newer versions of Chaquopy, which call realpath early in the importer.
 
 
 def throw_abstract_impl_not_imported_error(opname, module, context):
diff --git a/torch/csrc/inductor/aoti_eager/kernel_holder.cpp b/torch/csrc/inductor/aoti_eager/kernel_holder.cpp
index 6b2ee88df9c..00324f05442 100644
--- a/torch/csrc/inductor/aoti_eager/kernel_holder.cpp
+++ b/torch/csrc/inductor/aoti_eager/kernel_holder.cpp
@@ -1,4 +1,4 @@
-#if !defined(C10_MOBILE) && !defined(ANDROID)
+#ifndef C10_MOBILE
 #include <torch/csrc/inductor/aoti_eager/kernel_holder.h>
 
 #include <ATen/ATen.h>
diff --git a/torch/csrc/inductor/aoti_eager/kernel_holder.h b/torch/csrc/inductor/aoti_eager/kernel_holder.h
index fed2e3b5d61..9535884190a 100644
--- a/torch/csrc/inductor/aoti_eager/kernel_holder.h
+++ b/torch/csrc/inductor/aoti_eager/kernel_holder.h
@@ -1,4 +1,4 @@
-#if !defined(C10_MOBILE) && !defined(ANDROID)
+#ifndef C10_MOBILE
 #pragma once
 
 #include <ATen/ATen.h>
diff --git a/torch/csrc/inductor/aoti_eager/kernel_meta_info.cpp b/torch/csrc/inductor/aoti_eager/kernel_meta_info.cpp
index 1642ee4beca..362c2025009 100644
--- a/torch/csrc/inductor/aoti_eager/kernel_meta_info.cpp
+++ b/torch/csrc/inductor/aoti_eager/kernel_meta_info.cpp
@@ -1,4 +1,4 @@
-#if !defined(C10_MOBILE) && !defined(ANDROID)
+#ifndef C10_MOBILE
 #include <torch/csrc/inductor/aoti_eager/kernel_meta_info.h>
 #include <iostream>
 #include <utility>
diff --git a/torch/csrc/inductor/aoti_eager/kernel_meta_info.h b/torch/csrc/inductor/aoti_eager/kernel_meta_info.h
index 24d3c05bc35..fcce01ac9cc 100644
--- a/torch/csrc/inductor/aoti_eager/kernel_meta_info.h
+++ b/torch/csrc/inductor/aoti_eager/kernel_meta_info.h
@@ -1,4 +1,4 @@
-#if !defined(C10_MOBILE) && !defined(ANDROID)
+#ifndef C10_MOBILE
 #pragma once
 
 #include <ATen/ATen.h>
diff --git a/torch/csrc/inductor/aoti_package/model_package_loader.cpp b/torch/csrc/inductor/aoti_package/model_package_loader.cpp
index 1aa408bcafd..c5dfdbdf7f1 100644
--- a/torch/csrc/inductor/aoti_package/model_package_loader.cpp
+++ b/torch/csrc/inductor/aoti_package/model_package_loader.cpp
@@ -1,4 +1,4 @@
-#if !defined(C10_MOBILE) && !defined(ANDROID)
+#ifndef C10_MOBILE
 
 #include <c10/util/error.h>
 #include <torch/csrc/inductor/aoti_package/model_package_loader.h>
diff --git a/torch/csrc/inductor/aoti_package/model_package_loader.h b/torch/csrc/inductor/aoti_package/model_package_loader.h
index 88be54ea4f2..f9c84f89c4b 100644
--- a/torch/csrc/inductor/aoti_package/model_package_loader.h
+++ b/torch/csrc/inductor/aoti_package/model_package_loader.h
@@ -1,4 +1,4 @@
-#if !defined(C10_MOBILE) && !defined(ANDROID)
+#ifndef C10_MOBILE
 #pragma once
 
 #include <ATen/Tensor.h>
diff --git a/torch/csrc/inductor/aoti_runner/model_container_runner.cpp b/torch/csrc/inductor/aoti_runner/model_container_runner.cpp
index 41dfd588d48..8fa9b1f6235 100644
--- a/torch/csrc/inductor/aoti_runner/model_container_runner.cpp
+++ b/torch/csrc/inductor/aoti_runner/model_container_runner.cpp
@@ -1,4 +1,4 @@
-#if !defined(C10_MOBILE) && !defined(ANDROID)
+#ifndef C10_MOBILE
 #include <ATen/DynamicLibrary.h>
 
 #include <torch/csrc/inductor/aoti_runner/model_container_runner.h>
diff --git a/torch/csrc/inductor/aoti_runner/model_container_runner.h b/torch/csrc/inductor/aoti_runner/model_container_runner.h
index 76bda78ff23..2c00bcdb0cf 100644
--- a/torch/csrc/inductor/aoti_runner/model_container_runner.h
+++ b/torch/csrc/inductor/aoti_runner/model_container_runner.h
@@ -1,4 +1,4 @@
-#if !defined(C10_MOBILE) && !defined(ANDROID)
+#ifndef C10_MOBILE
 #pragma once
 
 #include <ATen/Tensor.h>
diff --git a/torch/csrc/inductor/aoti_runner/model_container_runner_cpu.cpp b/torch/csrc/inductor/aoti_runner/model_container_runner_cpu.cpp
index ecae588be2f..b0a67a2f682 100644
--- a/torch/csrc/inductor/aoti_runner/model_container_runner_cpu.cpp
+++ b/torch/csrc/inductor/aoti_runner/model_container_runner_cpu.cpp
@@ -1,4 +1,4 @@
-#if !defined(C10_MOBILE) && !defined(ANDROID)
+#ifndef C10_MOBILE
 #include <torch/csrc/inductor/aoti_runner/model_container_runner_cpu.h>
 
 namespace torch::inductor {
diff --git a/torch/csrc/inductor/aoti_runner/model_container_runner_cpu.h b/torch/csrc/inductor/aoti_runner/model_container_runner_cpu.h
index 7a38dab5c2f..5875daf890a 100644
--- a/torch/csrc/inductor/aoti_runner/model_container_runner_cpu.h
+++ b/torch/csrc/inductor/aoti_runner/model_container_runner_cpu.h
@@ -1,4 +1,4 @@
-#if !defined(C10_MOBILE) && !defined(ANDROID)
+#ifndef C10_MOBILE
 #pragma once
 
 #include <torch/csrc/inductor/aoti_runner/model_container_runner.h>
diff --git a/torch/csrc/inductor/aoti_runner/model_container_runner_cuda.cpp b/torch/csrc/inductor/aoti_runner/model_container_runner_cuda.cpp
index c5abd97f759..451aa6ed84c 100644
--- a/torch/csrc/inductor/aoti_runner/model_container_runner_cuda.cpp
+++ b/torch/csrc/inductor/aoti_runner/model_container_runner_cuda.cpp
@@ -1,4 +1,4 @@
-#if !defined(C10_MOBILE) && !defined(ANDROID)
+#ifndef C10_MOBILE
 #include <torch/csrc/inductor/aoti_runner/model_container_runner_cuda.h>
 
 namespace torch::inductor {
diff --git a/torch/csrc/inductor/aoti_runner/model_container_runner_cuda.h b/torch/csrc/inductor/aoti_runner/model_container_runner_cuda.h
index 654da9da036..fe45a8c9063 100644
--- a/torch/csrc/inductor/aoti_runner/model_container_runner_cuda.h
+++ b/torch/csrc/inductor/aoti_runner/model_container_runner_cuda.h
@@ -1,4 +1,4 @@
-#if !defined(C10_MOBILE) && !defined(ANDROID)
+#ifndef C10_MOBILE
 #pragma once
 
 #include <c10/cuda/CUDAStream.h>
diff --git a/torch/csrc/inductor/aoti_runner/model_container_runner_xpu.cpp b/torch/csrc/inductor/aoti_runner/model_container_runner_xpu.cpp
index 97dcd1c5913..c2bd76b0832 100644
--- a/torch/csrc/inductor/aoti_runner/model_container_runner_xpu.cpp
+++ b/torch/csrc/inductor/aoti_runner/model_container_runner_xpu.cpp
@@ -1,4 +1,4 @@
-#if !defined(C10_MOBILE) && !defined(ANDROID)
+#ifndef C10_MOBILE
 #include <torch/csrc/inductor/aoti_runner/model_container_runner_xpu.h>
 
 namespace torch::inductor {
diff --git a/torch/csrc/inductor/aoti_runner/model_container_runner_xpu.h b/torch/csrc/inductor/aoti_runner/model_container_runner_xpu.h
index 563d2047f6c..db5a2527ad0 100644
--- a/torch/csrc/inductor/aoti_runner/model_container_runner_xpu.h
+++ b/torch/csrc/inductor/aoti_runner/model_container_runner_xpu.h
@@ -1,4 +1,4 @@
-#if !defined(C10_MOBILE) && !defined(ANDROID)
+#ifndef C10_MOBILE
 #pragma once
 
 #include <c10/xpu/XPUStream.h>
diff --git a/torch/lib/libshm/manager.cpp b/torch/lib/libshm/manager.cpp
index 6aa70d8c211..b7c06d8c409 100644
--- a/torch/lib/libshm/manager.cpp
+++ b/torch/lib/libshm/manager.cpp
@@ -70,7 +70,9 @@ void print_init_message(std::string_view message) {
 }
 
 bool object_exists(const char* name) {
-  int fd = shm_open(name, O_RDONLY, 0);
+  // todo xiao
+  // int fd = shm_open(name, O_RDONLY, 0);
+  int fd = -1;   // Chaquopy: removed shm_open, which isn't supported on Android.
   if (fd >= 0) {
     close(fd);
     return true;
@@ -180,7 +182,9 @@ int main(int argc, char* argv[]) {
 
   for (auto& obj_name : used_objects) {
     DEBUG("freeing %s", obj_name.c_str());
-    shm_unlink(obj_name.c_str());
+    // todo xiao
+    // shm_unlink(obj_name.c_str());
+    // Chaquopy: removed shm_unlink, which isn't supported on Android.
   }
 
   // Clean up file descriptors
