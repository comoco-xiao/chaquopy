diff --git a/.gitmodules b/.gitmodules
index 36d5becb57c..9a2ad2a6bcf 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,93 +1,82 @@
 [submodule "third_party/pybind11"]
-    ignore = dirty
     path = third_party/pybind11
     url = https://github.com/pybind/pybind11.git
 [submodule "third_party/eigen"]
-    ignore = dirty
     path = third_party/eigen
     url = https://gitlab.com/libeigen/eigen.git
 [submodule "third_party/googletest"]
-    ignore = dirty
     path = third_party/googletest
     url = https://github.com/google/googletest.git
 [submodule "third_party/benchmark"]
-    ignore = dirty
     path = third_party/benchmark
     url = https://github.com/google/benchmark.git
 [submodule "third_party/protobuf"]
-    ignore = dirty
     path = third_party/protobuf
     url = https://github.com/protocolbuffers/protobuf.git
 [submodule "third_party/NNPACK"]
-    ignore = dirty
     path = third_party/NNPACK
     url = https://github.com/Maratyszcza/NNPACK.git
 [submodule "third_party/gloo"]
-    ignore = dirty
     path = third_party/gloo
     url = https://github.com/facebookincubator/gloo
 [submodule "third_party/NNPACK_deps/pthreadpool"]
-    ignore = dirty
     path = third_party/pthreadpool
     url = https://github.com/Maratyszcza/pthreadpool.git
 [submodule "third_party/NNPACK_deps/FXdiv"]
-    ignore = dirty
     path = third_party/FXdiv
     url = https://github.com/Maratyszcza/FXdiv.git
 [submodule "third_party/NNPACK_deps/FP16"]
-    ignore = dirty
     path = third_party/FP16
     url = https://github.com/Maratyszcza/FP16.git
 [submodule "third_party/NNPACK_deps/psimd"]
-    ignore = dirty
     path = third_party/psimd
     url = https://github.com/Maratyszcza/psimd.git
 [submodule "third_party/cpuinfo"]
-    ignore = dirty
+    
     path = third_party/cpuinfo
     url = https://github.com/pytorch/cpuinfo.git
 [submodule "third_party/python-peachpy"]
-    ignore = dirty
+    
     path = third_party/python-peachpy
     url = https://github.com/malfet/PeachPy.git
 [submodule "third_party/onnx"]
-    ignore = dirty
+    
     path = third_party/onnx
     url = https://github.com/onnx/onnx.git
 [submodule "third_party/sleef"]
-    ignore = dirty
+    
     path = third_party/sleef
     url = https://github.com/shibatch/sleef
 [submodule "third_party/ideep"]
-    ignore = dirty
+    
     path = third_party/ideep
     url = https://github.com/intel/ideep
 [submodule "third_party/nccl/nccl"]
-    ignore = dirty
+    
     path = third_party/nccl/nccl
     url = https://github.com/NVIDIA/nccl
 [submodule "third_party/gemmlowp/gemmlowp"]
-    ignore = dirty
+    
     path = third_party/gemmlowp/gemmlowp
     url = https://github.com/google/gemmlowp.git
 [submodule "third_party/fbgemm"]
-    ignore = dirty
+    
     path = third_party/fbgemm
     url = https://github.com/pytorch/fbgemm
 [submodule "android/libs/fbjni"]
-    ignore = dirty
+    
     path = android/libs/fbjni
     url = https://github.com/facebookincubator/fbjni.git
 [submodule "third_party/XNNPACK"]
-    ignore = dirty
+    
     path = third_party/XNNPACK
     url = https://github.com/google/XNNPACK.git
 [submodule "third_party/fmt"]
-    ignore = dirty
+    
     path = third_party/fmt
     url = https://github.com/fmtlib/fmt.git
 [submodule "third_party/tensorpipe"]
-    ignore = dirty
+    
     path = third_party/tensorpipe
     url = https://github.com/pytorch/tensorpipe.git
 [submodule "third_party/cudnn_frontend"]
diff --git a/CMakeLists.txt b/CMakeLists.txt
index c8af5f00b5c..bfa30ded1e2 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -22,6 +22,29 @@ if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
   message(FATAL_ERROR "In-source build are not supported")
 endif()
 
+# --------------------------------- chaquopy begin ------------------------------------
+set(BUILD_CUSTOM_PROTOBUF OFF)
+# set(CMAKE_TOOLCHAIN_FILE "/home/ubuntu/workspace/android-sdk/ndk/21.4.7075529/build/cmake/android.toolchain.cmake")
+set(BUILD_TEST OFF)
+set(BUILD_BINARY OFF)
+set(BUILD_LITE_INTERPRETER OFF)
+set(TRACING_BASED OFF)
+set(USE_LIGHTWEIGHT_DISPATCH OFF)
+
+set(BUILD_MOBILE_BENCHMARK OFF)
+set(BUILD_MOBILE_TEST OFF)
+
+set(USE_CUDA OFF)
+
+set(USE_ITT OFF)
+set(USE_GFLAGS OFF)
+set(USE_OPENCV OFF)
+set(USE_MPI OFF)
+
+set(USE_OPENMP OFF)
+set(BUILD_PYTHON ON)
+# --------------------------------- chaquopy end ------------------------------------
+
 # ---[ Project and semantic versioning.
 project(Torch CXX C)
 
@@ -715,7 +738,7 @@ if(INTERN_BUILD_MOBILE)
   else()
     set(INTERN_DISABLE_AUTOGRAD ON)
   endif()
-  set(BUILD_PYTHON OFF)
+  # set(BUILD_PYTHON OFF)
   set(BUILD_FUNCTORCH OFF)
   set(USE_DISTRIBUTED OFF)
   set(NO_API ON)
diff --git a/c10/macros/Macros.h b/c10/macros/Macros.h
index 919eb6c8567..364e192d5fe 100644
--- a/c10/macros/Macros.h
+++ b/c10/macros/Macros.h
@@ -433,7 +433,8 @@ __host__ __device__
 
 #if defined(__ANDROID__)
 #define C10_ANDROID 1
-#define C10_MOBILE 1
++// Chaquopy: this disables things required by the Python build.
+// #define C10_MOBILE 1
 #elif (                   \
     defined(__APPLE__) && \
     (TARGET_IPHONE_SIMULATOR || TARGET_OS_SIMULATOR || TARGET_OS_IPHONE))
diff --git a/cmake/Dependencies.cmake b/cmake/Dependencies.cmake
index 1813f4418a2..1b99cd65012 100644
--- a/cmake/Dependencies.cmake
+++ b/cmake/Dependencies.cmake
@@ -863,6 +863,7 @@ if(${Python_VERSION} VERSION_LESS 3.8)
 endif()
 
 # ---[ Python + Numpy
+message(+++++++++++++++++++++++++++++++++++++++++++Dependencies---1---BUILD_PYTHON = ${BUILD_PYTHON})
 if(BUILD_PYTHON)
   if(Python_Development.Module_FOUND)
     if(USE_NUMPY)
@@ -880,6 +881,7 @@ if(BUILD_PYTHON)
     caffe2_update_option(BUILD_PYTHON OFF)
   endif()
 endif()
+message(+++++++++++++++++++++++++++++++++++++++++++Dependencies---2---BUILD_PYTHON = ${BUILD_PYTHON})
 
 # ---[ pybind11
 if(USE_SYSTEM_PYBIND11)
diff --git a/setup.py b/setup.py
index a6a6db7b033..45d3c89e98c 100644
--- a/setup.py
+++ b/setup.py
@@ -483,11 +483,12 @@ def build_deps():
     check_submodules()
     check_pydep("yaml", "pyyaml")
     build_python = not BUILD_LIBTORCH_WHL
+    print(f"++++++++++++++++++++++++++++++++++++---build_python = {build_python}")
     build_pytorch(
         version=version,
         cmake_python_library=cmake_python_library,
         build_python=build_python,
-        rerun_cmake=RERUN_CMAKE,
+        rerun_cmake=True,
         cmake_only=CMAKE_ONLY,
         cmake=cmake,
     )
@@ -1167,7 +1168,15 @@ def main():
         long_description = f.read()
 
     version_range_max = max(sys.version_info[1], 13) + 1
+    
+    # Chaquopy: see package_data below.
+    if os.path.exists("chaquopy"):
+        shutil.rmtree("chaquopy")
+    os.mkdir("chaquopy")
+    os.symlink("../torch/lib", "chaquopy/lib")
+    
     torch_package_data = [
+        'lib/libtorch_global_deps.so',  # Chaquopy: see comment at top of package_data.
         "py.typed",
         "bin/*",
         "test/*",
@@ -1416,6 +1425,9 @@ def main():
     ]
     package_data = {
         "torch": torch_package_data,
+        'chaquopy': [
+            'lib/*.so*'  # See exclude_package_data below.
+        ],
     }
 
     if not BUILD_LIBTORCH_WHL:
@@ -1445,6 +1457,9 @@ def main():
         author="PyTorch Team",
         author_email="packages@pytorch.org",
         python_requires=f">={python_min_version_str}",
+        
+        exclude_package_data={'chaquopy': ['lib/libtorch_global_deps.so']},
+        
         # PyPI package information.
         classifiers=[
             "Development Status :: 5 - Production/Stable",
Submodule third_party/onnx contains modified content
Submodule third_party/pybind11 contains modified content
diff --git a/third_party/onnx/third_party/pybind11/CMakeLists.txt b/third_party/onnx/third_party/pybind11/CMakeLists.txt
index 7db1bf66..21e0588b 100644
--- a/third_party/onnx/third_party/pybind11/CMakeLists.txt
+++ b/third_party/onnx/third_party/pybind11/CMakeLists.txt
@@ -26,10 +26,12 @@ if(_pybind11_cmp0148)
   unset(_pybind11_cmp0148)
 endif()
 
+message(---------------------third_party-Onnx-third_party-pybind11-CMakeLists--1---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 # Avoid infinite recursion if tests include this as a subdirectory
 if(DEFINED PYBIND11_MASTER_PROJECT)
   return()
 endif()
+message(---------------------third_party-Onnx-third_party-pybind11-CMakeLists--2---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 
 # Extract project version from source
 file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/include/pybind11/detail/common.h"
Submodule third_party/pocketfft contains modified content
diff --git a/third_party/pocketfft/pocketfft_hdronly.h b/third_party/pocketfft/pocketfft_hdronly.h
index 330c3c7..deb60c5 100644
--- a/third_party/pocketfft/pocketfft_hdronly.h
+++ b/third_party/pocketfft/pocketfft_hdronly.h
@@ -156,9 +156,15 @@ template<> struct VLEN<double> { static constexpr size_t val=2; };
 inline void *aligned_alloc(size_t align, size_t size)
   {
   // aligned_alloc() requires that the requested size is a multiple of "align"
-  void *ptr = ::aligned_alloc(align,(size+align-1)&(~(align-1)));
-  if (!ptr) throw std::bad_alloc();
-  return ptr;
+  // void *ptr = ::aligned_alloc(align,(size+align-1)&(~(align-1)));
+  // if (!ptr) throw std::bad_alloc();
+  // return ptr;
+    void *ptr = nullptr;
+    int ret = posix_memalign(&ptr, align, size);
+    if (ret != 0) {
+        throw std::bad_alloc();
+    }
+    return ptr;
   }
 inline void aligned_dealloc(void *ptr)
     { free(ptr); }
Submodule third_party/pybind11 contains modified content
diff --git a/third_party/pybind11/CMakeLists.txt b/third_party/pybind11/CMakeLists.txt
index f53aa209..9c20f150 100644
--- a/third_party/pybind11/CMakeLists.txt
+++ b/third_party/pybind11/CMakeLists.txt
@@ -26,10 +26,12 @@ if(_pybind11_cmp0148)
   unset(_pybind11_cmp0148)
 endif()
 
+message(---------------------third_party-pybind11-CMakeLists--1---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 # Avoid infinite recursion if tests include this as a subdirectory
 if(DEFINED PYBIND11_MASTER_PROJECT)
   return()
 endif()
+message(---------------------third_party-pybind11-CMakeLists--2---PYBIND11_MASTER_PROJECT = ${PYBIND11_MASTER_PROJECT})
 
 # Extract project version from source
 file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/include/pybind11/detail/common.h"
diff --git a/tools/setup_helpers/cmake.py b/tools/setup_helpers/cmake.py
index 84e4dad32d3..dc2a7d0614c 100644
--- a/tools/setup_helpers/cmake.py
+++ b/tools/setup_helpers/cmake.py
@@ -305,10 +305,11 @@ class CMake:
             )
             sys.exit(1)
         build_options.update(cmake__options)
-
+        
+        print(f"--------------------cmake **build_options = {build_options}")
         CMake.defines(
             args,
-            Python_EXECUTABLE=sys.executable,
+            # Python_EXECUTABLE=sys.executable,
             TORCH_BUILD_VERSION=version,
             **build_options,
         )
diff --git a/torch/CMakeLists.txt b/torch/CMakeLists.txt
index b123023d2fd..1e8c039baf5 100644
--- a/torch/CMakeLists.txt
+++ b/torch/CMakeLists.txt
@@ -8,7 +8,8 @@ if(NOT CAFFE2_CMAKE_BUILDING_WITH_MAIN_REPO)
   option(USE_CUDA "Use CUDA" ON)
   set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
 endif()
-
+set(BUILD_PYTHON ON)
+message(+-+-+-+-+-+-+-+-+-+-+-+-+-+--+-+-+-+----------------BUILD_PYTHON = ${BUILD_PYTHON})
 if(NOT BUILD_PYTHON)
   return()
 endif()
@@ -324,7 +325,8 @@ if(CAFFE2_USE_MKL AND BUILD_LIBTORCHLESS)
   target_link_libraries(torch_python PRIVATE caffe2::mkl)
 endif()
 
-add_dependencies(torch_python onnx_proto)
+# todo xiao
+# add_dependencies(torch_python onnx_proto)
 # Avoid numpy for the DEPLOY build
 if(USE_NUMPY)
   target_link_libraries(torch_python PRIVATE Python::NumPy)
